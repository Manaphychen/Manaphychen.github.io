import{_ as g}from"./chunks/ArticleMetadata.H12JcJLK.js";import{_ as c,E as A,c as y,o as n,j as l,I as p,aj as t,w as k,b as r,e as d,a as o,t as D}from"./chunks/framework._AF764y6.js";const O=JSON.parse('{"title":"vue3快速上手","description":"","frontmatter":{"title":"vue3快速上手","date":"2023-11-03T10:11:49.000Z","permalink":"/vue/vue3/","categories":["前端","Vue"],"tags":[null],"author":"Manaphy"},"headers":[],"relativePath":"other/前端/vue3快速上手.md","filePath":"other/前端/vue3快速上手.md","lastUpdated":1743612544000}'),C={name:"other/前端/vue3快速上手.md"},u=l("h1",{id:"vue3快速上手",tabindex:"-1"},[o("Vue3快速上手 "),l("a",{class:"header-anchor",href:"#vue3快速上手","aria-label":"Permalink to “Vue3快速上手”"},"​")],-1),F=t('<h2 id="_1-vue3简介" tabindex="-1">1.Vue3简介 <a class="header-anchor" href="#_1-vue3简介" aria-label="Permalink to “1.Vue3简介”">​</a></h2><ul><li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li><li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity" target="_blank" rel="noreferrer">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs" target="_blank" rel="noreferrer">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+" target="_blank" rel="noreferrer">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors" target="_blank" rel="noreferrer">99位贡献者</a></li><li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0" target="_blank" rel="noreferrer">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="_2-vue3带来了什么" tabindex="-1">2.Vue3带来了什么 <a class="header-anchor" href="#_2-vue3带来了什么" aria-label="Permalink to “2.Vue3带来了什么”">​</a></h2><h3 id="_1-性能的提升" tabindex="-1">1.性能的提升 <a class="header-anchor" href="#_1-性能的提升" aria-label="Permalink to “1.性能的提升”">​</a></h3><ul><li>打包大小减少41%</li><li>初次渲染快55%, 更新渲染快133%</li><li>内存减少54%<br>......</li></ul><h3 id="_2-源码的升级" tabindex="-1">2.源码的升级 <a class="header-anchor" href="#_2-源码的升级" aria-label="Permalink to “2.源码的升级”">​</a></h3><ul><li>使用Proxy代替defineProperty实现响应式</li><li>重写虚拟DOM的实现和Tree-Shaking<br>......</li></ul><h3 id="_3-拥抱typescript" tabindex="-1">3.拥抱TypeScript <a class="header-anchor" href="#_3-拥抱typescript" aria-label="Permalink to “3.拥抱TypeScript”">​</a></h3><ul><li>Vue3可以更好的支持TypeScript</li></ul><h3 id="_4-新的特性" tabindex="-1">4.新的特性 <a class="header-anchor" href="#_4-新的特性" aria-label="Permalink to “4.新的特性”">​</a></h3><ol><li>Composition API（组合API）</li></ol><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>......</li></ul><ol start="2"><li>新的内置组件</li></ol><ul><li>Fragment</li><li>Teleport</li><li>Suspense</li></ul><ol start="3"><li>其他改变</li></ol><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>......</li></ul><h1 id="一、创建vue3-0工程" tabindex="-1">一、创建Vue3.0工程 <a class="header-anchor" href="#一、创建vue3-0工程" aria-label="Permalink to “一、创建Vue3.0工程”">​</a></h1>',17),B=t(`<h2 id="_1-使用-vue-cli-创建" tabindex="-1">1.使用 vue-cli 创建 <a class="header-anchor" href="#_1-使用-vue-cli-创建" aria-label="Permalink to “1.使用 vue-cli 创建”">​</a></h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create" target="_blank" rel="noreferrer">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">vue</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">## 安装或者升级你的@vue/cli</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> @vue/cli</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">## 创建</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">vue</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> vue_test</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">## 启动</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> vue_test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> serve</span></span></code></pre></div><h2 id="_2-使用-vite-创建" tabindex="-1">2.使用 vite 创建 <a class="header-anchor" href="#_2-使用-vite-创建" aria-label="Permalink to “2.使用 vite 创建”">​</a></h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite" target="_blank" rel="noreferrer">https://v3.cn.vuejs.org/guide/installation.html#vite</a><br>vite官网：<a href="https://vitejs.cn" target="_blank" rel="noreferrer">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下： <ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite构建对比图</li></ul><p><img src="https://cn.vitejs.dev/assets/bundler.37740380.png" alt=""></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">## 创建工程</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> vite-app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">project-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">## 进入工程目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">project-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">## 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">## 运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dev</span></span></code></pre></div><h1 id="二、常用-composition-api" tabindex="-1">二、常用 Composition API <a class="header-anchor" href="#二、常用-composition-api" aria-label="Permalink to “二、常用 Composition API”">​</a></h1>`,9),m=t('<p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html" target="_blank" rel="noreferrer">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="_1-拉开序幕的setup" tabindex="-1">1.拉开序幕的setup <a class="header-anchor" href="#_1-拉开序幕的setup" aria-label="Permalink to “1.拉开序幕的setup”">​</a></h2><ol><li>理解：Vue3.0中一个新的配置项，值为一个函数。</li><li>setup是所有<strong>Composition API（组合API）</strong>“ 表演的舞台 ”。</li><li>组件中所用到的：数据、方法等等，均要配置在setup中。</li><li>setup函数的两种返回值： <ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li>若返回一个渲染函数：则可以自定义渲染内容。（了解）</li></ol></li><li>注意点： <ol><li>尽量不要与Vue2.x配置混用 <ul><li>Vue2.x配置（data、methos、computed...）中<strong>可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong>不能访问到</strong>Vue2.x配置（data、methos、computed...）。</li><li>如果有重名, setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li></ol><h2 id="_2-ref函数" tabindex="-1">2.ref函数 <a class="header-anchor" href="#_2-ref函数" aria-label="Permalink to “2.ref函数”">​</a></h2>',4),E=l("li",null,"作用: 定义一个响应式的数据",-1),v=l("code",null,"const xxx = ref(initValue)",-1),b=l("li",null,[o("创建一个包含响应式数据的"),l("strong",null,"引用对象（reference对象，简称ref对象）"),o("。")],-1),f=l("li",null,[o("JS中操作数据： "),l("code",null,"xxx.value")],-1),_=t("<li>备注： <ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 “ 求助 ” 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li>",1),x=t(`<h2 id="_3-reactive函数" tabindex="-1">3.reactive函数 <a class="header-anchor" href="#_3-reactive函数" aria-label="Permalink to “3.reactive函数”">​</a></h2><ul><li>作用: 定义一个<strong>对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong>代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h2 id="_4-vue3-0中的响应式原理" tabindex="-1">4.Vue3.0中的响应式原理 <a class="header-anchor" href="#_4-vue3-0中的响应式原理" aria-label="Permalink to “4.Vue3.0中的响应式原理”">​</a></h2><h3 id="vue2-x的响应式" tabindex="-1">vue2.x的响应式 <a class="header-anchor" href="#vue2-x的响应式" aria-label="Permalink to “vue2.x的响应式”">​</a></h3><ul><li>实现原理： <ul><li>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</li><li>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;count&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () {}, </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span></code></pre></div><ul><li>存在问题： <ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h3 id="vue3-0的响应式" tabindex="-1">Vue3.0的响应式 <a class="header-anchor" href="#vue3-0的响应式" aria-label="Permalink to “Vue3.0的响应式”">​</a></h3><ul><li>实现原理: <ul><li>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</li><li>通过Reflect（反射）:  对源对象的属性进行操作。</li><li>MDN文档中描述的Proxy与Reflect： <ul><li>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></li><li>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></li></ul></li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 拦截读取属性值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(target, prop)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 拦截设置属性值或添加新属性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(target, prop, value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 拦截删除属性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    deleteProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">deleteProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(target, prop)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">proxy.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;tom&#39;</span></span></code></pre></div><h2 id="_5-reactive对比ref" tabindex="-1">5.reactive对比ref <a class="header-anchor" href="#_5-reactive对比ref" aria-label="Permalink to “5.reactive对比ref”">​</a></h2><ul><li>从定义数据角度对比： <ul><li>ref用来定义：<strong>基本类型数据</strong>。</li><li>reactive用来定义：<strong>对象（或数组）类型数据</strong>。</li><li>备注：ref也可以用来定义<strong>对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong>代理对象</strong>。</li></ul></li><li>从原理角度对比： <ul><li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive通过使用<strong>Proxy</strong>来实现响应式（数据劫持）, 并通过<strong>Reflect</strong>操作<strong>源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比： <ul><li>ref定义的数据：操作数据<strong>需要</strong><code>.value</code>，读取数据时模板中直接读取<strong>不需要</strong><code>.value</code>。</li><li>reactive定义的数据：操作数据与读取数据：<strong>均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="_6-setup的两个注意点" tabindex="-1">6.setup的两个注意点 <a class="header-anchor" href="#_6-setup的两个注意点" aria-label="Permalink to “6.setup的两个注意点”">​</a></h2><ul><li>setup执行的时机 <ul><li>在beforeCreate之前执行一次，this是undefined。</li></ul></li><li>setup的参数 <ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象 <ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><h2 id="_7-计算属性与监视" tabindex="-1">7.计算属性与监视 <a class="header-anchor" href="#_7-计算属性与监视" aria-label="Permalink to “7.计算属性与监视”">​</a></h2><h3 id="_1-computed函数" tabindex="-1">1.computed函数 <a class="header-anchor" href="#_1-computed函数" aria-label="Permalink to “1.computed函数”">​</a></h3><ul><li>与Vue2.x中computed配置功能一致</li><li>写法</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {computed} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	//计算属性——简写</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fullName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> person.firstName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;-&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> person.lastName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //计算属性——完整</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fullName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> person.firstName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;-&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> person.lastName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nameArr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;-&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            person.firstName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> nameArr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            person.lastName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> nameArr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_2-watch函数" tabindex="-1">2.watch函数 <a class="header-anchor" href="#_2-watch函数" aria-label="Permalink to “2.watch函数”">​</a></h3><ul><li>与Vue2.x中watch配置功能一致</li><li>两个小“坑”： <ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//情况一：监视ref定义的响应式数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(sum,(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">oldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;sum变化了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,newValue,oldValue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">},{immediate:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//情况二：监视多个ref定义的响应式数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">([sum,msg],(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">oldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;sum或msg变化了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,newValue,oldValue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/* 情况三：监视reactive定义的响应式数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">			若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">			若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(person,(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">oldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;person变化了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,newValue,oldValue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">},{immediate:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,deep:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//此处的deep配置不再奏效</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//情况四：监视reactive定义的响应式数据中的某个属性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">person.job,(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">oldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;person的job变化了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,newValue,oldValue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">},{immediate:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,deep:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//情况五：监视reactive定义的响应式数据中的某些属性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">([()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">person.job,()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">person.name],(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">oldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;person的job变化了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,newValue,oldValue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">},{immediate:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,deep:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//特殊情况</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">person.job,(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">oldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;person的job变化了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,newValue,oldValue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">},{deep:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span></code></pre></div><h3 id="_3-watcheffect函数" tabindex="-1">3.watchEffect函数 <a class="header-anchor" href="#_3-watcheffect函数" aria-label="Permalink to “3.watchEffect函数”">​</a></h3><ul><li>watch的套路是：既要指明监视的属性，也要指明监视的回调。</li><li>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</li><li>watchEffect有点像computed： <ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> x1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sum.value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> x2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> person.age</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;watchEffect配置的回调执行了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span></code></pre></div><h2 id="_8-生命周期" tabindex="-1">8.生命周期 <a class="header-anchor" href="#_8-生命周期" aria-label="Permalink to “8.生命周期”">​</a></h2><p><strong>vue2.x的生命周期</strong><br><img src="https://cn.vuejs.org/images/lifecycle.png" alt=""></p><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名： <ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下： <ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><h2 id="_9-自定义hook函数" tabindex="-1">9.自定义hook函数 <a class="header-anchor" href="#_9-自定义hook函数" aria-label="Permalink to “9.自定义hook函数”">​</a></h2><ul><li>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</li><li>类似于vue2.x中的mixin。</li><li>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</li></ul><h2 id="_10-toref" tabindex="-1">10.toRef <a class="header-anchor" href="#_10-toref" aria-label="Permalink to “10.toRef”">​</a></h2><ul><li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li><li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li><li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li></ul><h1 id="三、其它-composition-api" tabindex="-1">三、其它 Composition API <a class="header-anchor" href="#三、其它-composition-api" aria-label="Permalink to “三、其它 Composition API”">​</a></h1>`,32),P=t(`<h2 id="_1-shallowreactive-与-shallowref" tabindex="-1">1.shallowReactive 与 shallowRef <a class="header-anchor" href="#_1-shallowreactive-与-shallowref" aria-label="Permalink to “1.shallowReactive 与 shallowRef”">​</a></h2><ul><li>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</li><li>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</li><li>什么时候使用? <ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h2 id="_2-readonly-与-shallowreadonly" tabindex="-1">2.readonly 与 shallowReadonly <a class="header-anchor" href="#_2-readonly-与-shallowreadonly" aria-label="Permalink to “2.readonly 与 shallowReadonly”">​</a></h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="_3-toraw-与-markraw" tabindex="-1">3.toRaw 与 markRaw <a class="header-anchor" href="#_3-toraw-与-markraw" aria-label="Permalink to “3.toRaw 与 markRaw”">​</a></h2><ul><li>toRaw： <ul><li>作用：将一个由<code>reactive</code>生成的<strong>响应式对象</strong>转为<strong>普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw： <ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景: <ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="_4-customref" tabindex="-1">4.customRef <a class="header-anchor" href="#_4-customref" aria-label="Permalink to “4.customRef”">​</a></h2><ul><li>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</li><li>实现防抖效果：</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#ADBAC7;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">keyword</span><span style="--shiki-light:#032F62;--shiki-dark:#ADBAC7;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;{{keyword}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {ref,customRef} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		name:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Demo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">		setup</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">			// let keyword = ref(&#39;hello&#39;)</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //使用Vue准备好的内置ref</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">			//自定义一个myRef</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">			function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> myRef</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">delay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">				let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> timer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">				//通过customRef去实现自定义</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">				return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> customRef</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">track</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">					return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">						get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">							track</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//告诉Vue这个value值是需要被“追踪”的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">							return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">						},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">						set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">							clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(timer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">							timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">								value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> newValue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">								trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//告诉Vue去更新界面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">							},delay)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">						}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">					}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">				})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">			let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyword </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> myRef</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//使用程序员自定义的ref</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">			return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">				keyword</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><h2 id="_5-provide-与-inject" tabindex="-1">5.provide 与 inject <a class="header-anchor" href="#_5-provide-与-inject" aria-label="Permalink to “5.provide 与 inject”">​</a></h2><p><img src="https://v3.cn.vuejs.org/images/components_provide.png" alt=""></p><ul><li>作用：实现<strong>祖与后代组件间</strong>通信</li><li>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</li><li>具体写法： <ol><li>祖组件中：</li></ol></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	......</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> car </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">({name:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;奔驰&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,price:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;40万&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    provide</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;car&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,car)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    ......</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ol start="2"><li>后代组件中：</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(props,context){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	......</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> car</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;car&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {car}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	......</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="_6-响应式数据的判断" tabindex="-1">6.响应式数据的判断 <a class="header-anchor" href="#_6-响应式数据的判断" aria-label="Permalink to “6.响应式数据的判断”">​</a></h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="四、composition-api-的优势" tabindex="-1">四、Composition API 的优势 <a class="header-anchor" href="#四、composition-api-的优势" aria-label="Permalink to “四、Composition API 的优势”">​</a></h1>`,18),V=t('<h2 id="_1-options-api-存在的问题" tabindex="-1">1.Options API 存在的问题 <a class="header-anchor" href="#_1-options-api-存在的问题" aria-label="Permalink to “1.Options API 存在的问题”">​</a></h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。<br><img src="https://cdn.nlark.com/yuque/0/2023/gif/2345482/1678327887637-a511081c-b5ac-49cd-9c04-d35ae4e2ee17.gif#averageHue=%23000000&amp;clientId=ucc2bf612-05b5-4&amp;from=ui&amp;height=350&amp;id=u87f08384&amp;originHeight=657&amp;originWidth=960&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=2857489&amp;status=done&amp;style=stroke&amp;taskId=u16bfdfb7-3f2e-410f-a5cb-b234e1cb290&amp;title=&amp;width=511" alt="1.gif"><img src="https://cdn.nlark.com/yuque/0/2023/gif/2345482/1678327886969-b116b54c-a3e8-460d-b819-ec61db6e343b.gif#averageHue=%23030202&amp;clientId=ucc2bf612-05b5-4&amp;from=ui&amp;height=350&amp;id=APveL&amp;originHeight=720&amp;originWidth=523&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=1422980&amp;status=done&amp;style=stroke&amp;taskId=u1235c36e-7689-4c52-ad04-9424553d2e8&amp;title=&amp;width=254" alt="2.gif"></p><h2 id="_2-composition-api-的优势" tabindex="-1">2.Composition API 的优势 <a class="header-anchor" href="#_2-composition-api-的优势" aria-label="Permalink to “2.Composition API 的优势”">​</a></h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。<br><img src="https://cdn.nlark.com/yuque/0/2023/gif/2345482/1678328029861-9d16c839-4f0d-4e9e-a73c-e43343d48f49.gif#averageHue=%23070403&amp;clientId=ucc2bf612-05b5-4&amp;from=paste&amp;height=300&amp;id=u1146f5ac&amp;originHeight=540&amp;originWidth=785&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=1124384&amp;status=done&amp;style=stroke&amp;taskId=ue83dfa57-318e-4f8c-8221-525f270fc33&amp;title=&amp;width=436" alt="3.gif"><img src="https://cdn.nlark.com/yuque/0/2023/gif/2345482/1678328038748-c7f6ac45-d26b-401d-b2f0-b020b8b99d54.gif#averageHue=%23070403&amp;clientId=ucc2bf612-05b5-4&amp;from=paste&amp;height=300&amp;id=ue77e9513&amp;originHeight=600&amp;originWidth=735&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=1494905&amp;status=done&amp;style=stroke&amp;taskId=u794b0868-c093-48eb-abd2-3650501f60c&amp;title=&amp;width=367.5" alt="4.gif"></p><h1 id="五、新的组件" tabindex="-1">五、新的组件 <a class="header-anchor" href="#五、新的组件" aria-label="Permalink to “五、新的组件”">​</a></h1>',5),w=t(`<h2 id="_1-fragment" tabindex="-1">1.Fragment <a class="header-anchor" href="#_1-fragment" aria-label="Permalink to “1.Fragment”">​</a></h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="_2-teleport" tabindex="-1">2.Teleport <a class="header-anchor" href="#_2-teleport" aria-label="Permalink to “2.Teleport”">​</a></h2><ul><li>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong>组件html结构</strong>移动到指定位置的技术。</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">teleport</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;移动位置&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		&lt;div class=&quot;dialog&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			&lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		&lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	&lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">teleport</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><h2 id="_3-suspense" tabindex="-1">3.Suspense <a class="header-anchor" href="#_3-suspense" aria-label="Permalink to “3.Suspense”">​</a></h2><ul><li>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</li><li>使用步骤： <ul><li>异步引入组件</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {defineAsyncComponent} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> defineAsyncComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./components/Child.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">))</span></span></code></pre></div><ul><li>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;我是App组件&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> v-slot</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">				&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">Child</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> v-slot</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">fallback</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">				&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;加载中.....&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">			&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><h1 id="六、其他" tabindex="-1">六、其他 <a class="header-anchor" href="#六、其他" aria-label="Permalink to “六、其他”">​</a></h1>`,11),T=t(`<h2 id="_1-全局api的转移" tabindex="-1">1.全局API的转移 <a class="header-anchor" href="#_1-全局api的转移" aria-label="Permalink to “1.全局API的转移”">​</a></h2><ul><li>Vue 2.x 有许多全局 API 和配置。 <ul><li>例如：注册全局组件、注册全局指令等。</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//注册全局组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;MyButton&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  template: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;&lt;button @click=&quot;count++&quot;&gt;Clicked {{ count }} times.&lt;/button&gt;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//注册全局指令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;focus&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  inserted</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li>Vue3.0中对这些API做出了调整： <ul><li>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上<br> | 2.x 全局 API（<code>Vue</code><br>） | 3.x 实例 API (<code>app</code><br>) | | :-- | :-- | | Vue.config.xxxx | app.config.xxxx | | Vue.config.productionTip | <strong>移除</strong> | | Vue.component | app.component | | Vue.directive | app.directive | | Vue.mixin | app.mixin | | Vue.use | app.use | | Vue.prototype | app.config.globalProperties |</li></ul></li></ul><h2 id="_2-其他改变" tabindex="-1">2.其他改变 <a class="header-anchor" href="#_2-其他改变" aria-label="Permalink to “2.其他改变”">​</a></h2><ul><li>data选项应始终被声明为一个函数。</li><li>过度类名的更改： <ul><li>Vue2.x写法</li></ul></li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">.v-enter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">.v-leave-to</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">.v-leave</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">.v-enter-to</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li>Vue3.x写法</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">.v-enter-from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">.v-leave-to</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">.v-leave-from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">.v-enter-to</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li><strong>移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></li><li><strong>移除</strong><code>v-on.native</code>修饰符 <ul><li>父组件中绑定事件</li></ul></li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">my-component</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">  v-on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#ADBAC7;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">handleComponentEvent</span><span style="--shiki-light:#032F62;--shiki-dark:#ADBAC7;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">  v-on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#ADBAC7;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">handleNativeClickEvent</span><span style="--shiki-light:#032F62;--shiki-dark:#ADBAC7;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">/&gt;</span></span></code></pre></div><ul><li>子组件中声明自定义事件</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    emits: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;close&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><ul><li><strong>移除</strong>过滤器（filter）</li></ul><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote><ul><li>......</li></ul>`,16);function j(s,R,I,S,q,N){const e=g,h=A("ClientOnly");return n(),y("div",null,[u,p(h,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),r(e,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),F,p(h,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),r(e,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),B,p(h,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),r(e,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),m,l("ul",null,[E,l("li",null,[o("语法: "),v,l("ul",null,[b,f,l("li",null,[o("模板中读取数据: 不需要.value，直接："),l("code",null,"<div>"+D(s.xxx)+"</div>",1)])])]),_]),x,p(h,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),r(e,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),P,p(h,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),r(e,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),V,p(h,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),r(e,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),w,p(h,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),r(e,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),T])}const z=c(C,[["render",j]]);export{O as __pageData,z as default};
