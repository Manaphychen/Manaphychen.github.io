import{_ as h}from"./chunks/ArticleMetadata.H12JcJLK.js";import{_ as e,E as k,c as d,o as n,j as l,I as r,aj as o,w as c,b as g,e as y,a as A}from"./chunks/framework._AF764y6.js";const C="/assets/1605618591288.BYapciQ4.png",D="/assets/1605618639316.DRHHR0me.png",F="/assets/1605618857994.DnYfemKe.png",B="/assets/1605618948854.CE90nnN7.png",u="/assets/1605751245517.G7ygbPTl.png",b="/assets/1605751817615.BMlu1FpL.png",m="/assets/1605753280558.lLQqlwin.png",E="/assets/1605754003870.CCc8LZH2.png",_="/assets/1605756569500.BKZZpQb-.png",v="/assets/1605756831808.CFAo0EuY.png",f="/assets/1605757017928.xjUDOnVv.png",x="/assets/1605776308517.CuN3ICqb.png",j="/assets/1605786815474.BhN82cUr.png",J="/assets/1605789644065.DwR49tbr.png",P="/assets/1605790378482.DrUzbaqg.png",S="/assets/1605790759364.DTS15-a9.png",N="/assets/1605791140909.Bgh2WTNu.png",w="/assets/1605791172863.vNA_pCs8.png",q="/assets/1605791886429.DeqqKNNs.png",Y=JSON.parse('{"title":"字节码指令集","description":"","frontmatter":{"title":"字节码指令集","date":"2024-05-17T17:13:04.000Z","permalink":"/jvm/instruction/","categories":["后端","JVM虚拟机","字节码与类的加载"],"tags":[null],"author":"Manaphy"},"headers":[],"relativePath":"jvm/03.字节码与类的加载/02.字节码指令集.md","filePath":"jvm/03.字节码与类的加载/02.字节码指令集.md","lastUpdated":1743620201000}'),T={name:"jvm/03.字节码与类的加载/02.字节码指令集.md"},V=l("h1",{id:"字节码指令集",tabindex:"-1"},[A("字节码指令集 "),l("a",{class:"header-anchor",href:"#字节码指令集","aria-label":"Permalink to “字节码指令集”"},"​")],-1),M=o(`<h2 id="_1-概述" tabindex="-1">1. 概述 <a class="header-anchor" href="#_1-概述" aria-label="Permalink to “1. 概述”">​</a></h2><p>Java字节码对于虚拟机，就好像汇编语言对于计算机，属于基本执行指令。</p><p>Java虚拟机的指令由<span style="color:red;">一个字节长度</span>的、代表着某种特定操作含义的数字（称为操作码，Opcode）以及跟随其后的零至多个代表此操作所需参数（称为操作数，Operands）而构成。由于Java虚拟机采用面向操作数栈而不是面向寄存器的结构，所以大多数的指令都不包含操作数，只有一个操作码。</p><p>由于限制了Java虚拟机操作码的长度为一个字节（即0~255），这意味着指令集的操作码总数不可能超过256条</p><p>官方文档： <a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html" target="_blank" rel="noreferrer">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html</a></p><p>熟悉虚拟机的指令对于动态字节码生成、反编译 Class 文件、 Class 文件修补都有着非常重要的价值。因此，阅读字节码作为了解 Java 虚拟机的基础技能，需要熟练掌握常见指令</p><h3 id="执行模型" tabindex="-1">执行模型 <a class="header-anchor" href="#执行模型" aria-label="Permalink to “执行模型”">​</a></h3><p>如果不考虑异常处理的话，那么 Java 虚拟机的解释器可以使用下面这个伪代码当做最基本的执行模型来理解</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    自动计算PC寄存器的值加1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    根据PC寄存器的指示位置，从字节码流中取出操作码;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(字节码存在操作数) 从字节码流中取出操作数;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    执行操作码所定义的操作;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(字节码长度</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><h3 id="字节码与数据类型" tabindex="-1">字节码与数据类型 <a class="header-anchor" href="#字节码与数据类型" aria-label="Permalink to “字节码与数据类型”">​</a></h3><p>在 Java 虚拟机的指令集中，大多数的指令都包含了其操作所对应的数据类型信息。例如，iload 指令用于从局部变量表中加载 int 类型的数据到操作数栈中，而 fload 指令加载的则是 float 类型的数据</p><p>对于大部分与数据类型相关的字节码指令，<span style="color:red;">它们的操作码助记符中都有特殊的字符来表明专门为哪种数据类型服务：</span></p><ul><li>i 代表对 int 类型的数据操作</li><li>l 代表 long</li><li>s 代表 short</li><li>b 代表 byte</li><li>c 代表 char</li><li>f 代表 float</li><li>d 代表 double</li></ul><p>也有一些指令的助记符中<span style="color:red;">没有明确地指明操作类型的字母</span>，如 arraylength 指令，它没有代表数据类型的特殊字符，但操作数永远只能是一个数组类型的对象。</p><p>还有另一些指令，如无条件跳转指令 goto 则是与<span style="color:red;">数据类型无关的</span>。</p><p>大部分的指令都没有支持整数类型 byte、char 和 short，甚至没有任何指令支持 boolean 类型。编译器会在编译器或运行期将 byte 和short 类型的数据带符号扩展(Sign-Extend)为相应的 int 类型数据，将 boolean 和 char 类型数据零位扩展(Zero-Extend)为相应的 int 类型数据。与之类似，在处理 boolean、byte、short 和 char 类型的数组时，也会转换为使用对应的 init 类型的字节码指令来处理。因此，大多数对于 boolean、byte、short 和 char 类型数据的操作，实际上都是使用相应的 int 类型作为运算类型</p><h3 id="指令分类" tabindex="-1">指令分类 <a class="header-anchor" href="#指令分类" aria-label="Permalink to “指令分类”">​</a></h3><p>由于完全介绍和学习这些指令需要花费大量时间，为了让能够更快地熟悉和了解这些基本指令，这里将 JVM 中的字节码指令集按用途大致分成9类：</p><ul><li>加载与存储指令</li><li>算术指令</li><li>类型转换指令</li><li>对象的创建与访问指令</li><li>方法调用与返回指令</li><li>操作数栈管理指令</li><li>比较控制指令</li><li>异常处理指令</li><li>同步控制指令</li></ul><p>在做值相关操作时：</p><ul><li>一个指令，可以从局部变量表、常量池、堆中对象、方法调用、系统调用等中取得数据，这些数据(可能是值，可能是对象的引用)被压入操作数栈</li><li>一个指令，也可以从操作数栈中取出一到多个值(pop 多次)，完成赋值、加减乘除、方法传参、系统调用等操作</li></ul><h2 id="_2-加载与存储指令" tabindex="-1">2. 加载与存储指令 <a class="header-anchor" href="#_2-加载与存储指令" aria-label="Permalink to “2. 加载与存储指令”">​</a></h2><p><strong>作用</strong>：加载和存储指令用于将数据从栈帧的局部变量表和操作数栈之间来回传递</p><p><strong>常用指令</strong></p><ul><li><p>「局部变量压栈指令」将一个局部变量加载到操作数栈：<code>xload</code>、<code>xload_</code>(其中 x 为 i、l、f、d、a，n 为 0 到 3)；<code>xaload</code>、<code>xaload</code>(其 x 为 i、l、f、d、a、b、c、s，n 为 0 到 3)</p></li><li><p>「常量入栈指令」将一个常量加载到操作数栈：<code>bipush</code>、<code>sipush</code>、<code>ldc</code>、<code>ldc_w</code>、<code>ldc2_w</code>、<code>aconst_null</code>、<code>iconst_m1</code>、<code>iconst_</code>、<code>iconst_</code>、<code>fconst_</code>、<code>dconst_</code></p></li><li><p>「出栈装入局部变量表指令」将一个数值从操作数栈存储到局部变量表：<code>xstore</code>、<code>xstore_</code>(其中 x 为 i、l、f、d、a，n 为 0 到 3); <code>xastore</code>(其中 x 为 i、l、f、d、a、b、c、s)</p></li><li><p>扩充局部变量表的访问索引的指令：<code>wide</code></p></li></ul><p>上面所列举的指令助记符中，有一部分是以尖括号结尾的(例如<code>iload_</code>)。这些指令助记符实际上代表了一组指令(例如<code>iload_</code>代表了<code>iload_0</code>、<code>iload_1</code>、<code>iload_2</code>和<code>iload_3</code>这几个指令)。这几组指令都是某个带有一个操作数的通用指令(例如 <code>iload</code>)的特殊形式，<span style="color:red;">对于这若干组特殊指令来说，它们表面上没有操作数，不需要进行取操作数的动作，但操作数都隐含在指令中</span></p><p>除此之外，它们的语义与原生的通用指令完全一致(例如 <code>iload_0</code>的语义与操作数为0时的<code>iload</code>指令语义完全一致)。在尖括号之间的字母指定了指令隐含操作数的数据类型，<code>&lt;n&gt;</code>代表非负的整数，<code>&lt;i&gt;</code>代表是 int 类型数据，<code>&lt;l&gt;</code>代表 long 类型，<code>&lt;f&gt;</code>代表 float 类型，<code>&lt;d&gt;</code>代表 double 类型</p><p>操作 byte、char、short 和 boolean 类型数据时，经常用 int 类型的指令来表示</p><h3 id="再谈操作数栈和局部变量表" tabindex="-1">再谈操作数栈和局部变量表 <a class="header-anchor" href="#再谈操作数栈和局部变量表" aria-label="Permalink to “再谈操作数栈和局部变量表”">​</a></h3><p><strong>操作数栈(Operand Stacks)</strong></p><p>我们知道，Java 字节码是 Java 虚拟机所使用的指令集。因此，它与 Java 虚拟机基于栈的计算模型是密不可分的</p><p>在解释执行过程中，每当为 Java 方法分配栈帧时，Java 虚拟机往往需要开辟一块额外的空间作为<span style="color:red;">操作数栈，来存放计算的操作数以及返回结果</span>。</p><p>具体来说便是：<span style="background-color:khaki;">执行每一条指令之前，Java 虚拟机要求该指令的操作数已被压入操作数栈中。在执行指令时，Java 虚拟机会将该指令所需的操作数弹出，并且将指令的结果重新压入栈中</span>。</p><p><img src="`+C+'" alt="1605618591288"></p><p>以加法指令 iadd 为例。假设在执行该指令之前，栈顶的两个元素分别为 int 值 1 和 int 值 2，那么 iadd 指令将弹出这两个 int，并将求得的和 int 值为 3 压入栈中</p><p><img src="'+D+'" alt="1605618639316"></p><p>由于 iadd 指令只消耗栈顶的两个元素，因此，对于离栈顶距离为 2 的元素，即图中的问号，iadd 指令并不关心它是否存在，更加不会对其进行修改</p><p><strong>局部变量表(Local Variables)</strong></p><p>Java 方法栈帧的另外一个重要组成部分则是局部变量区，<span style="color:red;">字节码程序可以将计算的结果缓存在局部变量区之中</span>。</p><p>实际上，Java 虚拟机将局部变量区<span style="color:red;">当成一个数组</span>，依次存放 this 指针(仅非静态方法)，所传入的参数，以及字节码中的局部变量。</p><p>和操作数栈一样，long 类型以及 double 类型的值将占据两个单元，其余类型仅占据一个单元</p><p><img src="'+F+`" alt="1605618857994"></p><p><strong>举例：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> l, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> f) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Hello, World&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>对应得图示：</strong></p><p><img src="`+B+`" alt="1605618948854"></p><ul><li>在栈帧中，与性能调优关系最为密切的部分就是局部变量表。局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收</li><li>在方法执行时，虚拟机使用局部变量表完成方法的传递</li><li>i 和 s 代表的是槽的复用</li></ul><h3 id="局部变量压栈指令" tabindex="-1">局部变量压栈指令 <a class="header-anchor" href="#局部变量压栈指令" aria-label="Permalink to “局部变量压栈指令”">​</a></h3><p><span style="color:red;">局部变量压栈指令将给定的局部变量表中的数据压入操作数栈</span>。</p><p>这类指令大体可以分为：</p><ul><li><code>xload_n</code>(x为i、l、f、d、a，n为 0 到 3)</li><li><code>xload</code>(x为i、l、f、d、a)</li></ul><p>说明：在这里，<code>x</code>的取值表示数据类型</p><p>指令<code>xload_n</code>表示将第<code>n</code>个局部变量压入操作数栈，比如<code>iload_1、fload_0、aload_0</code>等指令。其中<code>aload_n</code>表示将一个对象引用压栈</p><p>指令<code>xload</code>通过指定参数的形式，把局部变量压入操作数栈，当使用这个命令时，表示局部变量的数量可能超过了4个，比如指令<code>iload、fload</code>等</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> LoadAndStoreTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 局部变量压栈指令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, Object </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">long</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">boolean</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> flag</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">short</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(num);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(count);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(flag);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(arr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><img src="`+u+'" alt="1605751245517"></p><h3 id="常量入栈指令" tabindex="-1">常量入栈指令 <a class="header-anchor" href="#常量入栈指令" aria-label="Permalink to “常量入栈指令”">​</a></h3><p>常量入栈指令的功能是将常数压入操作数栈，根据数据类型和入栈内容的不同，又可以分为 const 系列、push 系列和 ldc 指令</p><p><strong>指令 const 系列：</strong> 用于对特定的常量入栈，入栈的常量隐含在指令本身里。指令有：<code>iconst_n(n从-1到5)、lconst_n</code>(n从0到1)、<code>fconst_n</code>(n从0到2)、<code>dconst_n</code>(n从0到1)、<code>aconst_null</code></p><p><strong>比如：</strong></p><ul><li>iconst_m1将-1压入操作数栈</li><li>iconst_x(x为0到5)将 x 压入栈</li><li>lconst_0、lconst_1 分别将长整数0和1压入栈</li><li>fconst_0、fconst_1、fconst_2 分别将浮点数0、1、2压入栈</li><li>dconst_0 和 dconst_1 分别将 double 型0和1压入栈</li><li>aconst_null 将 null 压入操作数栈</li></ul><p>从指令的命名上不难找出规律，指令助记符的第一个字符总是喜欢表示数据类型，i 表示整数，l 表示长整型，f 表示浮点数，d 表示双精度浮点，习惯上用 a 表示对象引用。如果指令隐含操作的参数，会以下划线形式给出</p><p>**指令 push 系列：**主要包括 bipush 和 sipush，它们的区别在于接受数据类型的不同，bipush 接收8位整数作为参数，sipush 接收16位整数，它们都将参数压入栈</p><p>**指令 ldc 系列：**如果以上指令都不能满足需求，那么可以使用万能的 ldc 指令，它可以接收一个8位的参数，该参数指向常量池中的 int、float 或者 String 的索引，将指定的内容压入堆栈</p><p>类似的还有 ldc_w，它接收两个8位参数，能支持的索引范围大于 ldc</p><p>如果要压入的元素是 long 或者 double 类型的，则使用 ldc2_w 指令，使用方式都是类似的</p><p>总结如下：</p><p><img src="'+b+`" alt="1605751817615"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 常量入栈指令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> pushConstLdc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 127</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 128</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 32767</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 32768</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span> 0 iconst_m1</span></span>
<span class="line"><span> 1 istore_1</span></span>
<span class="line"><span> 2 iconst_5</span></span>
<span class="line"><span> 3 istore_2</span></span>
<span class="line"><span> 4 bipush 6</span></span>
<span class="line"><span> 6 istore_3</span></span>
<span class="line"><span> 7 bipush 127</span></span>
<span class="line"><span> 9 istore 4</span></span>
<span class="line"><span>11 sipush 128</span></span>
<span class="line"><span>14 istore 5</span></span>
<span class="line"><span>16 sipush 32767</span></span>
<span class="line"><span>19 istore 6</span></span>
<span class="line"><span>21 ldc #2 &lt;32768&gt;</span></span>
<span class="line"><span>23 istore 7</span></span>
<span class="line"><span>25 return</span></span></code></pre></div><h3 id="出栈装入局部变量表" tabindex="-1">出栈装入局部变量表 <a class="header-anchor" href="#出栈装入局部变量表" aria-label="Permalink to “出栈装入局部变量表”">​</a></h3><p>出栈装入局部变量表指令用于将操作数栈中栈顶元素弹出后，装入局部变量表的指定位置，用于给局部变量赋值</p><p>这类指令主要以 store 的形式存在，比如<code> xstore</code> (x 为 i、l、f、d、a)、<code>xstore_n</code>(x 为 i、l、f、d、a，n 为0至3)和 <code>pasture</code>(x 为 i、l、f、d、a、b、c、s)</p><ul><li>其中，指令 istore_n 将从操作数栈中弹出一个整数，并把它赋值给局部变量 n</li><li>指令 xstore 由于没有隐含参数信息，故需要提供一个 byte 类型的参数类指定目标局部变量表的位置</li></ul><p>xastore 则专门针对数组操作，以 iastore 为例，它用于给一个 int 数组的给定索引赋值。在 iastore 执行前，操作数栈顶需要以此准备3个元素：值、索引、数组引用，iastore 会弹出这3个值，并将值赋给数组中指定索引的位置</p><div class="tip custom-block"><p class="custom-block-title">说明</p><p><span style="color:red;">一般说来，类似像 store 这样的命令需要带一个参数，用来指明将弹出的元素放在局部变量表的第几个位置。</span>但是，为了尽可能压缩指令大小，使用专门的 istore_1 指令表示将弹出的元素放置在局部变量表第1个位置。类似的还有 istore_0、istore_2、istore_3，它们分别表示从操作数栈顶弹出一个元素，存放在局部变量表第0、2、3个位置</p><p>由于局部变量表前几个位置总是非常常用，因此<span style="color:red;">这种做法虽然增加了指令数量，但是可以大大压缩生成的字节码的体积。</span>如果局部变量表很大，需要存储的槽位大于3，那么可以使用 istore 指令，外加一个参数，用来表示需要存放的槽位位置</p></div><p><img src="`+m+`" alt="1605753280558"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 演示代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> LoadAndStoreTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 局部变量压栈指令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, Object </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">long</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">boolean</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> flag</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">short</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(num);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(count);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(flag);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(arr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 常量入栈指令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> pushConstLdc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 127</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 128</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1234567</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> constLdc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        float</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        float</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Date</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 出栈装入局部变量表指令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> store</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> k</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 12</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;atguigu&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        float</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10.0F</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">long</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> l</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">float</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="_3-算术指令" tabindex="-1">3. 算术指令 <a class="header-anchor" href="#_3-算术指令" aria-label="Permalink to “3. 算术指令”">​</a></h2><p><strong>作用</strong>：算术指令用于对两个操作数栈上的值进行某种特定的运算，并把结果重新压入操作数栈</p><p><strong>分类</strong>：大体上算术指令可以分为两种：对<span style="color:red;">整型数据</span>进行运算的指令与对<span style="color:red;">浮点类型数据</span>进行运算的指令</p><p><strong>byte、short、char和boolean类型说明</strong></p><p>在每一大类中，都有针对Java虚拟机具体数据类型的专用算术指令。但是没有直接支持byte、short、char和boolean类型的算术指令，对于这些数据的运算，都是用int类型的指令来处理。此外，在处理boolean、byte、short和char类型的数组的时候，也会转换成对应的int类型的字节码指令进行处理。</p><p><img src="`+E+`" alt="1605754003870"></p><p><strong>运算时的溢出</strong></p><p>数据运算可能会导致溢出，例如两个很大的正整数相加，结果可能只是一个负数。其实Java虚拟机规范并没有明确规定整型数据溢出的结果，仅仅规定了在处理整型数据的时候，只有除法指令以及求余指令中出现除数为0的情况下，会导致虚拟机抛出 ArithmetciException 异常</p><p><strong>运算模式</strong></p><p>向最接近数舍入模式：JVM 要求在进行浮点数计算时，所有的运算结果都必须舍入到适当的精度，非精确结果必须舍入为可被表示的最接近的精确值，如果有两种可表示的形式与该值一样接近，将优先选择最低有效位为零的。</p><p>向零舍入模式：将浮点数转换为整数时，采用该模式，该模式将在目标数值类型中选择一个最接近但是不大于原值的数字作为最精确的舍入结果。</p><p><strong>NaN的使用</strong></p><p>当一个操作产生溢出时，将会使用有符号的无穷大表示，如果某个操作结果没有明确的数学定义的话，将会使用 NaN 值来表示。而且所有使用 NaN 值作为操作数的算术操作，结果都会返回 NaN 。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(d);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// NaN</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> d1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(d1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Infinity</span></span></code></pre></div><h3 id="所有算术指令" tabindex="-1">所有算术指令 <a class="header-anchor" href="#所有算术指令" aria-label="Permalink to “所有算术指令”">​</a></h3><p>所有的运算符指令包括</p><ul><li><p>加法指令：iadd、ladd、fadd、dadd</p></li><li><p>减法指令：isub、lsub、fsub、dsub</p></li><li><p>乘法指令：imul、lmul、fmul、dmul</p></li><li><p>除法指令：idiv、ldiv、fdiv、ddiv</p></li><li><p>求余指令：irem、lrem、frem、drem (remainder：余数)</p></li><li><p>取反指令：ineg、lneg、fneg、dneg (negation：取反)</p></li><li><p>自增指令：iinc</p></li><li><p>位运算指令，又可分为：</p><ul><li>位移指令：ishl、ishr、iushr、lshl、lshr、lushr</li><li>按位或指令：ior、lor</li><li>按位与指令：iand、land</li><li>按位异或指令：ixor、lxor</li></ul></li><li><p>比较指令：dcmpg、dcmlp、fcmpg、fcmpl、lcmp</p></li></ul><p><strong>关于++操作的理解</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> IAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> m1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> m2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        ++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> m3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">j;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> m4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>对于不参与运算的情况下，i++ 和 ++i 的字节码操作是一样的</p><p><img src="`+_+'" alt="1605756569500"></p><p>参与运算的情况下</p><p><img src="'+v+'" alt="1605756831808"></p><p>i = 1++ 的情况下</p><p><img src="'+f+`" alt="1605757017928"></p><h3 id="比较指令的说明" tabindex="-1">比较指令的说明 <a class="header-anchor" href="#比较指令的说明" aria-label="Permalink to “比较指令的说明”">​</a></h3><p>比较指令的作用是比较栈顶两个元素的大小，并将比较结果入栈</p><p>比较指令有：<code>dcmpg</code>、<code>dcmpl</code>、<code>fcmpg</code>、<code>fcmpl</code>、<code>lcmp</code></p><ul><li>与前面讲解的指令类似，首字符 d 表示 double 类型，f 表示 float，l 表示 long</li></ul><p>对于 double 和 float 类型的数字，由于 NaN 的存在，各有两个版本的比较指令，以 float 为例，有 fcmpg 和 fcmpl 两个指令，它们的区别在于在数字比较时，若遇到 NaN 值，处理结果不同</p><p>指令 dcmpl 和 dcmpg 也是类似的，根据其命名可以推测其含义，在此不再赘述</p><p>指令 lcmp 针对 long 型整数，由于 long 型整数没有 NaN 值，故无需准备两套指令</p><p><strong>举例：</strong></p><p>指令 fcmpg 和 fcmpl 都从栈中弹出两个操作数，并将它们做比较，设栈顶的元素为 v2， 栈顶顺位第2位元素为 v1，若 v1 = v2，则压入0；若 v1 &gt; v2 则压入1；若 v1 &lt; v2 则压入-1</p><p>两个指令的不同之处在于，如果遇到 NaN 值，fcmpg 会压入1，而 fcmpl 会压入-1</p><p>数值类型的数据才可以谈大小，boolean、引用数据类型不能比较大小</p><h2 id="_4-类型转换指令" tabindex="-1">4. 类型转换指令 <a class="header-anchor" href="#_4-类型转换指令" aria-label="Permalink to “4. 类型转换指令”">​</a></h2><p><strong>说明</strong></p><p>类型转换指令可以将两种不同的数值类型进行相互转换</p><p>这些转换操作一般用于实现用户代码中的<span style="color:red;">显式类型转换操作，</span>或者用来处理<strong>字节码指令集中数据类型相关指令</strong>无法与<strong>数据类型</strong>一一对应的问题</p><h3 id="_1-宽化类型转换" tabindex="-1">1. 宽化类型转换 <a class="header-anchor" href="#_1-宽化类型转换" aria-label="Permalink to “1. 宽化类型转换”">​</a></h3><p><strong>转换规则</strong></p><p>Java 虚拟机直接支持以下数值的宽化类型转换(Widening Numeric Conversion，小范围类型向大范围类型的安全转换)。也就是说，并不需要指令执行，包括：</p><ul><li><p>从 int 类型到 long、float 或者 double 类型，对应的指令为：i2l、i2f、i2d</p></li><li><p>从 long 类型到 float、double 类型。对应的指令为：l2f、l2d</p></li><li><p>从 flaot 类型到 double 类型。对应的指令为：f2d</p></li></ul><p><span style="background-color:khaki;">简化为：int --&gt; long --&gt; float --&gt; double</span></p><p><strong>精度损失问题</strong></p><p>宽化类型转换是不会因为超过目标类型最大值而丢失信息的，例如，从 int 转换到 long，或者从 int 转换到 double，都不会丢失任何信息，转换前后的值是精确相等的</p><p>从 int、long 类型数值转换到 float，或者 long 类型树脂转换到 double 时，将可能发生丢失精度——可能丢失掉几个最低有效位上的值，转换后的浮点数值是根据 IEEE754 最接近舍入模式所得到的正确整数数值。尽管宽化类型转换实际上是可能发生精度丢失的，但是这种转换永远不会导致 Java 虚拟机抛出运行时异常</p><div class="tip custom-block"><p class="custom-block-title">补充说明</p><p><span style="color:red;">从 byte、char 和 short 类型到 int 类型的宽化类型转换实际上是不存在的</span>，对于 byte 类型转换为 int，虚拟机并没有做实质性的转化处理，知识简单地通过操作数栈交换了两个数据。而 byte 转为 long 时，使用的是 i2l，可以看到在内部 byte 在这里已经等同于 int 类型处理，类似的还有 short 类型，这种处理方式有两个特点 ：</p><p>一方面可以减少实际的数据类型，如果为 short 和 byte 都准备一套指令，那么指令的数量就会大增，而<span style="color:red;">虚拟机目前的设计上，只愿意使用一个字节表示指令，因此指令总数不能超过256个，为了节省指令资源，将 short 和 byte 当作 int 处理也是情理之中 </span></p><p>另一方面，由于局部变量表中的槽位固定为32位，无论是 byte 或者 short 存入局部变量表，都会占用32位空间。从这个角度来说，也没有必要特意区分这几种数据类型</p></div><h3 id="_2-窄化类型转换" tabindex="-1">2. 窄化类型转换 <a class="header-anchor" href="#_2-窄化类型转换" aria-label="Permalink to “2. 窄化类型转换”">​</a></h3><p><strong>转换规则</strong></p><p>Java 虚拟机也直接支持以下<strong>窄化类型转换</strong>：</p><ul><li>从 int 类型至 byte、short 或者 char 类型。<span style="background-color:khaki;">对应的指令有：i2b、i2c、i2s</span></li><li>从 long 类型到 int 类型。<span style="background-color:khaki;">对应的指令有：l2i</span></li><li>从 float 类型到 int 或者 long 类型。<span style="background-color:khaki;">对应的指令有：f2i、f2l</span></li><li>从 double 类型到 int、long 或者 float 类型。<span style="background-color:khaki;">对应的指令有：d2i、d2l、d2f</span></li></ul><p><strong>精度损失问题</strong></p><p>窄化类型转换可能会导致转换结果具备不同的正负号、不同的数量级，因此，转换过程很可能会导致数值丢失精度</p><p>尽管数据类型窄化转换可能会发生上限溢出、下限溢出和精度丢失等情况，但是 Java 虚拟机规范中明确规定数值类型的窄化转换指令永远不可能导致虚拟机抛出运行时异常</p><div class="tip custom-block"><p class="custom-block-title">补充说明</p><p>当将一个浮点值窄化转换为整数类型T（T限于int类型或者long类型之一）的时候，将遵循以下转换原则</p><ul><li>如果浮点为NaN，那么转换结果就是int 或者long类型的0</li><li>如果浮点值不是无穷大的话，浮点值使用 IEEE 754 的向零舍入模式取整，获得整数值v，如果v在目标类型T（int 或者 long）的表示范围之内，那转换的结果就是v。否则，将根据v的符号，转换T所能表示的最大或者最小正数。</li></ul><p>当将一个double类型窄化转换为float类型的时候，将遵循以下转换规则，通过向最接近数舍入模式舍入一个可以使用float类型表示的数字。最后结果根据下面这3条规则判断。</p><ul><li><p>如果转换结果的绝对值太小而无法使用float表示，将返回float类型的正负0</p></li><li><p>如果转换结果的绝对值太大而无法使用float表示，将返回float类型的正负无穷大</p><p>对于double类型的NaN值将按规定转换为float类型的NaN值</p></li></ul></div><h2 id="_5-对象的创建和访问指令" tabindex="-1">5. 对象的创建和访问指令 <a class="header-anchor" href="#_5-对象的创建和访问指令" aria-label="Permalink to “5. 对象的创建和访问指令”">​</a></h2><p>Java是面向对象的程序设计语言，虚拟机平台从字节码层面就对面向对象做了深层次的支持。有一系列指令专门用于对象操作，可进一步细分为创建指令、字段访问指令、数组操作指令、类型检查指令</p><h3 id="_1-创建指令" tabindex="-1">1. 创建指令 <a class="header-anchor" href="#_1-创建指令" aria-label="Permalink to “1. 创建指令”">​</a></h3><p>虽然类实例和数组都是对象。但是Java虚拟机对类实例和数组的创建与操作使用了不同的字节码指令</p><p><strong>类创建实例的指令</strong></p><p><span style="background-color:khaki;"><code>new</code></span></p><p>它接收一个操作数，为指向常量池的索引，表示要创建的类型，执行完成之后，将对象的引用压入栈</p><p><strong>创建数组的指令</strong></p><p><span style="background-color:khaki;"><code>newarray</code>、<code>anewarray</code>、<code>multiannewarray</code></span></p><ul><li>newarray：创建基本数据类型数组</li><li>anewarray：创建引用数据类型数组</li><li>multiannewarray：创建多维数组</li></ul><p>上述指令可以用于创建对象或者数组，由于对象和数组再Java中的广泛使用，这些指令的使用频率也非常高。</p><h3 id="_2-字段访问指令" tabindex="-1">2. 字段访问指令 <a class="header-anchor" href="#_2-字段访问指令" aria-label="Permalink to “2. 字段访问指令”">​</a></h3><p>对象创建之后，就可以通过对象访问指令获取对象实例或者数组实例中的字段或者数组元素</p><ul><li><span style="background-color:khaki;">访问类字段（static字段，或者称为类变量）的指令：<code>getstatic</code>、<code>putstatic</code></span></li><li><span style="background-color:khaki;">访问类实例字段（费static字段，或者称为实例变量）的指令：<code>getfield</code>、<code>purfield</code></span></li></ul><p><strong>举例：</strong></p><p>以getstatic指令为例，它含有一个操作数，为指向常量池的 Fielref 的索引，它的作用就是获取 Fieldref 指定的对象的值，并将其压入操作数栈</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>对应的字节码指令</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> getstatic #</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">java</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ldc #</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">9</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> invokevirtual #</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">java</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">PrintStream.println</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> return</span></span></code></pre></div><h3 id="_3-数组操作指令" tabindex="-1">3. 数组操作指令 <a class="header-anchor" href="#_3-数组操作指令" aria-label="Permalink to “3. 数组操作指令”">​</a></h3><p>数组操作指令主要有：xastore和xaload指令。具体为：</p><ul><li>把一个数组元素加载到操作数栈的指令：<code>baload</code>、<code>caload</code>、<code>saload</code>、<code>iaload</code>、<code>laload</code>、<code>faload</code>、<code>daload</code>、<code>aaload</code></li><li>将一个操作数栈的值存储在数组元素中的指令：<code>bastore</code>、<code>castore</code>、<code>sastore</code>、<code>iastore</code>、<code>lastore</code>、<code>fastore</code>、<code>dastore</code>、<code>aastore</code></li></ul><p><img src="`+x+'" alt="1605776308517"></p><ul><li>取数组长度的指令：<code>arraylength</code><ul><li>该指令弹出栈顶的数组元素，获取数组的长度，将长度压入栈</li></ul></li></ul><p><strong>说明</strong></p><p>指令xaload表示将数组的元素压栈，比如saload、caload分别表示压入short数组和char数组。指令xoload在执行的时候，要求操作数中的栈顶元素为数组索引i，栈顶顺位第2个元素为数组引用a，该指令会弹出栈顶这两个元素，并将a[i]重新压入堆栈</p><p>xastore则专门针对数组操作，以iastore为例，它用于给一个int数组的给定索引赋值。在iastore执行前，操作数栈顶需要以此准备3个元素：值、索引、数组引用，iastore会弹出这3个值，并且将值赋予给数组中指定索引位置。</p><h3 id="_4-类型检查指令" tabindex="-1">4. 类型检查指令 <a class="header-anchor" href="#_4-类型检查指令" aria-label="Permalink to “4. 类型检查指令”">​</a></h3><p>检查类实例或数组类型的指令：<code>instanceof</code>、<code>checkcast</code></p><ul><li>指令 checkcast 用于检查类型强制转换是否可以进行。如果可以进行，那么 checkcast 指令不会改变操作数栈，否则它会抛出 ClassCastException 异常</li><li>指令 instanceof 用来判断给定对象是否是某一个类的实例，它会将判断结果压入操作数栈</li></ul><h2 id="_6-方法调用与返回指令" tabindex="-1">6. 方法调用与返回指令 <a class="header-anchor" href="#_6-方法调用与返回指令" aria-label="Permalink to “6. 方法调用与返回指令”">​</a></h2><h3 id="_1-方法调用指令" tabindex="-1">1. 方法调用指令 <a class="header-anchor" href="#_1-方法调用指令" aria-label="Permalink to “1. 方法调用指令”">​</a></h3><p><strong>指令</strong>: <code>invokevirtual</code>、<code>invokeinterface</code>、<code>invokespecial</code>、<code>invokestatic</code>、<code>invokedynamic</code></p><p>以下5条指令用于方法调用</p><ul><li>invokevirtual指令用于调用对象的实例方法，根据对象的实际类型进行分派（虚方法分派），支持多态。这也是Java语言中<span style="color:red;">最常见的方法分派方式</span></li><li>invokeinterface 指令用于<span style="color:red;">调用接口方法</span>，它会在运行时候搜索由特定对象所实现的这个接口的方法，并找出适合的方法进行调用</li><li>invokespecial 指令用于调用一些需要特殊处理的实例方法，包括<span style="color:red;">实例初始化方法（构造器）、私有方法和父类方法。</span>这些方法都是<span style="background-color:khaki;"> 静态类型绑定</span>的，不会在调用的时候进行动态分发。</li><li>invokestatic指令用于调用命名中<span style="color:red;">类中的类方法（sttaic方法）</span>。这是<span style="background-color:khaki;">静态绑定</span>的。</li><li>invokedynamic：调用动态绑定的方法，这个是动态绑定的方法，是JDK1.7后新加入的指令。用于在运行的时候解析调用点限定符的方法，并执行该方法。前面4条调用指令的分派逻辑都固化在Java虚拟机内部，而invokedynamic指令的分派逻辑是由用户所设定的引导方法决定的。</li></ul><h3 id="_2-方法返回指令" tabindex="-1">2. 方法返回指令 <a class="header-anchor" href="#_2-方法返回指令" aria-label="Permalink to “2. 方法返回指令”">​</a></h3><p>方法结束调用之前，需要进行返回。方法返回指令是<span style="color:red;">根据返回值的类型区分的</span></p><p>包括 <code>ireturn</code>（当返回值是 boolean、byte、char、short和int类型的时候使用）、<code>lreturn</code>、<code>freturn</code>、<code>dreturn</code>、和<code>areturn</code></p><p>另外还有一条 <code>return</code> 指令声明为void的方法、实例初始化方法以及类和接口的类初始化方法使用</p><p><img src="'+j+'" alt="1605786815474"></p><p><strong>举例：</strong></p><p>通过 ireturn 指令，将当前函数操作数栈的顶层元素弹出，并将这个元素压入调用者函数的操作数栈中(因为调用者非常关心函数的返回值)，所有在当前函数操作数栈中的其他元素都会被丢弃</p><p>如果当前返回的是 synchronized 方法，那么还会执行一个隐含的 monitorexit 指令，退出临界区</p><p>最后，会丢弃当前方法的整个帧，恢复调用者的帧，并将控制权转交给调用者</p><h2 id="_7-操作数栈管理指令" tabindex="-1">7. 操作数栈管理指令 <a class="header-anchor" href="#_7-操作数栈管理指令" aria-label="Permalink to “7. 操作数栈管理指令”">​</a></h2><p>如同操作一个普通数据结构中的堆栈那样，JVM提供的操作数栈管理指令，可以用于直接操作操作数栈的指令</p><p>这类指令包括以下内容：</p><ul><li><p>将一个或两个元素从栈顶弹出，并且直接废弃：<code>pop</code>、<code>pop2</code></p></li><li><p>复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶：<code>dup</code>、<code>dup2</code>、<code>dup_x1</code>、<code>dup2_x1</code>、<code>dup_x2</code>、<code>dup2_x2</code></p></li><li><p>将栈最顶端的两个Solt数值的位置交换：<code>swap</code>。Java虚拟机没有提供交换2个64位数据类型（long、double）数值的指令</p></li><li><p>指令<code>nop</code>，是一个非常特殊的指令，它的字节码为0x00。和汇编语言中的nop一样，它表示什么都不做。这条指令一般可用于调试、占位等。</p></li></ul><p>这些指令属于通用型，堆栈的压入或者弹出无需指明数据类型</p><p><strong>说明</strong></p><p>不带 _x 的指令是复制栈顶数据并压入栈顶。包括两个指令，dup 和 dup2，dup 的系数代表要复制的 Slot 个数</p><ul><li><p>dup 开头的指令用于复制1个 Slot 的数据。例如1个 int 或1个 reference 类型数据</p></li><li><p>dup2 开头的指令用于复制2个 Slot 的数据。例如1个 long，或2个 int，或1个 int 加1个 float 类型数据</p></li></ul><p>带 _x 的指令是复制栈顶数据并插入栈顶以下的某个位置。共有4个指令，dup_x1、dup2_x1、dup_x2、dup2_x2。对于带 _x 的复制插入指令，只要将指令的 dup 和 x 的系数相加，结果即为需要插入的位置。因此</p><ul><li><p>dup_x1 插入位置：1+1=2，即栈顶2个 Slot 下面</p></li><li><p>dup_x2 插入位置：1+2=3，即栈顶3个 Slot 下面</p></li><li><p>dup2_x1 插入位置：2+1=3，即栈顶3个 Slot 下面</p></li><li><p>dup2_x2 插入位置：2+2=4，即栈顶4个 Slot 下面</p></li></ul><p>pop：将栈顶的1个 Slot 数值出栈。例如1个 short 类型数值</p><p>pop2：将栈顶的2个 Slot 数值出栈。例如1个 double 类型数值，或者2个 int 类型数值</p><h2 id="_8-控制转移指令" tabindex="-1">8. 控制转移指令 <a class="header-anchor" href="#_8-控制转移指令" aria-label="Permalink to “8. 控制转移指令”">​</a></h2><p>程序流程离不开条件控制，为了支持条件跳转，虚拟机提供了大量字节码指令，大体上可以分为比较指令（在之前的算术指令）、条件跳转指令、比较条件跳转指令、多条件分支跳转指令、无条件跳转指令等</p><h3 id="_1-条件跳转指令" tabindex="-1">1. 条件跳转指令 <a class="header-anchor" href="#_1-条件跳转指令" aria-label="Permalink to “1. 条件跳转指令”">​</a></h3><p>条件跳转指令通常和比较指令结合使用。在条件跳转指令执行前，一般可以先用比较指令进行栈顶元素的准备，然后进行条件跳转</p><p>条件跳转指令有：<code>ifeq</code>、<code>iflt</code>、<code>ifle</code>、<code>ifne</code>、<code>ifgt</code>、<code>ifge</code>、<code>i</code>fnull<code>、</code>ifnonnull`。这些指令都接收两个字节的操作数，用于计算跳转的位置(16位符号整数作为当前位置的 offset)</p><p>它们的统一含义为：<span style="color:red;">弹出栈顶元素，测试它是否满足某一条件，如果满足条件，则跳转到给定位置</span></p><p><strong>具体说明</strong></p><p><img src="'+J+'" alt="1605789644065"></p><div class="tip custom-block"><p class="custom-block-title">注意</p><ol><li><p>与前面运算规则一致</p><ol><li>对于 boolean、byte、char、short 类型的条件分支比较操作，都是使用 int 类型的比较指令完成。</li><li>对于 long、float、double 类型的条件分支比较操作，则会先执行相应类型的比较运算指令，运算指令会返回一个整型值到操作数栈中，随后再执行 int 类型的条件分支比较操作来完成整个分支跳转。</li></ol></li><li><p>由于各类型的比较最终都会转为 int 类型的比较操作，所以 Java 虚拟机提供的 int 类型的条件分支指令是最为丰富和强大的。</p></li></ol></div><h3 id="_2-比较条件跳转指令" tabindex="-1">2. 比较条件跳转指令 <a class="header-anchor" href="#_2-比较条件跳转指令" aria-label="Permalink to “2. 比较条件跳转指令”">​</a></h3><p>比较条件跳转指令类似于比较指令和条件跳转指令的结合体，它将比较和跳转两个步骤合二为一</p><p>这类指令有：<code>if_icmped</code>、<code>if_icmpne</code>、<code>if_icmplt</code>、<code>if_icmpgt</code>、<code>if_icmple</code>、<code>if_icmpge</code>、<code>if_acmped</code> 和<code>if_acmpne</code></p><p>其中指令助记符加上 &quot;if_&quot; 后，以字符 &quot;i&quot; 开头的指令针对 int 型整数操作(也包括 short 和 byte 类型)，以字符 &quot;a&quot; 开头的指令表示对象引用的比较</p><p><strong>具体说明</strong></p><p><img src="'+P+'" alt="1605790378482"></p><p>这些指令都接收两个字节的操作数作为参数，用于计算跳转的位置。同时在执行指令时，栈顶需要准备两个元素进行比较。指令执行完成后，栈顶的这两个元素被清空，且没有任何数据入栈。<span style="color:red;">如果预设条件成立，则执行跳转，否则，继续执行下一条语句</span></p><h3 id="_3-多条件分支跳转" tabindex="-1">3. 多条件分支跳转 <a class="header-anchor" href="#_3-多条件分支跳转" aria-label="Permalink to “3. 多条件分支跳转”">​</a></h3><p>多条件分支跳转指令是专为 switch-case 语句设计的，主要有 <code>tableswitch</code> 和 <code>lookupswitch</code>。</p><p><img src="'+S+'" alt="1605790759364"></p><p>从助记符上看，两者都是 switch 语句的实现，它们的区别：</p><ul><li>tableswitch 要求<span style="color:red;">多个条件分支值是连续的</span>，它内部只存放起始值和终止值，以及若干个跳转偏移量，通过给定的操作数 index，可以立即定位到跳转偏移量位置，<span style="color:red;">因此效率比较高</span></li><li>lookupswitch 内部<span style="color:red;">存放着各个离散的 case-offset 对</span>，每次执行都要搜索全部的 case-offset 对，找到匹配的 case 值，并根据对应的 offset 计算跳转地址，<span style="color:red;">因此效率较低</span></li></ul><p>指令 tableswitch 的示意图如下图所示。由于 tableswitch 的 case 值是连续的，因此只需要记录最低值和最高值，以及每一项对应的 offset 偏移量，根据给定的 index 值通过简单的计算即可直接定位到 offset</p><p><img src="'+N+'" alt="1605791140909"></p><p>指令 lookupswitch 处理的是离散的 case 值，但是出于效率考虑，<span style="color:red;">将 case-offset 对按照 case 值大小排序</span>，给定 index 时，需要查找与 index 相等的 case，获得其 offset，如果找不到则跳转到 default。指令 lookupswitch 如下图所示</p><p><img src="'+w+'" alt="1605791172863"></p><h3 id="_4-无条件跳转" tabindex="-1">4. 无条件跳转 <a class="header-anchor" href="#_4-无条件跳转" aria-label="Permalink to “4. 无条件跳转”">​</a></h3><p>目前主要的无条件跳转指令为 goto，指令 goto 接收两个字节的操作数，共同组成一个带符号的整数，<span style="color:red;">用于指定指令的偏移量，指令执行的目的就是跳转到偏移量给定的位置处</span>。</p><p>如果指令偏移量太大，超过双字节的带符号整数的范围，则可以使用指令 goto_w，它和 goto 有相同的作用，但是它接收4个字节的操作数，可以表示更大的地址范围</p><p>指令 jsr、jsr_w、ret 虽然也是无条件跳转的，但主要用于 try-finally 语句，且已经被虚拟机逐渐废弃，故不在这里介绍这两个指令</p><p><img src="'+q+`" alt="1605791886429"></p><h2 id="_9-异常处理指令" tabindex="-1">9. 异常处理指令 <a class="header-anchor" href="#_9-异常处理指令" aria-label="Permalink to “9. 异常处理指令”">​</a></h2><h3 id="_1-抛出异常指令" tabindex="-1">1. 抛出异常指令 <a class="header-anchor" href="#_1-抛出异常指令" aria-label="Permalink to “1. 抛出异常指令”">​</a></h3><p><strong>athrow 指令</strong></p><p>在 Java 程序中显式抛出异常的操作(throw 语句)都是由 athrow 指令来实现的</p><p>除了使用 throw 语句显式抛出异常情况之外，<span style="color:red;">JVM 规范还规定了许多运行时一场会在其它 Java 虚拟机指令检测到异常状况时自动抛出。</span>例如，在之前介绍的整数运算时，当除数为零时，虚拟机会在 idiv 或 ldiv 指令中抛出 ArithmeticException 异常</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>正常情况下，操作数栈的压入弹出都是一条条指令完成的。唯一的例外情况是<span style="color:red;">在抛异常时，Java 虚拟机会清除操作数栈上的所有内容，而后将异常实例压入调用者操作数栈上</span>。</p></div><p><strong>异常及异常的处理：</strong></p><ul><li>过程一：异常对象的生成过程 ---&gt; throw(手动/自动) ---&gt; <span style="background-color:khaki;">指令：athrow</span></li><li>过程二：异常的处理：抓抛模型 try-catch-finally ---&gt; <span style="background-color:khaki;">使用异常表</span></li></ul><h3 id="_2-异常处理与异常表" tabindex="-1">2. 异常处理与异常表 <a class="header-anchor" href="#_2-异常处理与异常表" aria-label="Permalink to “2. 异常处理与异常表”">​</a></h3><p><strong>处理异常</strong></p><p>在Java虚拟机中 ，<span style="color:red;">处理异常</span>(catch 语句)不是由字节码指令来实现的(早期使用 jsr、ret 指令)，而是<span style="color:red;">采用异常表来完成的</span>。</p><p><strong>异常表</strong></p><p>如果一个方法定义了一个 try-catch 或者 try-finally 的异常处理，就会创建一个异常表。它包含了每个异常处理或者 finally 块的信息。异常表保存了每个异常处理信息。比如：</p><ul><li>起始位置</li><li>结束位置</li><li>程序计数器记录的代码处理的偏移地址</li><li>被捕获的异常类在常量池中的索引</li></ul><p><span style="color:red;">当一个异常被抛出时，JVM 会在当前的方法里寻找一个匹配的处理，如果没有找到，这个方法会强制结束并弹出当前栈帧</span>，并且异常会重新抛给上层调用的方法(在调用方法栈帧)。如果在所有栈帧弹出前仍然没有找到合适的异常处理，这个县城将终止。如果这个异常在最后一个非守护线程里抛出，将会导致 JVM 自己终止，比如这个线程是个 main 线程</p><p><span style="color:red;">不管什么时候抛出异常，如果异常处理最终匹配了所有异常类型，代码就会继续执行。</span>在这种情况下， 如果方法结束后没有抛出异常，仍然执行 finally 块，在 return 前，它直接跳到 finally 块来完成目标</p><h2 id="_10-同步控制指令" tabindex="-1">10. 同步控制指令 <a class="header-anchor" href="#_10-同步控制指令" aria-label="Permalink to “10. 同步控制指令”">​</a></h2><p>Java 虚拟机支持两种同步结构：<span style="color:red;">方法级同步</span> 和<span style="color:red;">方法内部一段指令序列的同步</span>，这两种同步都是使用 monitor 来支持的。</p><h3 id="_1-方法级的同步" tabindex="-1">1. 方法级的同步 <a class="header-anchor" href="#_1-方法级的同步" aria-label="Permalink to “1. 方法级的同步”">​</a></h3><p>方法级的同步：<span style="background-color:khaki;">是隐式的</span>，即无需通过字节码指令来控制，它实现在方法调用和返回操作之中。虚拟机可以从方法常量池的方法表结构中的 ACC_SYNCHRONIZED 访问标志得知一个方法是否声明为同步方法。</p><p>当调用方法时，调用指令将会检查方法的 ACC_SYNCHRONIZED 访问标志是否设置。</p><ul><li>如果设置了，执行线程将先持有同步锁，然后执行方法，<span style="color:red;">最后</span>在方法完成(无论是正常完成还是非正常完成)时<span style="color:red;">释放同步锁</span>。</li><li>在方法执行期间，执行线程持有了同步锁，其它任何线程都无法再获得同一个锁。</li><li>如果一个同步方法执行期间抛出了异常，并且在方法内部无法处理此异常，那么这个同步方法所持有的锁将在异常抛到同步方法之外时自动释放。</li></ul><p><strong>举例：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> synchronized</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>对应字节码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> aload_0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dup</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> getdield #</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">atguigu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">java1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">SynchronizedTest.i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> iconst_1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> iadd</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> putfield #</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">atguigu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">java1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">SynchronizedTest.i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> return</span></span></code></pre></div><p><strong>说明：</strong></p><p>这段代码和普通的无同步操作的代码没有什么不同，没有使用 monitorenter 和 monitorexit 进行同步区控制。这是因为，对于同步方法而言，当虚拟机通过方法的访问标识符判断是一个同步方法时，会自动在方法调用前进行加锁，当同步方法执行完毕后，不管方法是正常结束还是有异常抛出，均会由虚拟机释放这个锁。因此，对于同步方法而言，monitorenter 和 monitorexit 指令是隐式存在的，并未直接出现在字节码中</p><h3 id="_2-方法内指定指令序列的同步" tabindex="-1">2. 方法内指定指令序列的同步 <a class="header-anchor" href="#_2-方法内指定指令序列的同步" aria-label="Permalink to “2. 方法内指定指令序列的同步”">​</a></h3><p>同步一段指令集序列：通常是由 Java 中的 synchronized 语句块来表示的。JVM 的指令集有 monitorenter 和 monitorexit 两条指令来支持 synchronized 关键字的语义</p><p>当一个线程进入同步代码块时，它使用 monitorenter 指令请求进入。如果当前对象的监视器计数器为0，则它会被准许进入，若为1，则判断持有当前监视器的线程是否为自己，如果是，则进入，否则进行等待，知道对象的监视器计数器为0，才会被允许进入同步块</p><p>当线程退出同步块时，需要使用 monitorexit 声明退出。在 Java 虚拟机中，任何对象都有一个监视器与之相关联，用来判断对象是否被锁定，当监视器被持有后，对象处于锁定状态</p><p>指令 monitorenter 和 monitorexit 在执行时，都需要在操作数栈顶压入对象，之后 monitorenter 和 monitorexit 的锁定和释放都是针对这个对象的监视器进行的</p><p>编译器必须确保无论方法通过何种方式完成，方法中调用过的每条 monitorenter 指令都必须执行其对应的 monitorexit 指令，而无论这个方法是正常结束还是异常结束</p><p>为了保证在方法异常完成时 monitorenter 和 monitorexit 指令依然可以正确配对执行，<span style="color:red;">编译器会自动产生一个异常处理器，这个异常处理器声明可处理所有的异常</span>，它的目的就是用来执行 monitorexit 指令</p>`,256);function O(s,I,L,H,z,Z){const p=h,t=k("ClientOnly");return n(),d("div",null,[V,r(t,null,{default:c(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),g(p,{key:0,article:s.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),M])}const K=e(T,[["render",O]]);export{Y as __pageData,K as default};
