import{_ as s,c as i,o as a,aj as t}from"./chunks/framework._AF764y6.js";const n="/assets/eZ9rMx.Zc5lf1X-.png",l="/assets/G03VSt.ZYXad-Dj.png",e="/assets/GfE6fL.CnaBoQEm.png",h="/assets/pHHEWJ.DGJZ-M90.png",p="/assets/tNznAg.ZH5rII2M.png",k="/assets/q97s9A.CLTKAUTk.png",r="/assets/QcgQfR.3W9S4Zks.png",d="/assets/QEvF9Q.CZ4l26Xo.png",g="/assets/nHRJZE.DRZUEipI.png",A="/assets/TpJMZs.324tJe7Y.png",y="/assets/GYZu4M.Dpl8qrNR.png",c="/assets/pVVSH5.Y4QJRg00.png",D="/assets/4snvYU.WYphqyOz.png",o="/assets/ZFv0a2.C-RTA8SH.png",C="/assets/EZo7Ii.CoB3SAK-.png",B="/assets/or9Tma.DB7MNie8.png",F="/assets/Iz67rA.DQdFi2V_.png",u="/assets/Hbvlq7.Bv1O2bIw.png",E="/assets/VqorvB.C2Xph3eP.png",m="/assets/kPXjlU.DOnpM8jp.png",b="/assets/Nqiqpc._BU9L6N0.png",x="/assets/HqL1Hs.B3ECATNI.png",q="/assets/GzGRIh.BPlp4nAy.png",f="/assets/HJ3x0A.BuSvBEZ9.png",_="/assets/jYxSrW.dnH4xiLd.png",S="/assets/CX42sM.CvG_PHTr.png",v="/assets/S2rtP6.B1eBKPTe.png",R="/assets/msQLn5.CeHiQsTn.png",T="/assets/leQO1c.DKtpKGAe.png",w="/assets/Ku1NnZ.DHvCqloh.png",I="/assets/xuVtIK.BGodurHz.png",P="/assets/H9eo6Y.BHpTLFVP.png",O="/assets/KT3nTj.MJ3EvCO5.png",L="/assets/X6mMNv.B0IIiveX.png",U="/assets/Z3jPMh.BuakP2Aj.png",N="/assets/NpEzCL.C1I8Zwg1.png",H="/assets/TkiGpE.B_IIS5Ex.png",$=JSON.parse('{"title":"ElasticSearch","description":"","frontmatter":{"title":"ElasticSearch","date":"2023-10-30T10:23:48.000Z","permalink":"/pages/743b58/","categories":["后端","中间件"],"tags":[null],"author":"Manaphy"},"headers":[],"relativePath":"java/中间件/02.ElasticSearch.md","filePath":"java/中间件/02.ElasticSearch.md","lastUpdated":1743259619000}'),K={name:"java/中间件/02.ElasticSearch.md"},M=t('<h2 id="elasticsearch概述" tabindex="-1">ElasticSearch概述 <a class="header-anchor" href="#elasticsearch概述" aria-label="Permalink to “ElasticSearch概述”">​</a></h2><blockquote><p>Elaticsearch，简称为es， es是一个开源的高扩展的分布式全文检索引擎，它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理PB级别（大数据时代）的数据。es也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p></blockquote><h3 id="elasticsearch的使用场景" tabindex="-1">ElasticSearch的使用场景 <a class="header-anchor" href="#elasticsearch的使用场景" aria-label="Permalink to “ElasticSearch的使用场景”">​</a></h3><ul><li>维基百科，类似百度百科，全文检索，高亮，搜索推荐/2 （权重，百度！）</li><li>The Guardian（国外新闻网站），类似搜狐新闻，用户行为日志（点击，浏览，收藏，评论）+社交网络数据（对某某新闻的相关看法），数据分析，给到每篇新闻文章的作者，让他知道他的文章的公众反馈（好，坏，热门，垃圾，鄙视，崇拜）</li><li>Stack Overflow（国外的程序异常讨论论坛），IT问题，程序的报错，提交上去，有人会跟你讨论和回答，全文检索，搜索相关问题和答案，程序报错了，就会将报错信息粘贴到里面去，搜索有没有对应的答案</li><li>GitHub（开源代码管理），搜索上千亿行代码</li><li>电商网站，检索商品</li><li>日志数据分析，logstash采集日志，ES进行复杂的数据分析，ELK技术，elasticsearch+logstash+kibana</li><li>商品价格监控网站，用户设定某商品的价格阈值，当低于该阈值的时候，发送通知消息给用户，比如说订阅牙膏的监控，如果高露洁牙膏的家庭套装低于50块钱，就通知我，我就去买。</li><li>BI系统，商业智能，Business Intelligence。比如说有个大型商场集团，BI，分析一下某某区域最近3年的用户消费金额的趋势以及用户群体的组成构成，产出相关的数张报表，**区，最近3年，每年消费金额呈现100%的增长，而且用户群体85%是高级白领，开一个新商场。ES执行数据分析和挖掘，Kibana进行数据可视化</li><li>国内：站内搜索（电商，招聘，门户，等等），IT系统搜索（OA，CRM，ERP，等等），数据分析（ES热门的一个使用场景）</li></ul><h3 id="es和solr的差别" tabindex="-1">ES和solr的差别 <a class="header-anchor" href="#es和solr的差别" aria-label="Permalink to “ES和solr的差别”">​</a></h3><ul><li>es基本是开箱即用（解压就可以用 ! ）非常简单。Solr安装略微复杂一点点！</li><li>Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能。</li><li>Solr 支持更多格式的数据，比如JSON、XML、CSV，而 Elasticsearch 仅支持json文件格式。</li><li>Solr 官方提供的功能更多，而 Elasticsearch  本身更注重于核心功能，高级功能多有第三方插件提供，例如图形化界面需要kibana友好支撑~!</li><li>Solr 查询快，但更新索引时慢（即插入删除慢），用于电商等查询多的应用；</li><li>ES建立索引快（即查询慢），<strong>即实时性查询快</strong>，用于facebook新浪等搜索。</li><li>Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用。</li><li>Solr比较成熟，有一个更大，更成熟的用户、开发和贡献者社区，而  Elasticsearch相对开发维护者较少，更新太快，学习使用成本较高。（趋势！）</li></ul><h2 id="elasticsearch安装" tabindex="-1">ElasticSearch安装 <a class="header-anchor" href="#elasticsearch安装" aria-label="Permalink to “ElasticSearch安装”">​</a></h2><p>官网下载慢，可以从华为云的镜像去下载<br>ElasticSearch: <a href="https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D" target="_blank" rel="noreferrer">https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D</a><br>logstash: <a href="https://mirrors.huaweicloud.com/logstash/?C=N&amp;O=D" target="_blank" rel="noreferrer">https://mirrors.huaweicloud.com/logstash/?C=N&amp;O=D</a><br>kibana: <a href="https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D" target="_blank" rel="noreferrer">https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D</a></p><h3 id="elasticsearch的安装" tabindex="-1">ElasticSearch的安装 <a class="header-anchor" href="#elasticsearch的安装" aria-label="Permalink to “ElasticSearch的安装”">​</a></h3><p>启动<code>bin</code>目录下的<code>elasticsearch.bat</code>,浏览器访问<code>localhost:9200</code> 效果如下</p><img src="'+n+`" alt="image.png"><h3 id="可视化界面-es-head的插件的安装" tabindex="-1">可视化界面 es head的插件的安装 <a class="header-anchor" href="#可视化界面-es-head的插件的安装" aria-label="Permalink to “可视化界面 es head的插件的安装”">​</a></h3><ol><li>首先配置es可跨域</li></ol><p>在<code>config</code>目录中的<code>elasticsearch.yml</code>文件中配置</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">http.cors.enabled:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">http.cors.allow-origin:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;*&quot;</span></span></code></pre></div><ol start="2"><li>使用git拉取<a href="https://github.com/mobz/elasticsearch-head/" target="_blank" rel="noreferrer">https://github.com/mobz/elasticsearch-head/</a></li><li>启动</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> start</span></span></code></pre></div><ol start="4"><li>访问<a href="http://localhost:9100" target="_blank" rel="noreferrer">http://localhost:9100</a></li></ol><p>也可直接安装chrome插件,免去以上拉取启动步骤</p><img src="`+l+'" alt="image.png"><h3 id="了解-elk" tabindex="-1">了解 ELK <a class="header-anchor" href="#了解-elk" aria-label="Permalink to “了解 ELK”">​</a></h3><p>ELK是Elasticsearch、Logstash、Kibana三大开源框架首字母大写简称。市面上也被成为Elastic Stack。其中Elasticsearch是一个基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框架。像类似百度、谷歌这种大数据全文搜索引擎的场景都可以使用Elasticsearch作为底层支持框架，可见Elasticsearch提供的搜索能力确实强大,市面上很多时候我们简称Elasticsearch为es。Logstash是ELK的中央数据流引擎，用于从不同目标（文件/数据存储/MQ）收集的不同格式数据，经过过滤后支持输出   到不同目的地（文件/MQ/redis/elasticsearch/kafka等）。Kibana可以将elasticsearch的数据通过友好的页面展示出来，提供实时分析的功能。<br>市面上很多开发只要提到ELK能够一致说出它是一个日志分析架构技术栈总称，但实际上ELK不仅仅适用于日志分析，它还可以支持其它任何数据分析和收集的场景，日志分析和收集只是更具有代表性。并非唯一性。</p><img src="'+e+'" alt="image.png"><h3 id="安装kibana" tabindex="-1">安装Kibana <a class="header-anchor" href="#安装kibana" aria-label="Permalink to “安装Kibana”">​</a></h3><blockquote><p>Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。Kibana让海量数据更容易理解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示Elasticsearch查询动态。设置Kibana非常简单。无需编码或者额外的基础架构，几分钟内就可以完成Kibana安装并启动Elasticsearch索引监测。</p></blockquote><p><strong>Kibana 版本要和 es 一致！</strong></p><p><strong>汉化设置</strong>: 修改<code>config</code>目录下的<code>kibana.yml</code>文件,在文件末尾添加<code>i18n.locale: &quot;zh-CN&quot;</code></p><p><strong>启动</strong>: 打开<code>bin</code>目录下的<code>kibana.bat</code>访问 <a href="http://localhost:5601" target="_blank" rel="noreferrer">http://localhost:5601</a></p><img src="'+h+`" alt="image.png"><h2 id="es核心概念" tabindex="-1">ES核心概念 <a class="header-anchor" href="#es核心概念" aria-label="Permalink to “ES核心概念”">​</a></h2><blockquote><p>elasticsearch是面向文档，关系行数据库 和 elasticsearch 客观的对比！一切都是JSON！</p></blockquote><table tabindex="0"><thead><tr><th style="text-align:left;">Relational DB</th><th style="text-align:left;">Elasticsearch</th></tr></thead><tbody><tr><td style="text-align:left;">数据库(database)</td><td style="text-align:left;">索引(indices)</td></tr><tr><td style="text-align:left;">表(tables)</td><td style="text-align:left;">types</td></tr><tr><td style="text-align:left;">行(rows)</td><td style="text-align:left;">documents</td></tr><tr><td style="text-align:left;">字段(columns)</td><td style="text-align:left;">ﬁelds</td></tr></tbody></table><p>elasticsearch(集群)中可以包含多个索引(数据库)，每个索引中可以包含多个类型(表)，每个类型下又包含多个文档(行)，每个文档中又包含多个字段(列)。</p><p><strong>物理设计：</strong></p><p>elasticsearch  在后台把每个索引划分成多个分片，每分分片可以在集群中的不同服务器间迁移一个人就是一个集群！默认的集群名称就是 elaticsearh</p><p><strong>逻辑设计：</strong></p><p>一个索引类型中，包含多个文档，比如说文档1，文档2。  当我们索引一篇文档时，可以通过这样的一各顺序找到 它: 索引==&gt; 类型  ==&gt; 文档ID ，通过这个组合我们就能索引到某个具体的文档。 注意:ID不必是整数，实际上它是个字符串。</p><h3 id="文档" tabindex="-1">文档 <a class="header-anchor" href="#文档" aria-label="Permalink to “文档”">​</a></h3><p>就是我们的一条条数据</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">user</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  zhangsan 18</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  lisi 19</span></span></code></pre></div><p>之前说elasticsearch是面向文档的，那么就意味着索引和搜索数据的最小单位是文档，elasticsearch 中，文档有几个重要属性 :</p><ul><li>自我包含: 一篇文档同时包含字段和对应的值，也就是同时包含 key:value</li><li>可以是层次型的，一个文档中包含自文档，复杂的逻辑实体就是这么来的！ (就是一个json对象！fastjson进行自动转换！)</li><li>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用，在elasticsearch中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个新的字段。</li></ul><p>尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类型，可以是字符串也可以是整形。因为elasticsearch会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在elasticsearch中，类型有时候也称为映射类型。</p><h3 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to “类型”">​</a></h3><p>类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。 类型中对于字段的定义称为映射， 比如 name 映射为字符串类型。 我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段， 比如新增一个字段，elasticsearch会自动的将新字段加入映射，但是这个字段的不确定它是什么类型，elasticsearch就开始猜，如果这个值是18，那么elasticsearch会认为它是整形。 但是elasticsearch也可能猜不对， 所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用。</p><h3 id="索引" tabindex="-1">索引 <a class="header-anchor" href="#索引" aria-label="Permalink to “索引”">​</a></h3><p><strong>就是数据库！</strong></p><p>索引是映射类型的容器，elasticsearch中的索引是一个非常大的文档集合。索引存储了映射类型的字段和其他设置。 然后它们被存储到了各个分片上了。<br><strong>物理设计 ：节点和分片 如何工作</strong></p><img src="`+p+'" alt="image.png"><p>一个集群至少有一个节点，而一个节点就是一个elasricsearch进程，节点可以有多个索引默认的，如果你创建索引，那么索引将会有个5个分片 ( primary shard ,又称主分片 ) 构成的，每一个主分片会有一个副本 ( replica shard ,又称复制分片 )</p><img src="'+k+`" alt="image.png"><p>上图是一个有3个节点的集群，可以看到主分片和对应的复制分片都不会在同一个节点内，这样有利于某个节点挂掉了，数据也不至于丢失。 实际上，一个分片是一个Lucene索引，一个包含<strong>倒排索引</strong>的文件目录，倒排索引的结构使得elasticsearch在不扫描全部文档的情况下，就能告诉你哪些文档包含特定的关键字。</p><h3 id="倒排索引" tabindex="-1">倒排索引 <a class="header-anchor" href="#倒排索引" aria-label="Permalink to “倒排索引”">​</a></h3><p>elasticsearch使用的是一种称为倒排索引的结构，采用Lucene倒排索作为底层。这种结构适用于快速的全文搜索， 一个索引由文档中所有不重复的列表构成，对于每一个词，都有一个包含它的文档列表。 例如，现在有两个文档， 每个文档包含如下内容：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>Study every day, good good up to forever	# 文档1包含的内容</span></span>
<span class="line"><span>To forever, study every day, good good up   # 文档2包含的内容</span></span></code></pre></div><p>为了创建倒排索引，我们首先要将每个文档拆分成独立的词(或称为词条或者tokens)，然后创建一个包含所有不重 复的词条的排序列表，然后列出每个词条出现在哪个文档 :</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>term</strong></th><th style="text-align:left;"><strong>doc_1</strong></th><th style="text-align:left;"><strong>doc_2</strong></th></tr></thead><tbody><tr><td style="text-align:left;">Study</td><td style="text-align:left;">√</td><td style="text-align:left;">×</td></tr><tr><td style="text-align:left;">To</td><td style="text-align:left;">x</td><td style="text-align:left;">×</td></tr><tr><td style="text-align:left;">every</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td></tr><tr><td style="text-align:left;">forever</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td></tr><tr><td style="text-align:left;">day</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td></tr><tr><td style="text-align:left;">study</td><td style="text-align:left;">×</td><td style="text-align:left;">√</td></tr><tr><td style="text-align:left;">good</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td></tr><tr><td style="text-align:left;">every</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td></tr><tr><td style="text-align:left;">to</td><td style="text-align:left;">√</td><td style="text-align:left;">×</td></tr><tr><td style="text-align:left;">up</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td></tr></tbody></table><p>现在，我们试图搜索 to forever，只需要查看包含每个词条的文档 score</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>term</strong></th><th style="text-align:left;"><strong>doc_1</strong></th><th style="text-align:left;"><strong>doc_2</strong></th></tr></thead><tbody><tr><td style="text-align:left;">to</td><td style="text-align:left;">√</td><td style="text-align:left;">×</td></tr><tr><td style="text-align:left;">forever</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td></tr><tr><td style="text-align:left;">total</td><td style="text-align:left;">2</td><td style="text-align:left;">1</td></tr></tbody></table><p>两个文档都匹配，但是第一个文档比第二个匹配程度更高。如果没有别的条件，现在，这两个包含关键字的文档都将返回。</p><p>再来看一个示例，比如我们通过博客标签来搜索博客文章。那么倒排索引列表就是这样的一个结构 :</p><img src="`+r+'" alt="image.png"><p>如果要搜索含有 python 标签的文章，那相对于查找所有原始数据而言，查找倒排索引后的数据将会快的多。只需要查看标签这一栏，然后获取相关的文章ID即可。完全过滤掉无关的所有数据，提高效率！</p><h3 id="ik分词器插件" tabindex="-1">IK分词器插件 <a class="header-anchor" href="#ik分词器插件" aria-label="Permalink to “IK分词器插件”">​</a></h3><ol><li>下载 github地址:<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noreferrer">https://github.com/medcl/elasticsearch-analysis-ik/releases</a><br></li><li>下载完毕之后，解压到我们的elasticsearch 插件目录即可</li><li>重启es</li></ol><img src="'+d+'" alt="image.png"><ol start="4"><li>通过<code>elasticsearch-plugin list</code>这个命令来查看加载进来的插件</li></ol><img src="'+g+'" alt="image.png"><ol start="5"><li>使用kibana测试</li></ol><blockquote><p>查看不同的分词效果</p></blockquote><p><strong>ik_smart</strong>为最少切分</p><img src="'+A+'" alt="image.png"><p><strong>ik_max_word</strong>为最细粒度划分！穷尽词库的可能字典！</p><img src="'+y+'" alt="image.png"><h3 id="添加自己需要的词到分词器的字典中" tabindex="-1">添加自己需要的词到分词器的字典中 <a class="header-anchor" href="#添加自己需要的词到分词器的字典中" aria-label="Permalink to “添加自己需要的词到分词器的字典中”">​</a></h3><p>问题如下: 时拉比被拆分了</p><img src="'+c+'" alt="image.png"><p>在分词器<code>config</code>文件夹下创建<code>my.dic</code>文件 文件里添加我们需要的词 在<code>IKAnalyzer.cfg.xml</code>中配置</p><img src="'+D+'" alt="image.png"><p>重启es</p><img src="'+o+`" alt="image.png"><h2 id="rest风格说明" tabindex="-1">Rest风格说明 <a class="header-anchor" href="#rest风格说明" aria-label="Permalink to “Rest风格说明”">​</a></h2><blockquote><p>一种软件架构风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p></blockquote><p><strong>基本Rest命令说明：</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;">method</th><th style="text-align:left;">URL地址</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">PUT</td><td style="text-align:left;">localhost:9200/索引名称/类型名称/文档id</td><td style="text-align:left;">创建文档（指定文档id）</td></tr><tr><td style="text-align:left;">POST</td><td style="text-align:left;">localhost:9200/索引名称/类型名称</td><td style="text-align:left;">创建文档（随机文档id）</td></tr><tr><td style="text-align:left;">POST</td><td style="text-align:left;">localhost:9200/索引名称/类型名称/文档id/_update</td><td style="text-align:left;">修改文档</td></tr><tr><td style="text-align:left;">DELETE</td><td style="text-align:left;">localhost:9200/索引名称/类型名称/文档id</td><td style="text-align:left;">删除文档</td></tr><tr><td style="text-align:left;">GET</td><td style="text-align:left;">localhost:9200/索引名称/类型名称/文档id</td><td style="text-align:left;">查询文档通过文档id</td></tr><tr><td style="text-align:left;">POST</td><td style="text-align:left;">localhost:9200/索引名称/类型名称/_search</td><td style="text-align:left;">查询所有数据</td></tr></tbody></table><h3 id="关于索引的基本操作" tabindex="-1">关于索引的基本操作 <a class="header-anchor" href="#关于索引的基本操作" aria-label="Permalink to “关于索引的基本操作”">​</a></h3><h4 id="创建一个索引" tabindex="-1">创建一个索引 <a class="header-anchor" href="#创建一个索引" aria-label="Permalink to “创建一个索引”">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>PUT	/索引名/~类型名~/文档id</span></span>
<span class="line"><span>{请求体}</span></span></code></pre></div><p><img src="`+C+'" alt="image.png"></p><p>在 es head 中查看</p><img src="'+B+'" alt="image.png"><h4 id="字段的类型" tabindex="-1">字段的类型 <a class="header-anchor" href="#字段的类型" aria-label="Permalink to “字段的类型”">​</a></h4><ul><li>字符串类型<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/text.html" target="_blank" rel="noreferrer">text </a>、 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/keyword.html" target="_blank" rel="noreferrer">keyword</a></li><li>数值类型<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/number.html" target="_blank" rel="noreferrer">long, integer, short, byte, double, ﬂoat, half_ﬂoat, scaled_ﬂoat</a></li><li>日期类型<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/date.html" target="_blank" rel="noreferrer">date</a></li><li>te布尔值类型<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/boolean.html" target="_blank" rel="noreferrer">boolean</a></li><li>二进制类型<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/binary.html" target="_blank" rel="noreferrer">binary</a></li></ul><h4 id="指定字段的类型" tabindex="-1">指定字段的类型 <a class="header-anchor" href="#指定字段的类型" aria-label="Permalink to “指定字段的类型”">​</a></h4><p>创建规则完后 可以通过 <code>GET</code> 请求获取具体的信息</p><img src="'+F+'" alt="image.png"><h4 id="查看默认的信息" tabindex="-1">查看默认的信息 <a class="header-anchor" href="#查看默认的信息" aria-label="Permalink to “查看默认的信息”">​</a></h4><img src="'+u+'" alt="image.png"><p>如果自己的文档字段没有指定，那么es 就会给我们默认配置字段类型！</p><p><strong>扩展</strong>：  通过GET _cat/ 可以获得es的当前的很多信息！</p><img src="'+E+'" alt="image.png"><h4 id="修改索引内容" tabindex="-1">修改索引内容 <a class="header-anchor" href="#修改索引内容" aria-label="Permalink to “修改索引内容”">​</a></h4><p>以前的方法: 还是使用<code>PUT</code>命令</p><img src="'+m+'" alt="image.png"><p>现在推荐使用以下方法 <code>POST</code></p><img src="'+b+'" alt="image.png"><h4 id="删除索引" tabindex="-1">删除索引 <a class="header-anchor" href="#删除索引" aria-label="Permalink to “删除索引”">​</a></h4><p>通过DELETE 命令实现删除、 根据你的请求来判断是删除索引还是删除文档记录！</p><img src="'+x+'" alt="image.png"><h3 id="关于文档的基本操作" tabindex="-1">关于文档的基本操作 <a class="header-anchor" href="#关于文档的基本操作" aria-label="Permalink to “关于文档的基本操作”">​</a></h3><h4 id="添加数据" tabindex="-1">添加数据 <a class="header-anchor" href="#添加数据" aria-label="Permalink to “添加数据”">​</a></h4><img src="'+q+'" alt="image.png"><h4 id="获取数据" tabindex="-1">获取数据 <a class="header-anchor" href="#获取数据" aria-label="Permalink to “获取数据”">​</a></h4><img src="'+f+'" alt="image.png"><h4 id="修改数据" tabindex="-1">修改数据 <a class="header-anchor" href="#修改数据" aria-label="Permalink to “修改数据”">​</a></h4><img src="'+_+'" alt="image.png"><h4 id="简单搜索" tabindex="-1">简单搜索 <a class="header-anchor" href="#简单搜索" aria-label="Permalink to “简单搜索”">​</a></h4><img src="'+S+'" alt="image.png"><h4 id="复杂操作搜索" tabindex="-1">复杂操作搜索 <a class="header-anchor" href="#复杂操作搜索" aria-label="Permalink to “复杂操作搜索”">​</a></h4><img src="'+v+'" alt="image.png"><h5 id="过滤结果" tabindex="-1">过滤结果 <a class="header-anchor" href="#过滤结果" aria-label="Permalink to “过滤结果”">​</a></h5><img src="'+R+'" alt="image.png"><h5 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to “排序”">​</a></h5><img src="'+T+'" alt="image.png"><h5 id="分页" tabindex="-1">分页 <a class="header-anchor" href="#分页" aria-label="Permalink to “分页”">​</a></h5><img src="'+w+'" alt="image.png"><p>与数据库的分页查询类似</p><h5 id="布尔值查询" tabindex="-1">布尔值查询 <a class="header-anchor" href="#布尔值查询" aria-label="Permalink to “布尔值查询”">​</a></h5><p><strong>must (and)</strong>，类似 where id = 1 and name = xxx</p><img src="'+I+'" alt="image.png"><p><strong>should (or)</strong>, 类似 where id = 1 or name = xxx</p><img src="'+P+'" alt="image.png"><p><strong>must_not (not)</strong></p><img src="'+O+'" alt="image.png"><h5 id="过滤器-filter" tabindex="-1">过滤器 ﬁlter <a class="header-anchor" href="#过滤器-filter" aria-label="Permalink to “过滤器 ﬁlter”">​</a></h5><img src="'+L+'" alt="image.png"><h5 id="匹配多个条件" tabindex="-1">匹配多个条件 <a class="header-anchor" href="#匹配多个条件" aria-label="Permalink to “匹配多个条件”">​</a></h5><img src="'+U+'" alt="image.png"><p>多个条件使用空格隔开 只要满足其中一个结果就可以被查出</p><h5 id="高亮查询" tabindex="-1">高亮查询 <a class="header-anchor" href="#高亮查询" aria-label="Permalink to “高亮查询”">​</a></h5><img src="'+N+'" alt="image.png"><img src="'+H+`" alt="image.png"><h2 id="spring-boot-集成-elasticsearch" tabindex="-1">Spring boot 集成 ElasticSearch <a class="header-anchor" href="#spring-boot-集成-elasticsearch" aria-label="Permalink to “Spring boot 集成 ElasticSearch”">​</a></h2><h3 id="引入依赖" tabindex="-1">引入依赖 <a class="header-anchor" href="#引入依赖" aria-label="Permalink to “引入依赖”">​</a></h3><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    &lt;!--自定义 es 版本依赖 保证和本地一致--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">elasticsearch.version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;7.8.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">elasticsearch.version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;spring-boot-starter-data-elasticsearch&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;com.alibaba&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;fastjson&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;\${fastjson.version}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><h3 id="配置elasticsearch" tabindex="-1">配置ElasticSearch <a class="header-anchor" href="#配置elasticsearch" aria-label="Permalink to “配置ElasticSearch”">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ElasticSearchClientConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> RestHighLevelClient </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">restHighLevelClient</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> RestHighLevelClient</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                RestClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> HttpHost</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;localhost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">9200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="测试索引的创建和删除" tabindex="-1">测试索引的创建和删除 <a class="header-anchor" href="#测试索引的创建和删除" aria-label="Permalink to “测试索引的创建和删除”">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Resource</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> RestHighLevelClient</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> client;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 创建索引的测试</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createIndexTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //1.创建索引请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    CreateIndexRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> CreateIndexRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen_index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //2.客户端执行请求 IndicesClient,请求后获得响应</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    CreateIndexResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> createIndexResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">indices</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(request, RequestOptions.DEFAULT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(createIndexResponse);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 索引存在测试,判断索引是否存在</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> existIndexTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    GetIndexRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> GetIndexRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen_index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> exists</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">indices</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">exists</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(request, RequestOptions.DEFAULT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(exists);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 删除索引测试</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> deleteIndexTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    DeleteIndexRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> DeleteIndexRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen_index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    AcknowledgedResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">indices</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(request, RequestOptions.DEFAULT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isAcknowledged</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="测试文档的crud" tabindex="-1">测试文档的CRUD <a class="header-anchor" href="#测试文档的crud" aria-label="Permalink to “测试文档的CRUD”">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 添加文档测试</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> addDocument</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //创建对象和索引(执行创建索引Test)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    User</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Manaphy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //创建请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    IndexRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> IndexRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen_index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //规则 put /chen_index/_doc/1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //设置超时时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(TimeValue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">timeValueSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//        request.timeout(&quot;1s&quot;);//同上</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //将数据放入请求 json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toJSONString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(user), XContentType.JSON);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //客户端发送请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    IndexResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> indexResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(request, RequestOptions.DEFAULT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(indexResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//IndexResponse[index=chen_index,type=_doc,id=1,version=1,result=created,seqNo=0,primaryTerm=1,shards={&quot;total&quot;:2,&quot;successful&quot;:1,&quot;failed&quot;:0}]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(indexResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//对应我们命令返回的状态 CREATED</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 获取文档 get /chen_index/_doc/1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> isExist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    GetRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> getRequest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> GetRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen_index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //不获取返回的 _source 的上下文</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    getRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">fetchSourceContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FetchSourceContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    getRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">storedFields</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;_none_&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> exists</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">exists</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(getRequest, RequestOptions.DEFAULT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(exists);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 获得文档的信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getDocument</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    GetRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> getRequest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> GetRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen_index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    GetResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> getResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(getRequest, RequestOptions.DEFAULT);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //打印文档内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(getResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getSourceAsString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//{&quot;age&quot;:3,&quot;name&quot;:&quot;Manaphy&quot;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(getResponse);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//{&quot;_index&quot;:&quot;chen_index&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:1,&quot;_seq_no&quot;:0,&quot;_primary_term&quot;:1,&quot;found&quot;:true,&quot;_source&quot;:{&quot;age&quot;:3,&quot;name&quot;:&quot;Manaphy&quot;}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 更新文档的信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> updateDocument</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    UpdateRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> updateRequest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> UpdateRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen_index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    updateRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    User</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Manaphy Chen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    updateRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">doc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toJSONString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(user), XContentType.JSON);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    UpdateResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(updateRequest, RequestOptions.DEFAULT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(response);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//UpdateResponse[index=chen_index,type=_doc,id=1,version=2,seqNo=1,primaryTerm=1,result=updated,shards=ShardInfo{total=2, successful=1, failures=[]}]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 删除文档记录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> deleteDocument</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    DeleteRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> DeleteRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen_index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    DeleteResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(request, RequestOptions.DEFAULT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 批量插入数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> bulkRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    BulkRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> bulkRequest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> BulkRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    bulkRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(TimeValue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">timeValueMinutes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">userList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ArrayList&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;() {{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //批处理请求</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> userList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        //批量更新和批量删除 就在这里修改对应的请求即可</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//            bulkRequest.add(DeleteRequest deleteRequest)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//            bulkRequest.add(UpdateRequest updateRequest)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        bulkRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> IndexRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen_index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">))</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//如果这里不指定id 就会生成一个随机的id 如 5fZb9XIBR6G61hgle73t</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toJSONString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(userList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(i)), XContentType.JSON));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    BulkResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">bulk</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bulkRequest, RequestOptions.DEFAULT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">hasFailures</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//是否失败,返回 false 代表成功</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="搜索" tabindex="-1">搜索 <a class="header-anchor" href="#搜索" aria-label="Permalink to “搜索”">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 查询</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * SearchRequest 搜索请求</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * SearchSourceBuilder 条件构造</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * HighlightBuilder 构建高亮</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * TermQueryBuilder 精确查询</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * QueryBuilders 构建查询条件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> search</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    SearchRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> searchRequest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> SearchRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen_index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //构建搜索条件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    SearchSourceBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sourceBuilder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> SearchSourceBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //查询条件, 使用 QueryBuilders 工具来实现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    TermQueryBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> termQueryBuilder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> QueryBuilders.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">termQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    sourceBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(termQueryBuilder);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    sourceBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(TimeValue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">timeValueMinutes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //高亮</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    HighlightBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> highlightBuilder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> HighlightBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    highlightBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">field</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    highlightBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">preTags</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&lt;span style=&#39;color:red&#39;&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    highlightBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">postTags</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&lt;/span&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    sourceBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">highlighter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(highlightBuilder);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    searchRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(sourceBuilder);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    SearchResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> searchResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">search</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(searchRequest, RequestOptions.DEFAULT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    SearchHits</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> hits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> searchResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getHits</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toJSONString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(hits));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;------------------------------------------&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (SearchHit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> hit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> hits.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getHits</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        //解析高亮字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Map</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">HighlightField</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">highlightFields</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> hit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getHighlightFields</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        HighlightField</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> highlightFields.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Map</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sourceAsMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> hit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getSourceAsMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//原来的结果</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        //解析高亮的字段 将原来的字段替换为我们高亮的字段即可</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">fragments</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">fragments</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> newName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (Text</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fragment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fragments) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                newName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(fragment);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            sourceAsMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, newName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(sourceAsMap);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//{name=&lt;span style=&#39;color:red&#39;&gt;chen1&lt;/span&gt;, age=3}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div>`,153),j=[M];function G(J,Q,Z,V,X,z){return a(),i("div",null,j)}const W=s(K,[["render",G]]);export{$ as __pageData,W as default};
