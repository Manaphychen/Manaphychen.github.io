import{_ as e,c as l,o as t,aj as i,j as a,a as s}from"./chunks/framework._AF764y6.js";const n="/assets/image-20240514133151741.Da5XztSd.png",p="/assets/image-20240514133727515.aZv83Snk.png",r="/assets/throughput_and_pause_time.Lk6YRU95.jpg",h="/assets/image-20240514145356899._Jmx83Ui.png",d="/assets/classic_7_garbage_collection_methods.zbL4Q4xC.jpg",Q="/assets/garbage_collector_combination.BfTNK_UQ.jpg",o="/assets/image-20240514155240932.BJ3Cc5nO.png",k="/assets/image-20240514161410989.B3p1fzcu.png",T="/assets/image-20240514212216525.D9k1mrP5.png",g="/assets/image-20240514220214103.CbbPHnQy.png",c="/assets/image-20240514221551415.Dz3w8NGa.png",m="/assets/image-20240515004141600.iPxad2Cx.png",C="/assets/image-20240515004212194.Dygaa1BL.png",y="/assets/image-20240515232452076.cC7Lhwtj.png",F="/assets/image-20240515233212024.E93bbCqn.png",u="/assets/g1_gc_garbage_collection_process.CmYnIqH6.jpg",E="/assets/image-20240515234823327.BCzI-DqA.png",G="/assets/image-20240515234220078.CddQdKMx.png",b="/assets/image-20240516012326683.Dwk9TY4a.png",S="/assets/image-20240516154200971.DGnk3A4I.png",f="/assets/image-20240516171946016.BZS1qNTO.png",M="/assets/image-20240516172104589.DSt-QIkW.png",B="/assets/image-20240517141313786.DS-bPd7Q.png",P="/assets/image-20240517142315748.CZtdp24e.png",x="/assets/image-20240517143452667.BIiErdbi.png",H="/assets/image-20240517143630437.-flkEZqK.png",$=JSON.parse('{"title":"垃圾回收器","description":"","frontmatter":{"title":"垃圾回收器","date":"2024-04-07T20:34:46.000Z","permalink":"/jvm/e1b245/","categories":["后端","JVM虚拟机","垃圾回收器"],"tags":[null],"author":"Manaphy"},"headers":[],"relativePath":"jvm/02.垃圾回收器/02.垃圾回收器.md","filePath":"jvm/02.垃圾回收器/02.垃圾回收器.md","lastUpdated":1744977432000}'),v={name:"jvm/02.垃圾回收器/02.垃圾回收器.md"},_=i('<h1 id="垃圾回收器" tabindex="-1">垃圾回收器 <a class="header-anchor" href="#垃圾回收器" aria-label="Permalink to “垃圾回收器”">​</a></h1><h2 id="gc分类与性能指标" tabindex="-1">GC分类与性能指标 <a class="header-anchor" href="#gc分类与性能指标" aria-label="Permalink to “GC分类与性能指标”">​</a></h2><h3 id="垃圾回收器概述" tabindex="-1">垃圾回收器概述 <a class="header-anchor" href="#垃圾回收器概述" aria-label="Permalink to “垃圾回收器概述”">​</a></h3><p>垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商、不同版本的JVM来实现。</p><p>由于JDK的版本处于高速迭代过程中，因此Java发展至今已经衍生了众多的GC版本。</p><p>从不同角度分析垃圾收集器，可以将GC分为不同的类型。</p><h3 id="垃圾收集器分类" tabindex="-1">垃圾收集器分类 <a class="header-anchor" href="#垃圾收集器分类" aria-label="Permalink to “垃圾收集器分类”">​</a></h3><p><strong>按<span style="color:blue;">线程数</span>分，可以分为串行垃圾回收器和并行垃圾回收器。</strong></p><p><img src="'+n+'" alt="image-20240514133151741"></p><p>串行回收指的是在同一时间段内只允许有一个CPU用于执行垃圾回收操作，此时工作线程被暂停，直至垃圾收集工作结束。</p><ul><li>在诸如单CPU处理器或者较小的应用内存等硬件平台不是特别优越的场合，串行回收器的性能表现可以超过并行回收器和并发回收器。所以，<span style="color:blue;">串行回收默认被应用在客户端的Client模式下的JVM中</span></li><li>在并发能力比较强的CPU上，并行回收器产生的停顿时间要短于串行回收器。</li></ul><p>和串行回收相反，并行收集可以运用多个CPU同时执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然与串行回收一样，采用独占式，使用了“Stop-the-World”机制。</p><p><strong>按照<span style="color:blue;">工作模式</span>分，可以分为并发式垃圾回收器和独占式垃圾回收器。</strong></p><ul><li>并发式垃圾回收器与应用程序线程交替工作，以尽可能减少应用程序的停顿时间。</li><li>独占式垃圾回收器（Stop the world）一旦运行，就停止应用程序中的所有用户线程，直到垃圾回收过程完全结束。</li></ul><p><img src="'+p+'" alt="image-20240514133727515"></p><p><strong>按<span style="color:blue;">碎片处理方式</span>分，可分为压缩式垃圾回收器和非压缩式垃圾回收器。</strong></p><ul><li>压缩式垃圾回收器会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片。</li><li>非压缩式的垃圾回收器不进行这步操作。</li></ul><p><strong>按<span style="color:blue;">工作的内存区间</span>分，又可分为年轻代垃圾回收器和老年代垃圾回收器。</strong></p><h3 id="评估gc的性能指标" tabindex="-1">评估GC的性能指标 <a class="header-anchor" href="#评估gc的性能指标" aria-label="Permalink to “评估GC的性能指标”">​</a></h3><ul><li><span style="color:red;">吞吐量：运行用户代码的时间占总运行时间的比例</span>（总运行时间 = 程序的运行时间 + 内存回收的时间）</li><li>垃圾收集开销：吞吐量的补数，垃圾收集所用时间与总运行时间的比例。</li><li><span style="color:red;"><strong>暂停时间：执行垃圾收集时，程序的工作线程被暂停的时间。</strong></span></li><li>收集频率：相对于应用程序的执行，收集操作发生的频率。</li><li><span style="color:red;">内存占用：Java堆区所占的内存大小。</span></li><li>快速：一个对象从诞生到被回收所经历的时间。</li></ul><p>吞吐量、暂停时间、内存占用 这三者共同构成一个“不可能三角”。三者总体的表现会随着技术进步而越来越好。一款优秀的收集器通常最多同时满足其中的两项。</p><p>这三项里，暂停时间的重要性日益凸显。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高了吞吐量。而内存的扩大，对延迟反而带来负面效果。</p><p>简单来说，主要抓住两点：吞吐量、暂停时间</p><h4 id="吞吐量-throughput" tabindex="-1">吞吐量(throughput) <a class="header-anchor" href="#吞吐量-throughput" aria-label="Permalink to “吞吐量(throughput)”">​</a></h4><p>吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间+垃圾收集时间）。比如：虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。</p><p>这种情况下，应用程序能容忍较高的暂停时间，因此，高吞吐量的应用程序有更长的时间基准，快速响应是不必考虑的</p><p>吞吐量优先，意味着在单位时间内，STW的时间最短：0.2 + 0.2 = 0.4</p><h4 id="暂停时间-pause-time" tabindex="-1">暂停时间(pause time) <a class="header-anchor" href="#暂停时间-pause-time" aria-label="Permalink to “暂停时间(pause time)”">​</a></h4><p>“暂停时间”是指一个时间段内应用程序线程暂停，让GC线程执行的状态。</p><p>例如，GC期间100毫秒的暂停时间意味着在这100毫秒期间内没有应用程序线程是活动的。</p><p>暂停时间优先，意味着尽可能让单次STW的时间最短：0.1 + 0.1 + 0.1 + 0.1 + 0.1 = 0.5</p><h4 id="吞吐量-vs-暂停时间" tabindex="-1">吞吐量 vs 暂停时间 <a class="header-anchor" href="#吞吐量-vs-暂停时间" aria-label="Permalink to “吞吐量 vs 暂停时间”">​</a></h4><p><img src="'+r+'" alt="第17章_吞吐量与暂停时间"></p><p>高吞吐量较好因为这会让应用程序的最终用户感觉只有应用程序线程在做“生产性”工作。直觉上，吞吐量越高程序运行越快。</p><p>低暂停时间（低延迟）较好因为从最终用户的角度来看不管是GC还是其他原因导致一个应用被挂起始终是不好的。这取决于应用程序的类型，<span style="color:blue;">有时候甚至短暂的200毫秒暂停都可能打断终端用户体验。</span>因此，具有低的较大暂停时间是非常重要的，特别是对于一个<span style="color:blue;">交互式应用程序</span>。</p><p>不幸的是”高吞吐量”和”低暂停时间”是一对相互竞争的目标（矛盾）。</p><ul><li>因为如果选择以吞吐量优先，那么<span style="color:blue;">必然需要降低内存回收的执行频率</span>，但是这样会导致GC需要更长的暂停时间来执行内存回收。</li><li>相反的，如果选择以低延迟优先为原则，那么为了降低每次执行内存回收时的暂停时间，也<span style="color:blue;">只能频繁地执行内存回收</span>，但这又引起了年轻代内存的缩减和导致程序吞吐量的下降。</li></ul><p>在设计（或使用）GC算法时，我们必须确定我们的目标：一个GC算法只可能针对两个目标之一（即只专注于较大吞吐量或最小暂停时间），或尝试找到一个二者的折衷。</p><p>现在标准：<span style="color:red;">在最大吞吐量优先的情况下，降低停顿时间</span></p><h2 id="不同的垃圾回收器概述" tabindex="-1">不同的垃圾回收器概述 <a class="header-anchor" href="#不同的垃圾回收器概述" aria-label="Permalink to “不同的垃圾回收器概述”">​</a></h2><p>垃圾收集机制是Java的招牌能力，极大地提高了开发效率。这当然也是面试的热点。</p><h3 id="垃圾回收器发展史" tabindex="-1">垃圾回收器发展史 <a class="header-anchor" href="#垃圾回收器发展史" aria-label="Permalink to “垃圾回收器发展史”">​</a></h3><p>有了虚拟机，就一定需要收集垃圾的机制，这就是Garbage Collection，对应的产品我们称为Garbage Collector。</p><ul><li>1999年随JDK1.3.1一起来的是串行方式的serialGC，它是第一款GC。ParNew垃圾收集器是Serial收集器的多线程版本</li><li>2002年2月26日，Parallel GC和Concurrent Mark Sweep GC跟随JDK1.4.2一起发布</li><li>Parallel GC在JDK6之后成为HotSpot默认GC。</li><li>2012年，在JDK1.7u4版本中，G1可用。</li><li>2017年，JDK9中G1变成默认的垃圾收集器，以替代CMS。</li><li>2018年3月，JDK10中G1垃圾回收器的并行完整垃圾回收，实现并行性来改善最坏情况下的延迟。</li><li>2018年9月，JDK11发布。引入Epsilon垃圾回收器，又被称为 &quot;No-Op(无操作)“ 回收器。同时，引入ZGC：可伸缩的低延迟垃圾回收器（Experimental）</li><li>2019年3月，JDK12发布。增强G1，自动返回未用堆内存给操作系统。同时，引入Shenandoah GC：低停顿时间的GC（Experimental）。·</li><li>2019年9月，JDK13发布。增强ZGC，自动返回未用堆内存给操作系统。</li><li>2020年3月，JDK14发布。删除CMS垃圾回收器。扩展ZGC在macos和Windows上的应用</li></ul><h3 id="_7种经典的垃圾收集器" tabindex="-1">7种经典的垃圾收集器 <a class="header-anchor" href="#_7种经典的垃圾收集器" aria-label="Permalink to “7种经典的垃圾收集器”">​</a></h3><ul><li>串行回收器：Serial、Serial Old</li><li>并行回收器：ParNew、Parallel Scavenge、Parallel old</li><li>并发回收器：CMS、G1</li></ul><p><img src="'+h+'" alt="image-20240514145356899"></p><p>官方手册: <a href="https://www.oracle.com/technetwork/java/javase/tech/memorymanagement-whitepaper-1-150020.pdf" target="_blank" rel="noreferrer">https://www.oracle.com/technetwork/java/javase/tech/memorymanagement-whitepaper-1-150020.pdf</a></p><h3 id="_7款经典收集器与垃圾分代之间的关系" tabindex="-1">7款经典收集器与垃圾分代之间的关系 <a class="header-anchor" href="#_7款经典收集器与垃圾分代之间的关系" aria-label="Permalink to “7款经典收集器与垃圾分代之间的关系”">​</a></h3><p><img src="'+d+'" alt="第17章_经典的7种GC"></p><ul><li>新生代收集器：Serial、ParNew、Parallel Scavenge;</li><li>老年代收集器：Serial Old、Parallel Old、CMS;</li><li>整堆收集器：G1;</li></ul><h3 id="垃圾收集器的组合关系" tabindex="-1">垃圾收集器的组合关系 <a class="header-anchor" href="#垃圾收集器的组合关系" aria-label="Permalink to “垃圾收集器的组合关系”">​</a></h3><p><img src="'+Q+`" alt="garbage_collector_combination"></p><ol><li>两个收集器间有连线，表明它们可以搭配使用：Serial/Serial Old、Serial/CMS、ParNew/Serial Old、ParNew/CMS、Parallel Scavenge/Serial Old、Parallel Scavenge/Parallel Old、G1；</li><li>其中Serial Old作为CMS出现&quot;<code>Concurrent Mode Failure</code>&quot;失败的后备预案。</li><li>（红色虚线）由于维护和兼容性测试的成本，在JDK 8时将Serial+CMS、ParNew+Serial Old这两个组合声明为废弃（JEP173），并在JDK9中完全取消了这些组合的支持（JEP214），即：移除。</li><li>（绿色虚线）JDK14中：弃用Parallel Scavenge和Serialold GC组合（JEP366）</li><li>（绿色虚框）JDK14中：删除CMS垃圾回收器（JEP363）</li></ol><h3 id="不同的垃圾收集器概述" tabindex="-1">不同的垃圾收集器概述 <a class="header-anchor" href="#不同的垃圾收集器概述" aria-label="Permalink to “不同的垃圾收集器概述”">​</a></h3><p>为什么要有很多收集器，一个不够吗？因为Java的使用场景很多，移动端，服务器等。所以就需要针对不同的场景，提供不同的垃圾收集器，提高垃圾收集的性能。</p><p>虽然我们会对各个收集器进行比较，但并非为了挑选一个最好的收集器出来。没有一种放之四海皆准、任何场景下都适用的完美收集器存在，更加没有万能的收集器。所以<span style="color:blue;">我们选择的只是对具体应用最合适的收集器。</span></p><h3 id="如何查看默认垃圾收集器" tabindex="-1">如何查看默认垃圾收集器 <a class="header-anchor" href="#如何查看默认垃圾收集器" aria-label="Permalink to “如何查看默认垃圾收集器”">​</a></h3><p><code>-XX:+PrintCommandLineFlags</code>：查看命令行相关参数（包含使用的垃圾收集器）</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">manaphy@manaphydembp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> %</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+PrintCommandLineFlags</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:InitialHeapSize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=268435456</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:MaxHeapSize=4294967296</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+PrintCommandLineFlags</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+UseCompressedClassPointers</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+UseCompressedOops</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+UseParallelGC</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openjdk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.8.0_412&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OpenJDK</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Runtime</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Zulu </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">8.78.0.19-CA-macos-aarch64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1.8.0_412-b08</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OpenJDK</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 64-Bit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> VM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Zulu </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">8.78.0.19-CA-macos-aarch64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 25.412-b08,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mixed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">manaphy@manaphydembp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> %</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+PrintCommandLineFlags</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:ConcGCThreads</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:G1ConcRefinementThreads=8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:GCDrainStackTargetSize=64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:InitialHeapSize=268435456</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:MarkStackSize=4194304</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:MaxHeapSize=4294967296</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:MinHeapSize=6815736</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+PrintCommandLineFlags</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:ReservedCodeCacheSize=251658240</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+SegmentedCodeCache</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+UseCompressedClassPointers</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+UseCompressedOops</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+UseG1GC</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openjdk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;17.0.11&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2024-04-16</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LTS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OpenJDK</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Runtime</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Environment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Zulu17.50+19-CA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (build </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">17.0.11+9-LTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OpenJDK</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 64-Bit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> VM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Zulu17.50+19-CA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (build </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">17.0.11+9-LTS,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mixed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mode,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sharing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">manaphy@manaphydembp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> %</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+PrintCommandLineFlags</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:ConcGCThreads</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:G1ConcRefinementThreads=8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:GCDrainStackTargetSize=64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:InitialHeapSize=268435456</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:MarkStackSize=4194304</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:MaxHeapSize=4294967296</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:MinHeapSize=6815736</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+PrintCommandLineFlags</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:ReservedCodeCacheSize=251658240</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+SegmentedCodeCache</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+UseCompressedOops</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+UseG1GC</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openjdk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;21.0.3&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2024-04-16</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LTS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OpenJDK</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Runtime</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Environment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Zulu21.34+19-CA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (build </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">21.0.3+9-LTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OpenJDK</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 64-Bit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> VM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Zulu21.34+19-CA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (build </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">21.0.3+9-LTS,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mixed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mode,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sharing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>使用命令行指令：<code>jinfo -flag 相关垃圾回收器参数 进程ID</code></p><h2 id="serial回收器-串行回收" tabindex="-1">Serial回收器:串行回收 <a class="header-anchor" href="#serial回收器-串行回收" aria-label="Permalink to “Serial回收器:串行回收”">​</a></h2><p>Serial收集器是最基本、历史最悠久的垃圾收集器了。JDK1.3之前回收新生代唯一的选择。</p><p>Serial收集器作为HotSpot中Client模式下的默认新生代垃圾收集器。</p><p><span style="color:blue;">Serial收集器采用复制算法、串行回收和&quot;Stop-the-World&quot;机制的方式执行内存回收。</span></p><p>除了年轻代之外，Serial收集器还提供用于执行老年代垃圾收集的Serial Old收集器。<span style="color:blue;">Serial Old收集器同样也采用了串行回收和&quot;Stop the World&quot;机制，只不过内存回收算法使用的是标记-压缩算法。</span></p><ul><li>Serial Old是运行在Client模式下默认的老年代的垃圾回收器</li><li>Serial Old在Server模式下主要有两个用途：① 与新生代的Parallel Scavenge配合使用 ② 作为老年代CMS收集器的后备垃圾收集方案</li></ul><p><img src="`+o+'" alt="image-20240514155240932"></p><p>这个收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它<span style="color:blue;">只会使用一个CPU或一条收集线程去完成垃圾收集工作，</span>更重要的是在它进行垃圾收集时，<span style="color:blue;">必须暂停其他所有的工作线程</span>，直到它收集结束（Stop The World）</p><p>优势：<span style="color:blue;">简单而高效</span>（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。运行在Client模式下的虚拟机是个不错的选择。</p><p>在用户的桌面应用场景中，可用内存一般不大（几十MB至一两百MB），可以在较短时间内完成垃圾收集（几十ms至一百多ms），只要不频繁发生，使用串行回收器是可以接受的。</p><p>在HotSpot虚拟机中，使用<code>-XX:+UseSerialGC</code>参数可以指定年轻代和老年代都使用串行收集器。等价于新生代用Serial GC，且老年代用Serial Old GC</p><p><strong>总结</strong></p><p>这种垃圾收集器大家了解，现在已经不用串行的了。而且在限定单核cpu才可以用。现在都不是单核的了。</p><p>对于交互较强的应用而言，这种垃圾收集器是不能接受的。一般在Java web应用程序中是不会采用串行垃圾收集器的。</p><h2 id="parnew回收器-并行回收" tabindex="-1">ParNew回收器:并行回收 <a class="header-anchor" href="#parnew回收器-并行回收" aria-label="Permalink to “ParNew回收器:并行回收”">​</a></h2><p>如果说Serial GC是年轻代中的单线程垃圾收集器，那么ParNew收集器则是Serial收集器的多线程版本。Par是Parallel的缩写，New：只能处理的是新生代</p><p>ParNew 收集器除了采用<span style="color:blue;">并行回收</span>的方式执行内存回收外，两款垃圾收集器之间几乎没有任何区别。ParNew收集器在年轻代中同样也是<span style="color:blue;">采用复制算法、&quot;Stop-the-World&quot;机制</span>。</p><p>ParNew 是很多JVM运行在Server模式下新生代的默认垃圾收集器。</p><p><img src="'+k+'" alt="image-20240514161410989"></p><ul><li>对于新生代，回收次数频繁，使用并行方式高效。</li><li>对于老年代，回收次数少，使用串行方式节省资源。（CPU并行需要切换线程，串行可以省去切换线程的资源）</li></ul><p>由于ParNew收集器是基于并行回收，那么是否可以断定ParNew收集器的回收效率在任何场景下都会比serial收集器更高效？</p><ul><li>ParNew 收集器运行在多CPU的环境下，由于可以充分利用多CPU、多核心等物理硬件资源优势，可以更快速地完成垃圾收集，提升程序的吞吐量。</li><li>但是<span style="color:blue;">在单个CPU的环境下，ParNew收集器不比Serial 收集器更高效。</span>虽然Serial收集器是基于串行回收，但是由于CPU不需要频繁地做任务切换，因此可以有效避免多线程交互过程中产生的一些额外开销。</li></ul><p>因为除Serial外，目前只有ParNew GC能与CMS收集器配合工作</p><p>在程序中，开发人员可以通过选项&quot;<code>-XX:+UseParNewGC</code>&quot;手动指定使用ParNew收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代。</p><p><code>-XX:ParallelGCThreads</code>限制线程数量，默认开启和CPU数据相同的线程数。</p><h2 id="parallel回收器-吞吐量优先" tabindex="-1">Parallel回收器:吞吐量优先 <a class="header-anchor" href="#parallel回收器-吞吐量优先" aria-label="Permalink to “Parallel回收器:吞吐量优先”">​</a></h2><p>HotSpot的年轻代中除了拥有ParNew收集器是基于并行回收的以外，Parallel Scavenge收集器同样也采用了<span style="color:blue;">复制算法、并行回收和&quot;Stop the World&quot;机制。</span></p><p>那么Parallel 收集器的出现是否多此一举？</p><ul><li><p>和ParNew收集器不同，ParallelScavenge收集器的目标则是达到一个<span style="color:blue;"><b>可控制的吞吐量</b></span>（Throughput），它也被称为吞吐量优先的垃圾收集器。</p></li><li><p>自适应调节策略也是Parallel Scavenge与ParNew一个重要区别。</p></li></ul><p>高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要<span style="color:blue;">适合在后台运算而不需要太多交互的任务。</span>因此，常见在服务器环境中使用。<span style="color:blue;">例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序。</span></p><p>Parallel 收集器在JDK1.6时提供了用于执行老年代垃圾收集的Parallel Old收集器，用来代替老年代的Serial Old收集器。</p><p>Parallel Old收集器采用了<span style="color:blue;">标记-压缩算法</span>，但同样也是基于<span style="color:blue;">并行回收和&quot;Stop-the-World&quot;机制。</span></p><p><img src="'+T+'" alt="image-20240514212216525"></p><p>在程序吞吐量优先的应用场景中，Parallel 收集器和Parallel Old收集器的组合，在Server模式下的内存回收性能很不错。在Java8中，默认是此垃圾收集器。</p><p><strong>参数配置</strong></p>',98),D=a("li",null,[a("p",null,[a("code",null,"-XX:+UseParallelGC"),s(" 手动指定年轻代使用Parallel并行收集器执行内存回收任务。")])],-1),w=a("li",null,[a("p",null,[a("code",null,"-XX:+UseParallelOldGC"),s(" 手动指定老年代都是使用并行回收收集器。")]),a("ul",null,[a("li",null,"分别适用于新生代和老年代。默认jdk8是开启的。"),a("li",null,[s("上面两个参数，默认开启一个，另一个也会被开启。"),a("span",{style:{color:"red"}},"（互相激活）")])])],-1),L=a("p",null,[a("code",null,"-XX:ParallelGCThreads"),s(" 设置年轻代并行收集器的线程数。一般地，最好与CPU数量相等，以避免过多的线程数影响垃圾收集性能。")],-1),X=a("ul",null,[a("li",null,"在默认情况下，当CPU数量小于8个，ParallelGCThreads的值等于CPU数量。"),a("li",null,"当CPU数量大于8个，ParallelGCThreads的值等于3+[5*CPU_Count/8]。")],-1),K={tabindex:"0",class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},Z={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-2.148ex"},xmlns:"http://www.w3.org/2000/svg",width:"72.197ex",height:"5.428ex",role:"img",focusable:"false",viewBox:"0 -1449.5 31911 2399","aria-hidden":"true"},J=i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(751,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1280,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1731,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2260,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2558,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2856,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3322,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3620,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4406,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5166,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5870,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6446,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6897,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7363,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7892,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(8412,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(9158.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mrow" transform="translate(10214.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z" style="stroke-width:3;"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,600)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1511,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2278,0)"><path data-c="5F" d="M0 -62V-25H499V-62H0Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2778,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3538,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4023,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4595,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5195,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mtd" transform="translate(12000.9,0)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1149,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1900,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2667,0)"><path data-c="5F" d="M0 -62V-25H499V-62H0Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3167,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3927,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4412,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4984,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5584,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(6222.8,0)"><g data-mml-node="text"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z" style="stroke-width:3;"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mn" transform="translate(8056.6,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(8556.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-600)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1722.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(2111.4,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2833.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3555.9,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4315.9,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5066.9,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5833.9,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">＿</text></g><g data-mml-node="mi" transform="translate(6833.9,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7593.9,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(8078.9,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(8650.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(9250.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(9611.9,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mn" transform="translate(10111.9,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(10611.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mtd" transform="translate(12000.9,0)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1149,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1900,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2667,0)"><path data-c="5F" d="M0 -62V-25H499V-62H0Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3167,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3927,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4412,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4984,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5584,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(6222.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(7278.6,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(7778.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g></g><g data-mml-node="mo" transform="translate(21696.4,0) translate(0 250)"></g></g></g></g>',1),O=[J],A=a("mjx-assistive-mml",{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[a("mi",null,"P"),a("mi",null,"a"),a("mi",null,"r"),a("mi",null,"a"),a("mi",null,"l"),a("mi",null,"l"),a("mi",null,"e"),a("mi",null,"l"),a("mi",null,"G"),a("mi",null,"C"),a("mi",null,"T"),a("mi",null,"h"),a("mi",null,"r"),a("mi",null,"e"),a("mi",null,"a"),a("mi",null,"d"),a("mi",null,"s"),a("mo",null,"="),a("mrow",{"data-mjx-texclass":"INNER"},[a("mo",{"data-mjx-texclass":"OPEN"},"{"),a("mtable",{columnalign:"left left",columnspacing:"1em",rowspacing:".2em"},[a("mtr",null,[a("mtd",null,[a("mi",null,"C"),a("mi",null,"P"),a("mi",null,"U"),a("mi",{mathvariant:"normal"},"_"),a("mi",null,"C"),a("mi",null,"o"),a("mi",null,"u"),a("mi",null,"n"),a("mi",null,"t")]),a("mtd",null,[a("mtext",null,"("),a("mi",null,"C"),a("mi",null,"P"),a("mi",null,"U"),a("mi",{mathvariant:"normal"},"_"),a("mi",null,"C"),a("mi",null,"o"),a("mi",null,"u"),a("mi",null,"n"),a("mi",null,"t"),a("mo",null,"<="),a("mn",null,"8"),a("mo",{stretchy:"false"},")")])]),a("mtr",null,[a("mtd",null,[a("mn",null,"3"),a("mo",null,"+"),a("mo",{stretchy:"false"},"("),a("mn",null,"5"),a("mo",null,"∗"),a("mi",null,"C"),a("mi",null,"P"),a("mi",null,"U"),a("mi",null,"＿"),a("mi",null,"C"),a("mi",null,"o"),a("mi",null,"u"),a("mi",null,"n"),a("mi",null,"t"),a("mrow",{"data-mjx-texclass":"ORD"},[a("mo",null,"/")]),a("mn",null,"8"),a("mo",{stretchy:"false"},")")]),a("mtd",null,[a("mtext",null,"("),a("mi",null,"C"),a("mi",null,"P"),a("mi",null,"U"),a("mi",{mathvariant:"normal"},"_"),a("mi",null,"C"),a("mi",null,"o"),a("mi",null,"u"),a("mi",null,"n"),a("mi",null,"t"),a("mo",null,">"),a("mn",null,"8"),a("mo",{stretchy:"false"},")")])])]),a("mo",{"data-mjx-texclass":"CLOSE",fence:"true",stretchy:"true",symmetric:"true"})])])],-1),R=i('<li><p><code>-XX:MaxGCPauseMillis</code> 设置垃圾收集器最大停顿时间（即STW的时间）。单位是毫秒。</p><ul><li>为了尽可能地把停顿时间控制在MaxGCPauseMills以内，收集器在工作时会调整Java堆大小或者其他一些参数。</li><li>对于用户来讲，停顿时间越短体验越好。但是在服务器端，我们注重高并发，整体的吞吐量。所以服务器端适合Parallel，进行控制。</li><li><span style="color:red;">该参数使用需谨慎。</span></li></ul></li><li><p><code>-XX:GCTimeRatio</code> 垃圾收集时间占总时间的比例（=1/（N+1））。用于衡量吞吐量的大小。</p><ul><li>取值范围（0, 100）。默认值99，也就是垃圾回收时间不超过1%。</li><li>与前一个<code>-XX:MaxGCPauseMillis</code>参数有一定矛盾性。暂停时间越长，Radio参数就容易超过设定的比例。</li></ul></li><li><p><code>-XX:+UseAdaptivesizePolicy</code> 设置Parallel Scavenge收集器具有<strong>自适应调节策略</strong></p><ul><li>在这种模式下，年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间之间的平衡点。</li><li>在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量（<code>GCTimeRatio</code>）和停顿时间（<code>MaxGCPauseMills</code>），让虚拟机自己完成调优工作。</li></ul></li>',3),V=i('<h2 id="cms回收器-低延迟" tabindex="-1">CMS回收器:低延迟 <a class="header-anchor" href="#cms回收器-低延迟" aria-label="Permalink to “CMS回收器:低延迟”">​</a></h2><p>在JDK1.5时期，Hotspot推出了一款在<span style="color:blue;">强交互应用</span>中几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，<span style="color:blue;">这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。</span></p><p>CMS收集器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间。停顿时间越短（低延迟）就越适合与用户交互的程序，良好的响应速度能提升用户体验。</p><ul><li><span style="color:blue;">目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短</span>，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。</li></ul><p>CMS的垃圾收集算法采用<span style="color:blue;">标记-清除</span>算法，并且也会&quot;Stop-the-World&quot;</p><p>不幸的是，CMS作为老年代的收集器，却无法与JDK1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，所以在JDK1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。</p><p>在G1出现之前，CMS使用还是非常广泛的。一直到今天，仍然有很多系统使用CMS GC。</p><p><img src="'+g+'" alt="image-20240514220214103"></p><p>CMS整个过程比之前的收集器要复杂，整个过程分为4个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段</p><ul><li><strong>初始标记</strong>（Initial-Mark）阶段：在这个阶段中，程序中所有的工作线程都将会因为“Stop-the-World”机制而出现短暂的暂停，这个阶段的主要任务<span style="color:red;">仅仅只是标记出GCRoots能直接关联到的对象</span>。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的<span style="color:red;">速度非常快</span>。</li><li><strong>并发标记</strong>（Concurrent-Mark）阶段：从GC Roots的<span style="color:red;">直接关联对象开始遍历整个对象图的过程</span>，这个过程<span style="color:red;">耗时较长</span>但是<span style="color:red;">不需要停顿用户线程</span>，可以与垃圾收集线程一起并发运行。</li><li><strong>重新标记</strong>（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了<span style="color:red;">修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录</span>，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。</li><li><strong>并发清除</strong>（Concurrent-Sweep）阶段：此阶段<span style="color:red;">清理删除掉标记阶段判断的已经死亡的对象，释放内存空间。</span>由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的</li></ul><p>尽管CMS收集器采用的是并发回收（非独占式），但是在其<span style="color:blue;">初始化标记和再次标记这两个阶段中仍然需要执行“Stop-the-World”机制</span>暂停程序中的工作线程，不过暂停时间并不会太长，因此可以说明目前所有的垃圾收集器都做不到完全不需要“Stop-the-World”，只是尽可能地缩短暂停时间。</p><p><span style="color:blue;">由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的。</span></p><p>另外，由于在垃圾收集阶段用户线程没有中断，所以<span style="color:blue;">在CMS回收过程中，还应该确保应用程序用户线程有足够的内存可用。</span>因此，CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，而是<span style="color:blue;">当堆内存使用率达到某一阈值时，便开始进行回收，</span>以确保应用程序在CMS工作过程中依然有足够的空间支持应用程序运行。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“<span style="color:blue;"><code>Concurrent Mode Failure</code></span>” 失败，这时虚拟机将启动后备预案：临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。</p><p>CMS收集器的垃圾收集算法采用的是<span style="color:blue;">标记-清除算法</span>，这意味着每次执行完内存回收后，由于被执行内存回收的无用对象所占用的内存空间极有可能是不连续的一些内存块，不可避免地将<span style="color:blue;">会产生一些内存碎片</span>。那么CMS在为新对象分配内存空间时，将无法使用指针碰撞（Bump the Pointer）技术，而只能够选择空闲列表（Free List）执行内存分配。</p><p><img src="'+c+'" alt="image-20240514221551415"></p><p><strong>有人会觉得既然Mark Sweep会造成内存碎片，那么为什么不把算法换成Mark Compact？</strong></p><p>答案其实很简单，因为当并发清除的时候，用Compact整理内存的话，原来的用户线程使用的内存还怎么用呢？要保证用户线程能继续执行，前提的它运行的资源不受影响嘛。Mark Compact更适合“Stop the World” 这种场景下使用</p><h3 id="cms的优点" tabindex="-1">CMS的优点 <a class="header-anchor" href="#cms的优点" aria-label="Permalink to “CMS的优点”">​</a></h3><ul><li>并发收集</li><li>低延迟</li></ul><h3 id="cms的弊端" tabindex="-1">CMS的弊端 <a class="header-anchor" href="#cms的弊端" aria-label="Permalink to “CMS的弊端”">​</a></h3><ul><li><span style="color:blue;">会产生内存碎片</span>，导致并发清除后，用户线程可用的空间不足。在无法分配大对象的情况下，不得不提前触发FullGC。</li><li><span style="color:blue;">CMS收集器对CPU资源非常敏感。</span>在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低。</li><li><span style="color:blue;">CMS收集器无法处理浮动垃圾。</span>可能出现<code>Concurrent Mode Failure</code>失败而导致另一次Full GC的产生。在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，那么<span style="color:blue;">在并发标记阶段如果产生新的垃圾对象，CMS将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收，</span>从而只能在下一次执行GC时释放这些之前未被回收的内存空间。</li></ul><h3 id="设置的参数" tabindex="-1">设置的参数 <a class="header-anchor" href="#设置的参数" aria-label="Permalink to “设置的参数”">​</a></h3><ul><li><code>-XX:+UseConcMarkSweepGC</code>手动指定使用CMS收集器执行内存回收任务。</li><li>开启该参数后会自动将<code>-XX:+UseParNewGC</code>打开。即：ParNew（Young区用）+CMS（Old区用）+ Serial Old的组合。</li><li><code>-XX:CMSInitiatingOccupanyFraction</code> 设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收。 <ul><li>JDK5及以前版本的默认值为68，即当老年代的空间使用率达到68%时，会执行一次CMS回收。<span style="color:blue;">JDK6及以上版本默认值为92%</span></li><li>如果内存增长缓慢，则可以设置一个稍大的值，大的阀值可以有效降低CMS的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。因此<span style="color:blue;">通过该选项便可以有效降低FullGC的执行次数。</span></li></ul></li><li><code>-XX:+UseCMSCompactAtFullCollection</code> 用于指定在执行完Full GC后对内存空间进行压缩整理，以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变得更长了。</li><li><code>-XX:CMSFullGCsBeforeCompaction</code> 设置在执行多少次Full GC后对内存空间进行压缩整理。</li><li><code>-XX:ParallelcMSThreads</code> 设置CMS的线程数量。 <ul><li>CMS默认启动的线程数是(ParallelGCThreads+3)/4，ParallelGCThreads是年轻代并行收集器的线程数。当CPU资源比较紧张时，受到CMS收集器线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕。</li></ul></li></ul><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to “小结”">​</a></h3><p>HotSpot有这么多的垃圾回收器，那么如果有人问，Serial GC、Parallel GC、Concurrent Mark Sweep GC这三个GC有什么不同呢？</p><p>请记住以下口令：</p><ul><li>如果你想要最小化地使用内存和并行开销，请选Serial GC；</li><li>如果你想要最大化应用程序的吞吐量，请选Parallel GC；</li><li>如果你想要最小化GC的中断或停顿时间，请选CMS GC。</li></ul><h3 id="jdk后续版本中cms的变化" tabindex="-1">JDK后续版本中CMS的变化 <a class="header-anchor" href="#jdk后续版本中cms的变化" aria-label="Permalink to “JDK后续版本中CMS的变化”">​</a></h3><p>JDK9新特性：CMS被标记为Deprecate了（JEP291）</p><ul><li>如果对JDK9及以上版本的HotSpot虚拟机使用参数<code>-XX: +UseConcMarkSweepGC</code>来开启CMS收集器的话，用户会收到一个警告信息，提示CMS未来将会被废弃。</li></ul><p>JDK14新特性：删除CMS垃圾回收器（JEP363）</p><ul><li>移除了CMS垃圾收集器，如果在JDK14中使用 <code>-XX:+UseConcMarkSweepGC</code>的话，JVM不会报错，只是给出一个warning信息，但是不会exit。JVM会自动回退以默认GC方式启动JVM</li></ul><h2 id="g1回收器-区域化分代式" tabindex="-1">G1回收器:区域化分代式 <a class="header-anchor" href="#g1回收器-区域化分代式" aria-label="Permalink to “G1回收器:区域化分代式”">​</a></h2><p><strong>既然我们已经有了前面几个强大的GC，为什么还要发布Garbage First（G1）？</strong></p><p>原因就在于应用程序所应对的<span style="color:blue;">业务越来越庞大、复杂，用户越来越多，</span>没有GC就不能保证应用程序正常进行，而经常造成STW的GC又跟不上实际的需求，所以才会不断地尝试对GC进行优化。G1（Garbage-First）垃圾回收器是在Java7 update4之后引入的一个新的垃圾回收器，是当今收集器技术发展的最前沿成果之一。</p><p>与此同时，为了适应现在<span style="color:blue;">不断扩大的内存和不断增加的处理器数量</span>，进一步降低暂停时间（pause time），同时兼顾良好的吞吐量。</p><p><span style="color:blue;">官方给G1设定的目标是在延迟可控的情况下获得尽可能高的吞吐量，所以才担当起“全功能收集器”的重任与期望。</span></p><p><strong>为什么名字叫 Garbage First(G1)呢？</strong></p><p>因为G1是一个并行回收器，它把堆内存分割为很多不相关的区域（Region）（物理上不连续的）。使用不同的Region来表示Eden、幸存者0区，幸存者1区，老年代等。</p><p>G1 GC有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，<span style="color:blue;">每次根据允许的收集时间，优先回收价值最大的Region。</span></p><p>由于这种方式的侧重点在于回收垃圾最大量的区间（Region），所以我们给G1一个名字：垃圾优先（Garbage First）。</p><p>G1（Garbage-First）是一款面向服务端应用的垃圾收集器，<span style="color:blue;">主要针对配备多核CPU及大容量内存的机器，</span>以极高概率满足GC停顿时间的同时，还兼具高吞吐量的性能特征。</p><p>在JDK1.7版本正式启用，移除了Experimental的标识，是<span style="color:blue;">JDK9以后的默认垃圾回收器</span>，取代了CMS回收器以及Parallel+Parallel Old组合。被Oracle官方称为“<span style="color:blue;">全功能的垃圾收集器</span>”。</p><p>与此同时，CMS已经在JDK9中被标记为废弃（deprecated）。在jdk8中还不是默认的垃圾回收器，需要使用<code>-XX:+UseG1GC</code>来启用。</p><h3 id="g1回收器的特点-优势" tabindex="-1">G1回收器的特点（优势） <a class="header-anchor" href="#g1回收器的特点-优势" aria-label="Permalink to “G1回收器的特点（优势）”">​</a></h3><p>与其他GC收集器相比，G1使用了全新的分区算法，其特点如下所示：</p><h4 id="并行与并发" tabindex="-1">并行与并发 <a class="header-anchor" href="#并行与并发" aria-label="Permalink to “并行与并发”">​</a></h4><ul><li>并行性：G1在回收期间，可以有多个GC线程同时工作，有效利用多核计算能力。此时用户线程STW</li><li>并发性：G1拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会在整个回收阶段发生完全阻塞应用程序的情况</li></ul><h4 id="分代收集" tabindex="-1">分代收集 <a class="header-anchor" href="#分代收集" aria-label="Permalink to “分代收集”">​</a></h4><ul><li>从分代上看，<span style="color:blue;">G1依然属于分代型垃圾回收器</span>，它会区分年轻代和老年代，年轻代依然有Eden区和Survivor区。但从堆的结构上看，它不要求整个Eden区、年轻代或者老年代都是连续的，也不再坚持固定大小和固定数量。</li><li>将<span style="color:blue;">堆空间分为若干个区域（Region），这些区域中包含了逻辑上的年轻代和老年代。</span></li><li>和之前的各类回收器不同，它同时<span style="color:blue;">兼顾年轻代和老年代</span>。对比其他回收器，或者工作在年轻代，或者工作在老年代；</li></ul><p><img src="'+m+'" alt="image-20240515004141600"></p><p><img src="'+C+'" alt="image-20240515004212194"></p><h4 id="空间整合" tabindex="-1">空间整合 <a class="header-anchor" href="#空间整合" aria-label="Permalink to “空间整合”">​</a></h4><ul><li>CMS：“标记-清除”算法、内存碎片、若干次GC后进行一次碎片整理</li><li>G1将内存划分为一个个的region。内存的回收是以region作为基本单位的。<span style="color:blue;">Region之间是复制算法</span>，但整体上实际可看作是<span style="color:blue;">标记-压缩（Mark-Compact）算法</span>，两种算法都可以避免内存碎片。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。尤其是当Java堆非常大的时候，G1的优势更加明显。</li></ul><h4 id="可预测的停顿时间模型-即-软实时soft-real-time" tabindex="-1">可预测的停顿时间模型（即：软实时soft real-time） <a class="header-anchor" href="#可预测的停顿时间模型-即-软实时soft-real-time" aria-label="Permalink to “可预测的停顿时间模型（即：软实时soft real-time）”">​</a></h4><p>这是G1相对于CMS的另一大优势，G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</p><ul><li>由于分区的原因，G1可以只选取部分区域进行内存回收，这样缩小了回收的范围，因此对于全局停顿情况的发生也能得到较好的控制。</li><li>G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，<span style="color:blue;">每次根据允许的收集时间，优先回收价值最大的Region。</span>保证了G1收集器在有限的时间内可以<span style="color:blue;">获取尽可能高的收集效率</span>。</li><li>相比于CMS GC，G1未必能做到CMS在最好情况下的延时停顿，但是最差情况要好很多。</li></ul><h3 id="g1垃圾收集器的缺点" tabindex="-1">G1垃圾收集器的缺点 <a class="header-anchor" href="#g1垃圾收集器的缺点" aria-label="Permalink to “G1垃圾收集器的缺点”">​</a></h3><p>相较于CMS，G1还不具备全方位、压倒性优势。比如在用户程序运行过程中，G1无论是为了垃圾收集产生的内存占用（Footprint）还是程序运行时的额外执行负载（Overload）都要比CMS要高。</p><p>从经验上来说，在小内存应用上CMS的表现大概率会优于G1，而G1在大内存应用上则发挥其优势。平衡点在6-8GB之间。</p><h3 id="g1回收器的参数设置" tabindex="-1">G1回收器的参数设置 <a class="header-anchor" href="#g1回收器的参数设置" aria-label="Permalink to “G1回收器的参数设置”">​</a></h3><ul><li><code>-XX:+UseG1GC</code> 手动指定使用G1垃圾收集器执行内存回收任务</li><li><code>-XX:G1HeapRegionSize</code> 设置每个Region的大小。值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出约2048个区域。默认是堆内存的1/2000。</li><li><code>-XX:MaxGCPauseMillis</code> 设置期望达到的最大GC停顿时间指标（JVM会尽力实现，但不保证达到）。默认值是200ms（人的平均反应速度）</li><li><code>-XX:+ParallelGCThread</code> 设置STW工作线程数的值。最多设置为8（上面说过Parallel回收器的线程计算公式，当CPU_Count &gt; 8时，ParallelGCThreads 也会大于8）</li><li><code>-XX:ConcGCThreads</code> 设置并发标记的线程数。将n设置为并行垃圾回收线程数（ParallelGCThreads）的1/4左右。</li><li><code>-XX:InitiatingHeapOccupancyPercent</code> 设置触发并发GC周期的Java堆占用率阈值。超过此值，就触发GC。默认值是45。</li></ul><h3 id="g1收集器的常见操作步骤" tabindex="-1">G1收集器的常见操作步骤 <a class="header-anchor" href="#g1收集器的常见操作步骤" aria-label="Permalink to “G1收集器的常见操作步骤”">​</a></h3><p>G1的设计原则就是简化JVM性能调优，开发人员只需要简单的三步即可完成调优：</p><ul><li>第一步：开启G1垃圾收集器</li><li>第二步：设置堆的最大内存</li><li>第三步：设置最大的停顿时间</li></ul><p>G1中提供了三种垃圾回收模式：Young GC、Mixed GC和Full GC，在不同的条件下被触发。</p><h3 id="g1收集器的适用场景" tabindex="-1">G1收集器的适用场景 <a class="header-anchor" href="#g1收集器的适用场景" aria-label="Permalink to “G1收集器的适用场景”">​</a></h3><p>面向服务端应用，针对具有大内存、多处理器的机器。（在普通大小的堆里表现并不惊喜）</p><p>最主要的应用是需要低GC延迟，并具有大堆的应用程序提供解决方案；如：在堆大小约6GB或更大时，可预测的暂停时间可以低于0.5秒；（G1通过每次只清理一部分而不是全部的Region的增量式清理来保证每次GC停顿时间不会过长）。</p><p>用来替换掉JDK1.5中的CMS收集器；在下面的情况时，使用G1可能比CMS好：</p><ul><li>超过50%的Java堆被活动数据占用；</li><li>对象分配频率或年代提升频率变化很大；</li><li>GC停顿时间过长（长于0.5至1秒）</li></ul><p>HotSpot垃圾收集器里，除了G1以外，其他的垃圾收集器使用内置的JVM线程执行GC的多线程操作，而G1 GC可以采用应用线程承担后台运行的GC工作，即当JVM的GC线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程。</p><h3 id="分区region-化整为零" tabindex="-1">分区Region：化整为零 <a class="header-anchor" href="#分区region-化整为零" aria-label="Permalink to “分区Region：化整为零”">​</a></h3><p>使用G1收集器时，它将整个Java堆划分成约2048个大小相同的独立Region块，每个Region块大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且为2的N次幂，即1MB，2MB，4MB，8MB，16MB，32MB。可以通过<code>-XX:G1HeapRegionSize</code>设定。<span style="color:blue;">所有的Region大小相同，且在JVM生命周期内不会被改变。</span></p><p>虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。通过Region的动态分配方式实现逻辑上的连续。</p><p><img src="'+y+'" alt="image-20240515232452076"></p><p>一个region有可能属于Eden，Survivor或者Old/Tenured内存区域。但是一个region只可能属于一个角色。图中的E表示该region属于Eden内存区域，S表示属于survivor内存区域，O表示属于Old内存区域。图中空白的表示未使用的内存空间。</p><p>G1垃圾收集器还增加了一种新的内存区域，叫做Humongous内存区域，如图中的H块。主要用于存储大对象，如果超过1.5个region，就放到H。</p><div class="tip custom-block"><p class="custom-block-title">设置H的原因</p><p>对于堆中的对象，默认直接会被分配到老年代，但是如果它是一个短期存在的大对象就会对垃圾收集器造成负面影响。为了解决这个问题，G1划分了一个Humongous区，它用来专门存放大对象。<span style="color:blue;">如果一个H区装不下一个大对象，那么G1会寻找连续的H区来存储。</span>为了能找到连续的H区，有时候不得不启动Full GC。G1的大多数行为都把H区作为老年代的一部分来看待。</p></div><p>每个Region都是通过指针碰撞来分配空间</p><p><img src="'+F+'" alt="image-20240515233212024"></p><h3 id="g1垃圾回收器的回收过程" tabindex="-1">G1垃圾回收器的回收过程 <a class="header-anchor" href="#g1垃圾回收器的回收过程" aria-label="Permalink to “G1垃圾回收器的回收过程”">​</a></h3><p>G1GC的垃圾回收过程主要包括如下三个环节：</p><ul><li>年轻代GC（Young GC）</li><li>老年代并发标记过程（Concurrent Marking）</li><li>混合回收（Mixed GC）</li><li>（如果需要，单线程、独占式、高强度的Full GC还是继续存在的。它针对GC的评估失败提供了一种失败保护机制，即强力回收。）</li></ul><p><img src="'+u+'" alt="第17章_G1-GC垃圾回收过程"></p><p>顺时针，Young GC -&gt; Young GC + Concurrent mark -&gt; Mixed GC顺序，进行垃圾回收。</p><p>应用程序分配内存，当<span style="color:blue;">年轻代的Eden区用尽时开始年轻代回收过程；</span>G1的年轻代收集阶段是一个<span style="color:blue;">并行</span>的<span style="color:blue;">独占式</span>收集器。在年轻代回收期，G1 GC暂停所有应用程序线程，启动多线程执行年轻代回收。然后<span style="color:blue;">从年轻代区间移动存活对象到Survivor区间或者老年区间，也有可能是两个区间都会涉及。</span></p><p>当堆内存使用达到一定值（默认45%）时，开始老年代并发标记过程。</p><p>标记完成马上开始混合回收过程。对于一个混合回收期，G1 GC从老年区间移动存活对象到空闲区间，这些空闲区间也就成为了老年代的一部分。和年轻代不同，老年代的G1回收器和其他GC不同，<span style="color:blue;">G1的老年代回收器不需要整个老年代被回收，一次只需要扫描/回收一小部分老年代的Region就可以了。</span>同时，这个老年代Region是和年轻代一起被回收的。</p><p>举个例子：一个Web服务器，Java进程最大堆内存为4G，每分钟响应1500个请求，每45秒钟会新分配大约2G的内存。G1会每45秒钟进行一次年轻代回收，每31个小时整个堆的使用率会达到45%，会开始老年代并发标记过程，标记完成后开始四到五次的混合回收。</p><h3 id="remembered-set" tabindex="-1">Remembered Set <a class="header-anchor" href="#remembered-set" aria-label="Permalink to “Remembered Set”">​</a></h3><div class="warning custom-block"><p class="custom-block-title">疑问</p><p>一个对象被不同区域引用的问题</p><p>一个Region不可能是孤立的，一个Region中的对象可能被其他任意Region中对象引用，判断对象存活时，是否需要扫描整个Java堆才能保证准确？</p><p>在其他的分代收集器，也存在这样的问题（而G1更突出）回收新生代也不得不同时扫描老年代？</p><p>这样的话会降低Minor GC的效率；</p></div><p><strong>解决方法：</strong></p><p>无论G1还是其他分代收集器，JVM都是使用Remembered Set来避免全局扫描：</p><p><span style="color:blue;">每个Region都有一个对应的Remembered Set；</span></p><p>每次Reference类型数据写操作时，都会产生一个Write Barrier暂时中断操作；</p><p>然后检查将要写入的引用指向的对象是否和该Reference类型数据在不同的Region（其他收集器：检查老年代对象是否引用了新生代对象）；</p><p>如果不同，通过CardTable把相关引用信息记录到引用指向对象的所在Region对应的Remembered Set中；</p><p>当进行垃圾收集时，在GC根节点的枚举范围加入Remembered Set；就可以保证不进行全局扫描，也不会有遗漏。</p><p><img src="'+E+'" alt="image-20240515234823327"></p><h3 id="g1回收过程一-年轻代gc" tabindex="-1">G1回收过程一：年轻代GC <a class="header-anchor" href="#g1回收过程一-年轻代gc" aria-label="Permalink to “G1回收过程一：年轻代GC”">​</a></h3><p>JVM启动时，G1先准备好Eden区，程序在运行过程中不断创建对象到Eden区，当Eden空间耗尽时，G1会启动一次年轻代垃圾回收过程。</p><p><span style="color:blue;">年轻代垃圾回收只会回收Eden区和Survivor区。</span></p><p>首先G1停止应用程序的执行（Stop-The-World），G1创建回收集（Collection Set），回收集是指需要被回收的内存分段的集合，年轻代回收过程的回收集包含年轻代Eden区和Survivor区所有的内存分段。</p><p><img src="'+G+'" alt="image-20240515234220078"></p><p>然后开始如下回收过程：</p><ol><li><p><strong><span style="color:red;">第一阶段，扫描根。</span></strong></p><p>根是指static变量指向的对象，正在执行的方法调用链条上的局部变量等。根引用连同RSet记录的外部引用作为扫描存活对象的入口。</p></li><li><p><strong><span style="color:red;">第二阶段，更新RSet。</span></strong></p><p>处理dirty card queue（见备注）中的card，更新RSet。此阶段完成后，<span style="color:blue;">RSet可以准确的反映老年代对所在的内存分段中对象的引用。</span></p></li><li><p><strong><span style="color:red;">第三阶段，处理RSet。</span></strong></p><p>识别被老年代对象指向的Eden中的对象，这些被指向的Eden中的对象被认为是存活的对象。</p></li><li><p><strong><span style="color:red;">第四阶段，复制对象。</span></strong></p><p>此阶段，对象树被遍历，Eden区内存段中存活的对象会被复制到Survivor区中空的内存分段，Survivor区内存段中存活的对象如果年龄未达阈值，年龄会加1，达到阀值会被会被复制到Old区中空的内存分段。如果Survivor空间不够，Eden空间的部分数据会直接晋升到老年代空间。</p></li><li><p><strong><span style="color:red;">第五阶段，处理引用。</span></strong></p><p>处理Soft，Weak，Phantom，Final，JNI Weak 等引用。最终Eden空间的数据为空，GC停止工作，而目标内存中的对象都是连续存储的，没有碎片，所以复制过程可以达到内存整理的效果，减少碎片。</p></li></ol><h3 id="g1回收过程二-并发标记过程" tabindex="-1">G1回收过程二：并发标记过程 <a class="header-anchor" href="#g1回收过程二-并发标记过程" aria-label="Permalink to “G1回收过程二：并发标记过程”">​</a></h3><ol><li>**<span style="color:red;">初始标记阶段：</span>**标记从根节点直接可达的对象。这个阶段是STW的，并且会触发一次年轻代GC。</li><li>**<span style="color:red;">根区域扫描（Root Region Scanning）：</span>**G1 GC扫描Survivor区直接可达的老年代区域对象，并标记被引用的对象。这一过程必须在YoungGC之前完成。</li><li>**<span style="color:red;">并发标记（Concurrent Marking）：</span>**在整个堆中进行并发标记（和应用程序并发执行），此过程可能被YoungGC中断。在并发标记阶段，<span style="color:blue;">若发现区域对象中的所有对象都是垃圾，那这个区域会被立即回收。</span>同时，并发标记过程中，会计算每个区域的对象活性（区域中存活对象的比例）。</li><li>**<span style="color:red;">再次标记（Remark）：</span>**由于应用程序持续进行，需要修正上一次的标记结果。是STW的。G1中采用了比CMS更快的初始快照算法：snapshot-at-the-beginning（SATB）。</li><li>**<span style="color:red;">独占清理（cleanup，STW）：</span>**计算各个区域的存活对象和GC回收比例，并进行排序，识别可以混合回收的区域。为下阶段做铺垫。是STW的。这个阶段并不会实际上去做垃圾的收集</li><li>**<span style="color:red;">并发清理阶段：</span>**识别并清理完全空闲的区域。</li></ol><h3 id="g1回收过程三-混合回收" tabindex="-1">G1回收过程三：混合回收 <a class="header-anchor" href="#g1回收过程三-混合回收" aria-label="Permalink to “G1回收过程三：混合回收”">​</a></h3><p>当越来越多的对象晋升到老年代old region时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即Mixed GC，该算法并不是一个Old GC，除了回收整个Young Region，还会回收一部分的Old Region。这里需要注意：<span style="color:blue;">是一部分老年代，而不是全部老年代。</span>可以选择哪些Old Region进行收集，从而可以对垃圾回收的耗时时间进行控制。也要注意的是Mixed GC并不是Full GC。</p><p><img src="'+b+'" alt="image-20240516012326683"></p><p>并发标记结束以后，老年代中百分百为垃圾的内存分段被回收了，部分为垃圾的内存分段被计算了出来。默认情况下，这些老年代的内存分段会分8次（可以通过<code>-XX:G1MixedGCCountTarget</code>设置）被回收</p><p>混合回收的回收集（Collection Set）包括八分之一的老年代内存分段，Eden区内存分段，Survivor区内存分段。混合回收的算法和年轻代回收的算法完全一样，只是回收集多了老年代的内存分段。具体过程请参考上面的年轻代回收过程。</p><p>由于老年代中的内存分段默认分8次回收，G1会优先回收垃圾多的内存分段。<span style="color:blue;">垃圾占内存分段比例越高的，越会被先回收。</span>并且有一个阈值会决定内存分段是否被回收，<code>-XX:G1MixedGCLiveThresholdPercent</code>，默认为65%，意思是垃圾占内存分段比例要达到65%才会被回收。如果垃圾占比太低，意味着存活的对象占比高，在复制的时候会花费更多的时间。</p><p>混合回收并不一定要进行8次。有一个阈值<code>-XX:G1HeapWastePercent</code>，默认值为10%，意思是允许整个堆内存中有10%的空间被浪费，意味着如果发现可以回收的垃圾占堆内存的比例低于10%，则不再进行混合回收。因为GC会花费很多的时间但是回收到的内存却很少。</p><h3 id="g1回收可选的过程四-full-gc" tabindex="-1">G1回收可选的过程四：Full GC <a class="header-anchor" href="#g1回收可选的过程四-full-gc" aria-label="Permalink to “G1回收可选的过程四：Full GC”">​</a></h3><p>G1的初衷就是要避免Full GC的出现。但是如果上述方式不能正常工作，G1会<span style="color:blue;">停止应用程序的执行</span>（Stop-The-World），使用<span style="color:blue;">单线程</span>的内存回收算法进行垃圾回收，性能会非常差，应用程序停顿时间会很长。</p><p>要避免Full GC的发生，一旦发生需要进行调整。什么时候会发生Full GC呢？比如<span style="color:blue;">堆内存太小</span>，当G1在复制存活对象的时候没有空的内存分段可用，则会回退到Full GC，这种情况可以通过增大内存解决。</p><p>导致G1 Full GC的原因可能有两个：</p><ul><li>Evacuation的时候没有足够的to-space来存放晋升的对象；</li><li>并发处理过程完成之前空间耗尽。</li></ul><h3 id="补充" tabindex="-1">补充 <a class="header-anchor" href="#补充" aria-label="Permalink to “补充”">​</a></h3><p>从Oracle官方透露出来的信息可获知，回收阶段（Evacuation）其实本也有想过设计成与用户程序一起并发执行，但这件事情做起来比较复杂，考虑到G1只是回一部分Region，停顿时间是用户可控制的，所以并不迫切去实现，而<span style="color:blue;">选择把这个特性放到了G1之后出现的低延迟垃圾收集器（即ZGC）中</span>。另外，还考虑到G1不是仅仅面向低延迟，停顿用户线程能够最大幅度提高垃圾收集效率，为了保证吞吐量所以才选择了完全暂停用户线程的实现方案。</p><h3 id="g1回收器优化建议" tabindex="-1">G1回收器优化建议 <a class="header-anchor" href="#g1回收器优化建议" aria-label="Permalink to “G1回收器优化建议”">​</a></h3><p>年轻代大小</p><ul><li>避免使用<code>-Xmn</code>或<code>-XX:NewRatio</code>等相关选项显式设置年轻代大小</li><li>固定年轻代的大小会覆盖暂停时间目标</li></ul><p>暂停时间目标不要太过严苛</p><ul><li>G1 GC的吞吐量目标是90%的应用程序时间和10%的垃圾回收时间</li><li>评估G1 GC的吞吐量时，暂停时间目标不要太严苛。目标太过严苛表示你愿意承受更多的垃圾回收开销，而这些会直接影响到吞吐量。</li></ul><h2 id="垃圾回收器总结" tabindex="-1">垃圾回收器总结 <a class="header-anchor" href="#垃圾回收器总结" aria-label="Permalink to “垃圾回收器总结”">​</a></h2><h3 id="_7种经典垃圾回收器总结" tabindex="-1">7种经典垃圾回收器总结 <a class="header-anchor" href="#_7种经典垃圾回收器总结" aria-label="Permalink to “7种经典垃圾回收器总结”">​</a></h3><p>截止JDK1.8，一共有7款不同的垃圾收集器。每一款的垃圾收集器都有不同的特点，在具体使用的时候，需要根据具体的情况选用不同的垃圾收集器。</p><table tabindex="0"><thead><tr><th style="text-align:left;">垃圾收集器</th><th style="text-align:left;">分类</th><th style="text-align:left;">作用位置</th><th style="text-align:left;">使用算法</th><th style="text-align:left;">特点</th><th style="text-align:left;">适用场景</th></tr></thead><tbody><tr><td style="text-align:left;">Serial</td><td style="text-align:left;">串行运行</td><td style="text-align:left;">作用于新生代</td><td style="text-align:left;">复制算法</td><td style="text-align:left;">响应速度优先</td><td style="text-align:left;">适用于单CPU环境下的client模式</td></tr><tr><td style="text-align:left;">ParNew</td><td style="text-align:left;">并行运行</td><td style="text-align:left;">作用于新生代</td><td style="text-align:left;">复制算法</td><td style="text-align:left;">响应速度优先</td><td style="text-align:left;">多CPU环境Server模式下与CMS配合使用</td></tr><tr><td style="text-align:left;">Parallel</td><td style="text-align:left;">并行运行</td><td style="text-align:left;">作用于新生代</td><td style="text-align:left;">复制算法</td><td style="text-align:left;">吞吐量优先</td><td style="text-align:left;">适用于后台运算而不需要太多交互的场景</td></tr><tr><td style="text-align:left;">Serial Old</td><td style="text-align:left;">串行运行</td><td style="text-align:left;">作用于老年代</td><td style="text-align:left;">标记-压缩算法</td><td style="text-align:left;">响应速度优先</td><td style="text-align:left;">适用于单CPU环境下的Client模式</td></tr><tr><td style="text-align:left;">Parallel Old</td><td style="text-align:left;">并行运行</td><td style="text-align:left;">作用于老年代</td><td style="text-align:left;">标记-压缩算法</td><td style="text-align:left;">吞吐量优先</td><td style="text-align:left;">适用于后台运算而不需要太多交互的场景</td></tr><tr><td style="text-align:left;">CMS</td><td style="text-align:left;">并发运行</td><td style="text-align:left;">作用于老年代</td><td style="text-align:left;">标记-清除算法</td><td style="text-align:left;">响应速度优先</td><td style="text-align:left;">适用于互联网或B／S业务</td></tr><tr><td style="text-align:left;">G1</td><td style="text-align:left;">并发、并行运行</td><td style="text-align:left;">作用于新生代、老年代</td><td style="text-align:left;">标记-压缩算法、复制算法</td><td style="text-align:left;">响应速度优先</td><td style="text-align:left;">面向服务端应用</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">GC发展阶段</p><p>Serial =&gt; Parallel（并行）=&gt; CMS（并发）=&gt; G1 =&gt; ZGC</p></div><h3 id="垃圾回收器组合" tabindex="-1">垃圾回收器组合 <a class="header-anchor" href="#垃圾回收器组合" aria-label="Permalink to “垃圾回收器组合”">​</a></h3><p>不同厂商、不同版本的虚拟机实现差距比较大。HotSpot虚拟机在JDK7/8后所有收集器及组合如下图</p><p><img src="'+S+`" alt="image-20240516154200971"></p><ol><li>两个收集器间有连线，表明它们可以搭配使用：Serial/Serial Old、Serial/CMS、ParNew/Serial Old、ParNew/CMS、Parallel Scavenge/Serial Old、Parallel Scavenge/Parallel Old、G1;</li><li>其中Serial Old作为CMS出现＂<code>Concurrent Mode Failure</code>＂失败的后备预案。</li><li>（红色虚线）由于维护和兼容性测试的成本，在JDK 8时将Serial＋CMS、ParNew＋Serial old这两个组合声明为Deprecated（JEP 173），并在JDK 9中 完全取消了这些组合的支持（JEP214），即：移除。</li><li>（绿色虚线）JDK 14中：弃用ParallelScavenge和SeriaOold GC组合(JEP 366)</li><li>（绿色虚框）JDK 14中：删除CMS垃圾回收器（JEP 363）</li></ol><h3 id="怎么选择垃圾回收器" tabindex="-1">怎么选择垃圾回收器 <a class="header-anchor" href="#怎么选择垃圾回收器" aria-label="Permalink to “怎么选择垃圾回收器”">​</a></h3><p>Java垃圾收集器的配置对于JVM优化来说是一个很重要的选择，选择合适的垃圾收集器可以让JVM的性能有一个很大的提升。</p><p>怎么选择垃圾收集器？</p><ol><li>优先调整堆的大小让JVM自适应完成。</li><li>如果内存小于100M，使用串行收集器</li><li>如果是单核、单机程序，并且没有停顿时间的要求，串行收集器</li><li>如果是多CPU、需要高吞吐量、允许停顿时间超过1秒，选择并行或者JVM自己选择</li><li>如果是多CPU、追求低停顿时间，需快速响应（比如延迟不能超过1秒，如互联网应用），使用并发收集器 官方推荐G1，性能高。<span style="color:red;">现在互联网的项目，基本都是使用G1。</span></li></ol><p><strong>最后需要明确一个观点：</strong></p><ol><li>没有最好的收集器，更没有万能的收集</li><li>调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器</li></ol><p><strong>面试</strong></p><p>对于垃圾收集，面试官可以循序渐进从理论、实践各种角度深入，也未必是要求面试者什么都懂。但如果你懂得原理，一定会成为面试中的加分项。 这里较通用、基础性的部分如下：</p><ul><li>垃圾收集的算法有哪些？如何判断一个对象是否可以回收？</li><li>垃圾收集器工作的基本流程。</li></ul><p>另外，大家需要多关注垃圾回收器这一章的各种常用的参数</p><h2 id="gc日志分析" tabindex="-1">GC日志分析 <a class="header-anchor" href="#gc日志分析" aria-label="Permalink to “GC日志分析”">​</a></h2><p>通过阅读GC日志，我们可以了解Java虚拟机内存分配与回收策略。 内存分配与垃圾回收的参数列表</p><ul><li><code>-XX:+PrintGC</code> 输出GC日志。类似：<code>-verbose:gc</code></li><li><code>-XX:+PrintGCDetails</code> 输出GC的详细日志</li><li><code>-XX:+PrintGCTimestamps</code> 输出GC的时间戳（以基准时间的形式）</li><li><code>-XX:+PrintGCDatestamps</code> 输出GcC的时间戳（以日期的形式，如2013-05-04T21：53：59.234+0800）</li><li><code>-XX:+PrintHeapAtGC</code> 在进行GC的前后打印出堆的信息</li><li><code>-Xloggc:../logs/gc.log</code> 日志文件的输出路径</li></ul><h3><span style="color:orange;">-verbose:gc</span></h3><p>这个只会显示总的GC堆的变化，如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[GC (Allocation Failure) 80832K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">19298K(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">227840</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K),0.0084018 secs]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[GC (Metadata GC Threshold) 109499K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">21465K(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">228352</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K),0.0184066 secs]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Full GC (Metadata GC Threshold) 21465K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">16716K(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">201728</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K),0.0619261 secs]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 参数解析</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GC、Full</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GC：GC的类型，GC只在新生代上进行，Full</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GC包括永生代，新生代，老年代。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Allocation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Failure：GC发生的原因。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">80832K-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">19298K：堆在GC前的大小和GC后的大小。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">228840k：现在的堆大小。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0.0084018</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secs：GC持续的时间。</span></span></code></pre></div><h3><span style="color:orange;">-verbose:gc -XX:+PrintGCDetails</span></h3><p>输入信息如下</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[GC (Allocation Failure) [PSYoungGen:70640K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">10116K(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">141312</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K)] 80541K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">20017K(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">227328</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K),0.0172573 secs] [Times:user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.03</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">0.00,real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.02</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secs]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[GC (Metadata GC Threshold) [PSYoungGen:98859K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">8154K(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">142336</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K)] 108760K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">21261K(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">228352</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K),0.0151573 secs] [Times:user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">0.01,real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.02</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secs]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Full GC (Metadata GC Threshold)[PSYoungGen:8154K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">0K(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">142336</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ParOldGen:13107K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">16809K(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">62464</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K)] 21261K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">16809K(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">204800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K),[Metaspace:20599K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">20599K(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1067008</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K)],0.0639732 secs]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Times:user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">0.00,real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.06</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secs]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 参数解析</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GC，Full</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FC：同样是GC的类型</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Allocation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Failure：GC原因</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PSYoungGen：使用了Parallel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Scavenge并行垃圾收集器的新生代GC前后大小的变化</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParOldGen：使用了Parallel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Old并行垃圾收集器的老年代GC前后大小的变化</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Metaspace：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 元数据区GC前后大小的变化，JDK1.8中引入了元数据区以替代永久代</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xxx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secs：指GC花费的时间</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Times：user：指的是垃圾收集器花费的所有CPU时间，sys：花费在等待系统调用或系统事件的时间，real：GC从开始到结束的时间，包括其他进程占用时间片的实际时间。</span></span></code></pre></div><h3><span style="color:orange;">-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimestamps -XX:+PrintGCDatestamps</span></h3><p>输入信息如下</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2019-09-24T22:15:24.518+0800:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3.287:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [GC (Allocation </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Failure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) [PSYoungGen:136162K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">5113K(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">136192</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K)] 141425K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">17632K(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">222208K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),0.0248249 secs] [Times:user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">0.00,real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.03</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secs]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2019-09-24T22:15:25.559+0800:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4.329:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [GC (Metadata </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">GC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Threshold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) [PSYoungGen:97578K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">10068K(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">274944</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K)] 110096K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">22658K(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">360960K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),0.0094071 secs] [Times: user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">0.00,real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secs]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2019-09-24T22:15:25.569+0800:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4.338:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [Full </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">GC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Metadata </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">GC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Threshold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) [PSYoungGen:10068K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">0K(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">274944</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K)][ParoldGen:12590K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">13564K(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">56320</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K)] 22658K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">13564K(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">331264K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),[Metaspace:20590K-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">20590K(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1067008</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K)],0.0494875 secs] [Times: user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">0.02,real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secs]</span></span></code></pre></div><p>说明：带上了日期和实践</p><p>如果想把GC日志存到文件的话，是下面的参数：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xloggc:/path/to/gc.log</span></span></code></pre></div><details class="details custom-block"><summary>日志补充说明</summary><ul><li>&quot;[GC&quot;和&quot;[Full GC&quot;说明了这次垃圾收集的停顿类型，如果有&quot;Full&quot;则说明GC发生了&quot;Stop The World&quot;</li><li>使用Serial收集器在新生代的名字是Default New Generation，因此显示的是&quot;[DefNew&quot;</li><li>使用ParNew收集器在新生代的名字会变成&quot;[ParNew&quot;，意思是&quot;Parallel New Generation&quot;</li><li>使用Parallel Scavenge收集器在新生代的名字是”[PSYoungGen&quot;</li><li>老年代的收集和新生代道理一样，名字也是收集器决定的</li><li>使用G1收集器的话，会显示为&quot;garbage-first heap&quot;</li><li>Allocation Failure<br> 表明本次引起GC的原因是因为在年轻代中没有足够的空间能够存储新的数据了。</li><li>[PSYoungGen：5986K-&gt;696K(8704K) ] 5986K-&gt;704K(9216K)<br> 中括号内：GC回收前年轻代大小，回收后大小，（年轻代总大小）<br> 括号外：GC回收前年轻代和老年代大小，回收后大小，（年轻代和老年代总大小）</li><li>user代表用户态回收耗时，sys内核态回收耗时，rea实际耗时。由于多核的原因，时间总和可能会超过real时间</li></ul></details><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Heap（堆）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PSYoungGen（Parallel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Scavenge收集器新生代）total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9216K，used</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 6234K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [0x00000000ff600000,0x0000000100000000,0x0000000100000000)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eden</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> space（堆中的Eden区默认占比是8）8192K，768</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> used</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [0x00000000ff600000,0x00000000ffc16b08,0x00000000ffe00000)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> space（堆中的Survivor，这里是From</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Survivor区默认占比是1）1024K，</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0%</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> used</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [0x00000000fff00000,0x00000000fff00000,0x0000000100000000)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> space（堆中的Survivor，这里是to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Survivor区默认占比是1，需要先了解一下堆的分配策略）1024K,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0%</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> used</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [0x00000000ffe00000,0x00000000ffe00000,0x00000000fff00000)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                                         </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParOldGen（老年代总大小和使用大小）total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10240K，</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> used</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 7001K</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ［0x00000000fec00000,0x00000000ff600000,0x00000000ff600000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">object</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> space（显示个使用百分比）10240K，688</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> used</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [0x00000000fec00000,0x00000000ff2d6630,0x00000000ff600000)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PSPermGen（永久代总大小和使用大小）total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 21504K，</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> used</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4949K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [0x00000000f9a00000,0x00000000faf00000,0x00000000fec00000)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">object</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> space（显示个使用百分比，自己能算出来）21504K，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 238</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> used</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [0x00000000f9a00000,0x00000000f9ed55e0,0x00000000faf00000)</span></span></code></pre></div><h3 id="minor-gc日志" tabindex="-1">Minor GC日志 <a class="header-anchor" href="#minor-gc日志" aria-label="Permalink to “Minor GC日志”">​</a></h3><p><img src="`+f+'" alt="image-20240516171946016"></p><h3 id="full-gc日志" tabindex="-1">Full GC日志 <a class="header-anchor" href="#full-gc日志" aria-label="Permalink to “Full GC日志”">​</a></h3><p><img src="'+M+'" alt="image-20240516172104589"></p><p>可以用一些工具去分析这些GC日志</p><p>常用的日志分析工具有：GCViewer、GCEasy、GCHisto、GCLogViewer、Hpjmeter、garbagecat等</p><h2 id="垃圾回收器的新发展" tabindex="-1">垃圾回收器的新发展 <a class="header-anchor" href="#垃圾回收器的新发展" aria-label="Permalink to “垃圾回收器的新发展”">​</a></h2><p>GC仍然处于飞速发展之中，目前的默认选项<span style="color:blue;">G1 GC在不断的进行改进</span>，很多我们原来认为的缺点，例如串行的FullGC、Card Table扫描的低效等，都已经被大幅改进，例如，JDK10以后，Full GC已经是并行运行，在很多场景下，其表现还略优于Parallel GC的并行Full GC实现。</p><p>即使是Serial GC，虽然比较古老，但是简单的设计和实现未必就是过时的，它本身的开销，不管是GC相关数据结构的开销，还是线程的开销，都是非常小的，所以随着云计算的兴起，<span style="color:blue;">在Serverless等新的应用场景下，Serial GC找到了新的舞台。</span></p><p>比较不幸的是CMS GC，因为其算法的理论缺陷等原因，虽然现在还有非常大的用户群体，但在JDK9中已经被标记为废弃，并在JDK14版本中移除</p><h3 id="jdk11新特性" tabindex="-1">JDK11新特性 <a class="header-anchor" href="#jdk11新特性" aria-label="Permalink to “JDK11新特性”">​</a></h3><p>Epsilon:A No-Op GarbageCollector（Epsilon垃圾回收器，&quot;No-Op（无操作）&quot;回收器） <a href="http://openidk.iava.net/jeps/318" target="_blank" rel="noreferrer">http://openidk.iava.net/jeps/318</a></p><p>ZGC:A Scalable Low-Latency Garbage Collector（Experimental）（ZGC：可伸缩的低延迟垃圾回收器，处于实验性阶段）<a href="http://openidk.iava.net/jeps/318" target="_blank" rel="noreferrer">http://openidk.iava.net/jeps/333</a></p><p><img src="'+B+'" alt="image-20240517141313786"></p><p>现在G1回收器已成为默认回收器好几年了。</p><p>我们还看到了引入了两个新的收集器：ZGC（JDK11出现）和Shenandoah（Open JDK12）。主打特点：低停顿时间</p><h3 id="open-jdk12的shenandoash-gc" tabindex="-1">Open JDK12的Shenandoash GC <a class="header-anchor" href="#open-jdk12的shenandoash-gc" aria-label="Permalink to “Open JDK12的Shenandoash GC”">​</a></h3><p><span style="background-color:orange;font-weight:bold;">Open JDK12的Shenandoash GC：低停顿时间的GC（实验性）</span></p><p><span style="color:blue;">Shenandoah，无疑是众多GC中最孤独的一个。</span>是第一款不由Oracle公司团队领导开发的Hotspot垃圾收集器。不可避免的<span style="color:blue;">受到官方的排挤。</span>比如号称OpenJDK和OracleJDK没有区别的Oracle公司仍拒绝在OracleJDK12中支持Shenandoah。</p><p>Shenandoah垃圾回收器最初由RedHat进行的一项垃圾收集器研究项目Pauseless GC的实现，<span style="color:blue;">旨在针对JVM上的内存回收实现低停顿的需求。</span>在2014年贡献给OpenJDK。</p><p>Red Hat研发Shenandoah团队对外宣称，<span style="color:blue;">Shenandoah垃圾回收器的暂停时间与堆大小无关，这意味着无论将堆设置为200MB还是200GB，99.9%的目标都可以把垃圾收集的停顿时间限制在十毫秒以内。</span>不过实际使用性能将取决于实际工作堆的大小和工作负载。</p><p><img src="'+P+'" alt="image-20240517142315748"></p><p>这是RedHat在2016年发表的论文数据，测试内容是使用Es对200GB的维基百科数据进行索引。从结果看：</p><ul><li>停顿时间比其他几款收集器确实有了质的飞跃，但也未实现最大停顿时间控制在十毫秒以内的目标。</li><li>而吞吐量方面出现了明显的下降，总运行时间是所有测试收集器里最长的。</li></ul><p>总结</p><ul><li><strong>Shenandoah GC的弱项：高运行负担下的吞吐量下降。</strong></li><li><strong>Shenandoah GC的强项：低延迟时间。</strong></li></ul><h3 id="令人震惊、革命性的zgc" tabindex="-1">令人震惊、革命性的ZGC <a class="header-anchor" href="#令人震惊、革命性的zgc" aria-label="Permalink to “令人震惊、革命性的ZGC”">​</a></h3><p>官方地址：<a href="https://docs.oracle.com/en/java/javase/12/gctuning/" target="_blank" rel="noreferrer">https://docs.oracle.com/en/java/javase/12/gctuning/</a></p><p>ZGC与Shenandoah目标高度相似，<span style="color:blue;">在尽可能对吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停颇时间限制在十毫秒以内的低延迟。</span></p><p>《深入理解Java虚拟机》一书中这样定义ZGC：ZGC收集器是一款基于Region内存布局的，（暂时）不设分代的，使用了读屏障、染色指针和内存多重映射等技术来实现<span style="color:blue;">可并发的标记-压缩算法</span>的，以<span style="color:blue;">低延迟为首要目标</span>的一款垃圾收集器。</p><p>ZGC的工作过程可以分为4个阶段：<span style="color:blue;">并发标记-并发预备重分配-并发重分配-并发重映射</span>等。</p><p>ZGC几乎在所有地方并发执行的，除了<span style="color:blue;">初始标记的是STW</span>的。所以停顿时间几乎就耗费在初始标记上，这部分的实际时间是非常少的。</p><p>测试数据：</p><p><img src="'+x+'" alt=""></p><p><img src="'+H+'" alt="image-20240517143630437"></p><p>在ZGC的强项停顿时间测试上，它毫不留情的将Parallel、G1拉开了两个数量级的差距。无论平均停顿、95％停顿、99％停顿、99.9％停顿，还是最大停顿时间，ZGC都能毫不费劲控制在10毫秒以内。</p><p>虽然ZGC还在试验状态，没有完成所有特性，但此时性能已经相当亮眼，用“令人震惊、革命性”来形容，不为过。 <span style="color:blue;">未来将在服务端、大内存、低延迟应用的首选垃圾收集器。</span></p>',201);function U(N,j,q,W,z,I){return t(),l("div",null,[_,a("ul",null,[D,w,a("li",null,[L,X,a("mjx-container",K,[(t(),l("svg",Z,O)),A])]),R]),V])}const a2=e(v,[["render",U]]);export{$ as __pageData,a2 as default};
