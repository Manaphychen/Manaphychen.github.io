import{_ as t}from"./chunks/ArticleMetadata.H12JcJLK.js";import{_ as k,E as e,c as r,o as n,j as p,I as d,aj as g,w as y,b as o,e as A,a as c}from"./chunks/framework._AF764y6.js";const C="/assets/1710664440786_Wj8QRLO9IY.CxUOdu20.png",D="/assets/1710666355106_oCUMQjWit2.CLm_ZWYA.png",F="/assets/1710669560449_4wi3yTGdX4.B_c9B_c5.png",B="/assets/1710669684198_Ix9IwEnfmD.B-7UJuyq.png",u="/assets/1710670189587_KMsXnz9yCu.DGBCzwCH.png",E="/assets/1710687610528_hx0IymLkEh.B5Tu51mg.jpg",m="/assets/1710688084213_0ohaydO4cb.DPaN0n3F.png",v="/assets/1710917887334_0lTje3e7lk.w1TJEFyC.png",b="/assets/1710687949127_Xj2rGCkRMH.CCQSpgIr.jpg",G="/assets/1710922628830_lMQ1rZ48Xp.Dt5tXQrU.png",M="/assets/1710922767051_pVPFU4V0gA.CViBKYRk.png",K=JSON.parse('{"title":"堆","description":"","frontmatter":{"title":"堆","date":"2024-03-14T21:55:32.000Z","permalink":"/jvm/heap/","categories":["后端","JVM虚拟机","JVM内存"],"tags":[null],"author":"Manaphy"},"headers":[],"relativePath":"jvm/01.JVM内存/04.堆.md","filePath":"jvm/01.JVM内存/04.堆.md","lastUpdated":1744301414000}'),x={name:"jvm/01.JVM内存/04.堆.md"},X=p("h1",{id:"堆",tabindex:"-1"},[c("堆 "),p("a",{class:"header-anchor",href:"#堆","aria-label":"Permalink to “堆”"},"​")],-1),j=g('<h2 id="堆的核心概述" tabindex="-1">堆的核心概述 <a class="header-anchor" href="#堆的核心概述" aria-label="Permalink to “堆的核心概述”">​</a></h2><p>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。</p><p>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM管理的最大一块内存空间。</p><ul><li>堆内存的大小是可以调节的。</li></ul><p>《Java虚拟机规范》规定，堆可以处于<span style="color:red;">物理上不连续</span>的内存空间中，但在<span style="color:red;">逻辑上</span>它应该被视为<span style="color:red;">连续</span>的。</p><p>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区(Thread Local Allocation Buffer, TLAB)。</p><p>《Java虚拟机规范》中对Java堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。(The heap is the run-time data area from which memory for all class instances and arrays is allocated)</p><ul><li>我要说的是：“几乎”所有的对象实例都在这里分配内存。----&gt;从实际使用角度看的。</li></ul><p>数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。</p><p>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。</p><p>堆，是GC(Garbage Collection，垃圾收集器)执行垃圾回收的重点区域。</p><p><strong>现代垃圾收集器大部分都基于分代收集理论设计，堆空间细分为：</strong></p><img src="'+C+'" alt="image-20240317163348874"><h3 id="堆空间内部结构-jdk8" tabindex="-1">堆空间内部结构(JDK8) <a class="header-anchor" href="#堆空间内部结构-jdk8" aria-label="Permalink to “堆空间内部结构(JDK8)”">​</a></h3><img src="'+D+`" alt="image-20240317170545595"><h2 id="设置堆内存大小与oom" tabindex="-1">设置堆内存大小与OOM <a class="header-anchor" href="#设置堆内存大小与oom" aria-label="Permalink to “设置堆内存大小与OOM”">​</a></h2><h3 id="堆空间大小设置" tabindex="-1">堆空间大小设置 <a class="header-anchor" href="#堆空间大小设置" aria-label="Permalink to “堆空间大小设置”">​</a></h3><p>Java堆区用于存储Java对象实例，那么堆的大小在JVM启动时就已经设定好了，大家可以通过选项&quot;-Xmx&quot;和&quot;-Xms&quot;来进行设置。</p><ul><li>&quot;-Xms&quot;(memory start的缩写)用于表示堆区的起始内存，等价于-XX:InitialHeapSize</li><li>&quot;-Xmx&quot;则用于表示堆区的最大内存，等价于-XX:MaxHeapSize</li></ul><p>一旦堆区中的内存大小超过&quot;-Xmx&quot;所指定的最大内存时，将会抛出OutOfMemoryError异常。</p><p>通常会将<code>-Xms</code>和<code>-Xmx</code>两个参数配置相同的值，<span style="color:red;">其目的是为了能够在java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能。</span></p><p>默认情况下，初始内存大小：物理电脑内存大小/64; 最大内存大小：物理电脑内存大小/4</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 1. 设置堆空间大小的参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * -Xms 用来设置堆空间(年轻代+老年代)的初始内存大小</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *      -X 是jvm的运行参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *      ms 是memory start</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * -Xmx 用来设置堆空间(年轻代+老年代)的最大内存大小</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 3. 手动设置: -Xms600M -Xmx600M</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 4. 查看设置的参数: 方式一: jps / jstat -gc pid</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *                  方式二: -XX:+PrintGCDetails</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> HeapSpaceInitial</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 返回Java虚拟机中的堆内存总量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> initialMemory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Runtime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getRuntime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">totalMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 返回Java虚拟机试图使用的最大堆内存量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> maxMemory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Runtime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getRuntime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">maxMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-Xms:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> initialMemory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;M&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// -Xms:245M</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-XmX:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> maxMemory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;M&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// -XmX:3641M</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        //try {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        //    TimeUnit.HOURS.sleep(1);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        //} catch (InterruptedException e) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        //    throw new RuntimeException(e);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        //}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        //System.out.println(&quot;系统内存大小为:&quot; + initialMemory * 64.0 / 1024 + &quot;G&quot;);// 15.3125G</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        //System.out.println(&quot;系统内存大小为:&quot; + maxMemory * 4.0 / 1024 + &quot;G&quot;);// 14.22265625G</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>查看设置的参数:</strong></p><p>方式一: <code>jps / jstat -gc pid</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> % jstat -gc 57799</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    S0C</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">         S1C</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">         S0U</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">         S1U</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          EC</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">           EU</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">           OC</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">           OU</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          MC</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">         MU</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">       CCSC</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      CCSU</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     YGC</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     YGCT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     FGC</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    FGCT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     CGC</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    CGCT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">       GCT</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    25600.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">     25600.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">         0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">         0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">     153600.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">       6144.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">     409600.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">     4480.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      800.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">     384.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      77.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">     0.000</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">     0.000</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">         -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">     0.000</span></span></code></pre></div><p>方式二: <code>-XX:+PrintGCDetails</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>Heap</span></span>
<span class="line"><span> PSYoungGen      total 179200K, used 9216K [0x00000007b3800000, 0x00000007c0000000, 0x00000007c0000000)</span></span>
<span class="line"><span>  eden space 153600K, 6% used [0x00000007b3800000,0x00000007b41001a0,0x00000007bce00000)</span></span>
<span class="line"><span>  from space 25600K, 0% used [0x00000007be700000,0x00000007be700000,0x00000007c0000000)</span></span>
<span class="line"><span>  to   space 25600K, 0% used [0x00000007bce00000,0x00000007bce00000,0x00000007be700000)</span></span>
<span class="line"><span> ParOldGen       total 409600K, used 0K [0x000000079a800000, 0x00000007b3800000, 0x00000007b3800000)</span></span>
<span class="line"><span>  object space 409600K, 0% used [0x000000079a800000,0x000000079a800000,0x00000007b3800000)</span></span>
<span class="line"><span> Metaspace       used 3339K, capacity 4564K, committed 4864K, reserved 1056768K</span></span>
<span class="line"><span>  class space    used 357K, capacity 388K, committed 512K, reserved 1048576K</span></span></code></pre></div><h3 id="outofmemory举例" tabindex="-1">OutOfMemory举例 <a class="header-anchor" href="#outofmemory举例" aria-label="Permalink to “OutOfMemory举例”">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 设置 -Xms600M -Xmx600M</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> OOMTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        List</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Picture</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Picture</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">nextInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Picture</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pixels;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Picture</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.pixels </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[length];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Exception in thread </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> java.lang.OutOfMemoryError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Java heap space</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	at Picture.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">init</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(OOMTest.java</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">29</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	at OOMTest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(OOMTest.java</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><img src="`+F+'" alt="image-20240317175409942"><h2 id="年轻代与老年代" tabindex="-1">年轻代与老年代 <a class="header-anchor" href="#年轻代与老年代" aria-label="Permalink to “年轻代与老年代”">​</a></h2><p>存储在JVM中的Java对象可以被划分为两类：</p><ul><li>一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速</li><li>另外一类对象的生命周期却非常长，在某些极端的情况下还能够与JVM的生命周期保持一致。</li></ul><p>Java堆区进一步细分的话，可以划分为年轻代(YoungGen)和老年代(OldGen)</p><p>其中年轻代又可以划分为Eden空间、Survivor0空间和Survivor1空间 (有时也叫做from区、to区)</p><img src="'+B+'"><p><strong>配置新生代与老年代在堆结构的占比</strong></p><ul><li>默认-XX:NewRatio=2,表示新生代占1,老年代占2,新生代占整个堆的1/3</li><li>可以修改-XX:NewRatio=4,表示新生代占1,老年代占4,新生代占整个堆的1/5</li></ul><p>在HotSpot中，Eden空间和另外两个Survivor空间缺省所占的比例是8:1:1</p><p>当然开发人员可以通过选项<code>-XX:SurvivorRatio</code>调整这个空间比例。比如<code>-XX:SurvivorRatio=8</code></p><p><span style="color:red;">几乎所有</span>的Java对象都是在Eden区被new出来的。</p><p>绝大部分的Java对象的销毁都在新生代进行了。</p><p>可以使用选项<code>-Xmn</code>设置新生代最大内存大小 (这个参数一般使用默认值就可以了。)</p><img src="'+u+'"><h2 id="图解对象分配过程" tabindex="-1">图解对象分配过程 <a class="header-anchor" href="#图解对象分配过程" aria-label="Permalink to “图解对象分配过程”">​</a></h2><p>::: theorem 概述</p><p>为新对象分配内有是一件非常严谨和复杂的任务，JVM的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑GC执行完内存回收后是否会在内存空间中产生内存碎片。</p><p>:::</p><ol><li>new的对象先放伊甸园区。此区有大小限制。</li><li>当伊甸园的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收(Minor GC)，将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区。</li><li>然后将伊甸园中的剩余对象移动到幸存者0区。</li><li>如果再次触发垃圾回收，此时上次幸存下来的放到幸存者0区的，如果没有回收，就会放到幸存者1区。</li><li>如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区。</li><li>啥时候能去养老区呢?可以设置次数。默认是15次。 <ul><li><span style="color:red;">可以设置参数: <code>-XX:MaxTenuringThreshold=&lt;N&gt;</code>进行设置。</span></li></ul></li></ol><img src="'+E+'"><p>::: theorem 总结</p><p><span style="color:red;">针对幸存者s0,s1区的总结：复制之后有交换，谁空谁是to</span></p><p><span style="color:red;">关于垃圾回收：频繁在新生区收集，很少在养老区收集，几乎不在永久区/元空间收集。</span></p><p>:::</p><img src="'+m+'"><h3 id="常用调优工具" tabindex="-1">常用调优工具 <a class="header-anchor" href="#常用调优工具" aria-label="Permalink to “常用调优工具”">​</a></h3><ul><li>JDK命令行</li><li>Eclipse:Memory Analyzer Tool</li><li>Jconsole</li><li>VisualVM</li><li>Jprofiler</li><li>Java Flight Recorder</li><li>GCViewer</li><li>GC Easy</li></ul><h2 id="minor-gc、major-gc、full-gc" tabindex="-1">Minor GC、Major GC、Full GC <a class="header-anchor" href="#minor-gc、major-gc、full-gc" aria-label="Permalink to “Minor GC、Major GC、Full GC”">​</a></h2><p>JVM在进行GC时，并非每次都对上面三个内存(新生代、老年代；方法区)区域一起回收的，大部分时候回收的都是指新生代。</p><p>针对HotSpot VM的实现，它里面的GC按照回收区域又分为两大种类型：一种是部分收集(Partial GC)，一种是整堆收集(Full GC)</p><ul><li><p>部分收集：不是完整收集整个Java堆的垃圾收集。其中又分为</p><ul><li><p>新生代收集(Minor GC / Young GC)：只是新生代的垃圾收集</p></li><li><p>老年代收集(Major GC / Old GC)：只是老年代的垃圾收集</p><p>目前，只有CMS GC会有单独收集老年代的行为。</p></li></ul></li><li><p>混合收集(Mixed GC)：收集整个新生代以及部分老年代的垃圾收集。</p><p>目前，只有G1 GC会有这种行为</p></li><li><p>整堆收集(Full GC)：收集整个java堆和方法区的垃圾收集。</p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>很多时候Major GC会和Full GC混淆使用，需要具体分辨是老年代回收还是整堆回收。</p></div><h3 id="最简单的分代式gc策略的触发条件" tabindex="-1">最简单的分代式GC策略的触发条件 <a class="header-anchor" href="#最简单的分代式gc策略的触发条件" aria-label="Permalink to “最简单的分代式GC策略的触发条件”">​</a></h3><p><strong>年轻代GC(Minor GC)触发机制</strong></p><p>当年轻代空间不足时，就会触发Minor GC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC。（每次 Minor GC 会清理年轻代的内存。）</p><p>因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。</p><p>Minor GC会引发STW(stop-the-world)，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行。</p><p><strong>老年代GC(Major GC/Full GC)触发机制:</strong></p><p>指发生在老年代的GC，对象从老年代消失时，我们说&quot;Major GC&quot;或&quot;Full GC&quot;发生了。</p><p>出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程）。</p><ul><li>也就是在老年代空间不足时，会先尝试触发Minor GC。如果之后空间还不足， 则触发Major GC。</li></ul><p>Major GC的速度一般会比Minor GC慢10倍以上，STW的时间更长。</p><p>如果Major GC后，内存还不足，就报OOM了。</p><p><strong>Full GC触发机制</strong></p><p>触发Full GC执行的情况有如下五种</p><ol><li>调用<code>System.gc()</code>时，系统建议执行Full GC，但是不必然执行</li><li>老年代空间不足</li><li>方法区空间不足</li><li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存</li><li>由Eden区、survivor space0(From Space)区向survivor space1(To Space)区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</li></ol><p>说明: <span style="color:red;">full gc是开发或调优中尽量要避免的。这样暂停时间会短一些。</span></p><h2 id="堆空间分代思想" tabindex="-1">堆空间分代思想 <a class="header-anchor" href="#堆空间分代思想" aria-label="Permalink to “堆空间分代思想”">​</a></h2><p><span style="color:red;"><strong>为什么需要把Java堆分代？不分代就不能正常工作了吗？</strong></span></p><p>经研究，不同对象的生命周期不同。70%-99%的对象是临时对象。</p><ul><li><p>新生代：有Eden、两块大小相同的Survivor（又称from/to,s0/s1）构成，to总为空。</p></li><li><p>老年代：存放新生代中经历多次GC仍然存活的对象。</p></li></ul><p>其实不分代完全可以，分代的唯一理由就是优化GC性能。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描。而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方，当GC的时候先把这块存储“朝生夕死”对象的区域进行回收，这样就会腾出很大的空间出来。</p><h2 id="内存分配策略" tabindex="-1">内存分配策略 <a class="header-anchor" href="#内存分配策略" aria-label="Permalink to “内存分配策略”">​</a></h2><blockquote><p>或对象(Promotion)规则</p></blockquote><p>如果对象在Eden出生并经过第一次MinorGC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并将对象年龄设为1。对象在Survivor区中每熬过一次MinorGC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁，其实每个JVM、每个GC都有所不同）时，就会被晋升到老年代中。</p><p>对象晋升老年代的年龄阈值，可以通过选项<code>-XX:MaxTenuringThreshold</code>来设置。</p><p>针对不同年龄段的对象分配原则如下所示：</p><ul><li><p>优先分配到Eden</p></li><li><p>大对象直接分配到老年代</p><p>尽量避免程序中出现过多的大对象</p></li><li><p>长期存活的对象分配到老年代</p></li><li><p>动态对象年龄判断</p><p>如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到 MaxTenuringrThreshold中要求的年龄。</p></li><li><p>空间分配担保</p><p>-XX:HandlePromotionFailure</p></li></ul><h2 id="为对象分配内存-tlab" tabindex="-1">为对象分配内存:TLAB <a class="header-anchor" href="#为对象分配内存-tlab" aria-label="Permalink to “为对象分配内存:TLAB”">​</a></h2><p><strong><span style="color:red;">为什么有TLAB(Thread Local Allocation Buffer)?</span></strong></p><p>堆区是线程共享区域，何线程都可以访问到堆区中的共享数据</p><p>由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的</p><p>为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。</p><p><strong><span style="color:red;">什么是TLAB?</span></strong></p><p>从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，JVM为<span style="color:red;">每个线程分配了一个私有缓存区域</span>，它包含在Eden空间内。</p><p>多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为<span style="color:red;"><strong>快速分配策略</strong></span>。</p><p>据我所知所有OpenJDK衍生出来的JVM都提供了TLAB的设计。</p><img src="'+v+'"><p><strong>TLAB的再说明：</strong></p><p>尽管不是所有的对象实例都能够在 TLAB 中成功分配内存，但<span style="color:red;">JVM确实是将TLAB作为内存分配的首选</span>。</p><p>在程序中，开发人员可以通过选项<code>-XX:UseTLAB</code>设置是否开启 TLAB 空间。</p><p>默认情况下，TLAB 空间的内存非常小，仅占有整个 Eden 空间的1%，当然我们可以通过选项<code>-XX:TLABWasteTargetPercent</code>设置 TLAB 空间所占用Eden空间的百分比大小。</p><p>一旦对象在 TLAB 空间分配内存失败时，JVM就会尝试着通过<span style="color:red;">使用加锁机制</span>确保数据操作的原子性，从而直接在 Eden 空间中分配内存。</p><img src="'+b+`"><h2 id="堆空间的参数设置" tabindex="-1">堆空间的参数设置 <a class="header-anchor" href="#堆空间的参数设置" aria-label="Permalink to “堆空间的参数设置”">​</a></h2><p><code>-XX:+PrintFlagsInitial</code> 查看所有的参数的默认初始值</p><p><code>-XX:+PrintFlagsFinal</code> 查看所有的参数的最终值（可能会存在修改，不再是初始值）</p><p><code>-XX:+PrintGCDetails</code> 输出详细的GC处理日志</p><p><code>-XX:+PrintGC</code> 打印GC简要信息</p><p><code>-verbose:gc</code> 打印GC简要信息</p><p><code>-Xms100M</code> 初始堆空间内存（默认为物理内存的1/64）</p><p><code>-Xmx100M</code> 最大堆空间内存（默认为物理内存的1/4）</p><p><code>-Xmn20M</code> 设置新生代的大小。（初始值及最大值）</p><p><code>-XX:NewRatio</code> 配置新生代与老年代在堆结构的占比</p><p><code>-XX:SurvivorRatio</code> 设置新生代中Eden和s0/s1空间的比例</p><p><code>-XX:MaxTenuringThreshold</code> 设置新生代垃圾的最大年龄</p><p><code>-XX:HandlePromotionFailure</code> 是否设置空间分配担保</p><p>在发生Minor GC之前，虚拟机会<span style="color:red;">检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。</span></p><ul><li><p>如果大于，则此次Minor GC是安全的</p></li><li><p>如果小于，则虚拟机会查看<code>-XX:HandlePromotionFailure</code>设置值是否允许担保失败。</p><p>如果<code>HandlePromotionFailure=true</code>，那么会继续<span style="color:red;">检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。</span></p><ul><li><p>如果大于，则尝试进行一次Minor GC，但这次Minor GC依然是有风险的；</p></li><li><p>如果小于，则改次进行一次Full GC。</p></li></ul><p>如果<code>HandlePromotionFailure=false</code>，则改为进行一次Full GC。</p></li></ul><p>在JDK6 Update24之后，HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略，观察OpenJDK中的源码变化，虽然源码中还定义了HandlePromotionFailure参数，但是在代码中己经不会再使用它。JDK6 Update24之后的规则变为<span style="color:red;">只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC</span>，否则将进行Full GC。</p><h2 id="堆是分配对象的唯一选择吗" tabindex="-1">堆是分配对象的唯一选择吗 <a class="header-anchor" href="#堆是分配对象的唯一选择吗" aria-label="Permalink to “堆是分配对象的唯一选择吗”">​</a></h2><p>在《深入理解Java虚拟机》中关于Java堆内存有这样一段描述：</p><p>随着JIT编译期的发展与<span style="color:red;">逃逸分析技术</span>逐渐成熟，<span style="color:red;">栈上分配、标量替换优化技术</span>将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。</p><p>在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是<span style="color:red;">如果经过逃逸分析（Escape Analysis）后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配</span>。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。</p><p>此外，前面提到的基于OpenJDK深度定制的TaoBaoVM，其中创新的GCIH（GC invisible heap）技术实现off-heap，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。</p><h3 id="逃逸分析概述" tabindex="-1">逃逸分析概述 <a class="header-anchor" href="#逃逸分析概述" aria-label="Permalink to “逃逸分析概述”">​</a></h3><p>如何将堆上的对象分配到栈，需要使用逃逸分析手段。</p><p>这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。</p><p>通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。</p><p>逃逸分析的基本行为就是分析对象动态作用域：</p><ul><li>当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。</li><li>当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  V</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> V</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // use v</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>没有发生逃逸的对象，则可以分配到栈上，随着方法执行的结束，栈空间就被移除。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> StringBuffer </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">createStringBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String s1, String s2) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    StringBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> StringBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s2);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sb;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>上述代码如果想要stringBuffer sb不逃出方法，可以这样写：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">createStringBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String s1, String s2) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    StringBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> StringBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s2);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>案例</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 逃逸分析</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * &lt;p&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 如何快速的判断是否发生了逃逸分析，大家就看new的对象的实体是否有可能在方法外被调用。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> EscapeAnalysis</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> EscapeAnalysis</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    /** 方法返回EscapeAnalysis村象，发生逃逸 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> EscapeAnalysis </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> EscapeAnalysis</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    /** 为成员属性赋值，发生逃途 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setObj</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> EscapeAnalysis</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    /** 对象的作用域仅在当前方法中有效，没有发生逃逸 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> useEscapeAnalysis</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        EscapeAnalysis</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> EscapeAnalysis</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    /** 引用成员变量的值，发生逃逸 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> useEscapeAnalysis1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        EscapeAnalysis</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>参数设置：</strong></p><p>在JDK 6u23版本之后，Hotspot中默认就已经开启了逃逸分析。</p><p>如果使用的是较早的版本，开发人员则可以通过：</p><ul><li>选项<code>-XX：+DoEscapeAnalysis</code>显式开启逃逸分析</li><li>通过选项<code>-XX:+PrintEscapeAnalysis</code>查看逃逸分析的筛选结果。</li></ul><h3 id="代码优化" tabindex="-1">代码优化 <a class="header-anchor" href="#代码优化" aria-label="Permalink to “代码优化”">​</a></h3><p>使用逃逸分析，编译器可以对代码做如下优化：</p><p>一、<span style="color:red;">栈上分配</span>。将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能是栈分配的候选，而不是堆分配。</p><p>二、<span style="color:red;">同步省略</span>。如果一个对象被发现只能从一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</p><p>三、<span style="color:red;">分离对象或标量替换</span>。有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中。</p><div class="tip custom-block"><p class="custom-block-title">结论</p><p>开发中能使用局部变量的，就不要使用在方法外定义。</p></div><h4 id="栈上分配" tabindex="-1">栈上分配 <a class="header-anchor" href="#栈上分配" aria-label="Permalink to “栈上分配”">​</a></h4><p>JIT编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内分配完成后，执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无须进行垃圾回收了。</p><p><strong>常见的栈上分配的场景:</strong></p><p>在逃逸分析中，已经说明了。分别是给成员变量赋值、方法返回值、实例引用传递。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> StackAllocation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">currentTimeMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10000000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">            alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> end</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">currentTimeMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;花费的时间为:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> start) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;ms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        User</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 未发生逃逸</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li><p>当添加<code>-Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails</code>参数时</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>[GC (Allocation Failure) [PSYoungGen: 65536K-&gt;544K(76288K)] 65536K-&gt;552K(251392K), 0.0020424 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span></span>
<span class="line"><span>[GC (Allocation Failure) [PSYoungGen: 66080K-&gt;480K(76288K)] 66088K-&gt;488K(251392K), 0.0012915 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span></span>
<span class="line"><span>花费的时间为:48ms</span></span></code></pre></div><img src="`+G+'"><p>可以看到堆中有10000000个User对象，并且进行了两次GC</p></li><li><p>当开启逃逸分析时<code>-Xmx1G -Xms1G -XX:+DoEscapeAnalysis -XX:+PrintGCDetails</code></p><p>花费4ms，并且没有触发GC操作</p><img src="'+M+`"><p>可以看到堆中只有268363个User对象</p></li></ul><h4 id="同步省略-消除" tabindex="-1">同步省略(消除) <a class="header-anchor" href="#同步省略-消除" aria-label="Permalink to “同步省略(消除)”">​</a></h4><p>线程同步的代价是相当高的，同步的后果是降低并发性和性能。</p><p>在动态编译同步块的时候，JIT编译器可以借助逃逸分析来<span style="color:red;">判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程</span>。如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫<span style="color:red;">锁消除</span>。</p><p>如以下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>代码中对obj这个对象进行加锁，但是obj对象的生命周期只在f()方法中，并不会被其他线程所访问到，所以在JIT编译阶段就会被优化掉。优化成：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="标量替换" tabindex="-1">标量替换 <a class="header-anchor" href="#标量替换" aria-label="Permalink to “标量替换”">​</a></h4><p><span style="color:red;">标量(Scalar)</span>是指个无法再分解成更小的数据的数据。Java中的原始数据类型就是标量。</p><p>相对的，那些还可以分解的数据叫做<span style="color:red;">聚合量(Aggregate)</span>，Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量。</p><p>在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过JIT优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是<span style="color:red;">标量替换</span>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Point</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;point.x = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> point.x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;point.y = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> point.y);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>以上代码，经过标量替换后，就会变成：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;point.x = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;point.y = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>可以看到，Point这个聚合量经过逃逸分析后，发现他并没有逃逸，就被替换成两个聚合量了。那么标量替换有什么好处呢？就是可以大大减少堆内存的占用。因为一旦不需要创建对象了，那么就不再需要分配堆内存了。</p><p>标量替换为栈上分配提供了很好的基础。</p><p><strong>标量替换参数设置：</strong></p><p>参数<code>-XX:+EliminateAllocations</code> 开启了标量替换（默认打开），允许将对像打散分配在栈上。</p><h4 id="小结-逃逸分析并不成熟" tabindex="-1">小结：逃逸分析并不成熟 <a class="header-anchor" href="#小结-逃逸分析并不成熟" aria-label="Permalink to “小结：逃逸分析并不成熟”">​</a></h4><p>关于逃逸分析的论文在1999年就已经发表了，但直到JDK 1.6才有实现，而且这项技术到如今也并不是十分成熟的。</p><p>其根本原因就是<span style="color:red;">无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。</span></p><p>一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。</p><p>虽然这项技术并不十分成熟，但是它也<span style="color:red;">是即时编译器优化技术中一个十分重要的手段。</span></p><p>注意到有一些观点，认为通过逃逸分析，JVM会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于JVM设计者的选择。据我所知，Oracle HotspotJVM中并未这么做，这一点在逃逸分析相关的文档里已经说明，所以可以明确所有的对象实例都是创建在堆上。</p><p>目前很多书籍还是基于JDK 7以前的版本，JDK已经发生了很大变化，intern字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，intern字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：<span style="color:red;">对象实例都是分配在堆上</span>。</p>`,181);function f(s,J,S,_,T,P){const l=t,h=e("ClientOnly");return n(),r("div",null,[X,d(h,null,{default:y(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),o(l,{key:0,article:s.$frontmatter},null,8,["article"])):A("",!0)]}),_:1}),j])}const V=k(x,[["render",f]]);export{K as __pageData,V as default};
