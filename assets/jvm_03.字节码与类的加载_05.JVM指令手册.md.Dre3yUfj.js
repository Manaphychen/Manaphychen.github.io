import{_ as t}from"./chunks/ArticleMetadata.BPSr9oED.js";import{_ as i,E as b,c as n,o as c,j as r,I as s,aj as h,w as f,b as _,e as p,a as u}from"./chunks/framework._AF764y6.js";const M=JSON.parse('{"title":"JVM指令手册","description":"","frontmatter":{"title":"JVM指令手册","date":"2024-05-30T21:55:43.000Z","permalink":"/jvm/manual/","categories":["后端","JVM虚拟机","字节码与类的加载"],"tags":[null],"author":"Manaphy"},"headers":[],"relativePath":"jvm/03.字节码与类的加载/05.JVM指令手册.md","filePath":"jvm/03.字节码与类的加载/05.JVM指令手册.md","lastUpdated":1743259619000}'),m={name:"jvm/03.字节码与类的加载/05.JVM指令手册.md"},g=r("h1",{id:"jvm指令手册",tabindex:"-1"},[u("JVM指令手册 "),r("a",{class:"header-anchor",href:"#jvm指令手册","aria-label":"Permalink to “JVM指令手册”"},"​")],-1),k=h('<h2 id="一、栈和局部变量操作" tabindex="-1">一、栈和局部变量操作 <a class="header-anchor" href="#一、栈和局部变量操作" aria-label="Permalink to “一、栈和局部变量操作”">​</a></h2><h3 id="将常量压入栈的指令" tabindex="-1">将常量压入栈的指令 <a class="header-anchor" href="#将常量压入栈的指令" aria-label="Permalink to “将常量压入栈的指令”">​</a></h3><p><code>aconst_null</code> 将null对象引用压入栈<br><code>iconst_m1</code> 将int类型常量-1压入栈<br><code>iconst_0</code> 将int类型常量0压入栈<br><code>iconst_1</code> 将int类型常量1压入栈<br><code>iconst_2</code> 将int类型常量2压入栈<br><code>iconst_3</code> 将int类型常量3压入栈<br><code>iconst_4</code> 将int类型常量4压入栈<br><code>iconst_5</code> 将int类型常量5压入栈<br><code>lconst_0</code> 将long类型常量0压入栈<br><code>lconst_1</code> 将long类型常量1压入栈<br><code>fconst_0</code> 将float类型常量0压入栈<br><code>fconst_1</code> 将float类型常量1压入栈<br><code>dconst_0</code> 将double类型常量0压入栈<br><code>dconst_1</code> 将double类型常量1压入栈<br><code>bipush</code> 将一个8位带符号整数压入栈<br><code>sipush</code> 将16位带符号整数压入栈<br><code>ldc</code> 把常量池中的项压入栈<br><code>ldc_w</code> 把常量池中的项压入栈（使用宽索引）<br><code>ldc2_w</code> 把常量池中long类型或者double类型的项压入栈（使用宽索引）</p><h3 id="从栈中的局部变量中装载值的指令" tabindex="-1">从栈中的局部变量中装载值的指令 <a class="header-anchor" href="#从栈中的局部变量中装载值的指令" aria-label="Permalink to “从栈中的局部变量中装载值的指令”">​</a></h3><p><code>iload</code> 从局部变量中装载int类型值<br><code>lload</code> 从局部变量中装载long类型值<br><code>fload</code> 从局部变量中装载float类型值<br><code>dload</code> 从局部变量中装载double类型值<br><code>aload</code> 从局部变量中装载引用类型值（refernce）<br><code>iload_0</code> 从局部变量0中装载int类型值<br><code>iload_1</code> 从局部变量1中装载int类型值<br><code>iload_2</code> 从局部变量2中装载int类型值<br><code>iload_3</code> 从局部变量3中装载int类型值<br><code>lload_0</code> 从局部变量0中装载long类型值<br><code>lload_1</code> 从局部变量1中装载long类型值<br><code>lload_2</code> 从局部变量2中装载long类型值<br><code>lload_3</code> 从局部变量3中装载long类型值<br><code>fload_0</code> 从局部变量0中装载float类型值<br><code>fload_1</code> 从局部变量1中装载float类型值<br><code>fload_2</code> 从局部变量2中装载float类型值<br><code>fload_3</code> 从局部变量3中装载float类型值<br><code>dload_0</code> 从局部变量0中装载double类型值<br><code>dload_1</code> 从局部变量1中装载double类型值<br><code>dload_2</code> 从局部变量2中装载double类型值<br><code>dload_3</code> 从局部变量3中装载double类型值<br><code>aload_0</code> 从局部变量0中装载引用类型值<br><code>aload_1</code> 从局部变量1中装载引用类型值<br><code>aload_2</code> 从局部变量2中装载引用类型值<br><code>aload_3</code> 从局部变量3中装载引用类型值<br><code>iaload</code> 从数组中装载int类型值<br><code>laload</code> 从数组中装载long类型值<br><code>faload</code> 从数组中装载float类型值<br><code>daload</code> 从数组中装载double类型值<br><code>aaload</code> 从数组中装载引用类型值<br><code>baload</code> 从数组中装载byte类型或boolean类型值<br><code>caload</code> 从数组中装载char类型值<br><code>saload</code> 从数组中装载short类型值<br></p><h3 id="将栈中的值存入局部变量的指令" tabindex="-1">将栈中的值存入局部变量的指令 <a class="header-anchor" href="#将栈中的值存入局部变量的指令" aria-label="Permalink to “将栈中的值存入局部变量的指令”">​</a></h3><p><code>istore</code> 将int类型值存入局部变量<br><code>lstore</code> 将long类型值存入局部变量<br><code>fstore</code> 将float类型值存入局部变量<br><code>dstore</code> 将double类型值存入局部变量<br><code>astore</code> 将将引用类型或returnAddress类型值存入局部变量<br><code>istore_0</code> 将int类型值存入局部变量0<br><code>istore_1</code> 将int类型值存入局部变量1<br><code>istore_2</code> 将int类型值存入局部变量2<br><code>istore_3</code> 将int类型值存入局部变量3<br><code>lstore_0</code> 将long类型值存入局部变量0<br><code>lstore_1</code> 将long类型值存入局部变量1<br><code>lstore_2</code> 将long类型值存入局部变量2<br><code>lstore_3</code> 将long类型值存入局部变量3<br><code>fstore_0</code> 将float类型值存入局部变量0<br><code>fstore_1</code> 将float类型值存入局部变量1<br><code>fstore_2</code> 将float类型值存入局部变量2<br><code>fstore_3</code> 将float类型值存入局部变量3<br><code>dstore_0</code> 将double类型值存入局部变量0<br><code>dstore_1</code> 将double类型值存入局部变量1<br><code>dstore_2</code> 将double类型值存入局部变量2<br><code>dstore_3</code> 将double类型值存入局部变量3<br><code>astore_0</code> 将引用类型或returnAddress类型值存入局部变量0<br><code>astore_1</code> 将引用类型或returnAddress类型值存入局部变量1<br><code>astore_2</code> 将引用类型或returnAddress类型值存入局部变量2<br><code>astore_3</code> 将引用类型或returnAddress类型值存入局部变量3<br><code>iastore</code> 将int类型值存入数组中<br><code>lastore</code> 将long类型值存入数组中<br><code>fastore</code> 将float类型值存入数组中<br><code>dastore</code> 将double类型值存入数组中<br><code>aastore</code> 将引用类型值存入数组中<br><code>bastore</code> 将byte类型或者boolean类型值存入数组中<br><code>castore</code> 将char类型值存入数组中<br><code>sastore</code> 将short类型值存入数组中<br> wide指令<br><code>wide</code> 使用附加字节扩展局部变量索引<br></p><h3 id="通用-无类型-栈操作" tabindex="-1">通用(无类型）栈操作 <a class="header-anchor" href="#通用-无类型-栈操作" aria-label="Permalink to “通用(无类型）栈操作”">​</a></h3><p><code>nop</code> 不做任何操作<br><code>pop</code> 弹出栈顶端一个字长的内容<br><code>pop2</code> 弹出栈顶端两个字长的内容<br><code>dup</code> 复制栈顶部一个字长内容<br><code>dup_x1</code> 复制栈顶部一个字长的内容，然后将复制内容及原来弹出的两个字长的内容压入栈<br><code>dup_x2</code> 复制栈顶部一个字长的内容，然后将复制内容及原来弹出的三个字长的内容压入栈<br><code>dup2</code> 复制栈顶部两个字长内容<br><code>dup2_x1</code> 复制栈顶部两个字长的内容，然后将复制内容及原来弹出的三个字长的内容压入栈<br><code>dup2_x2</code> 复制栈顶部两个字长的内容，然后将复制内容及原来弹出的四个字长的内容压入栈<br><code>swap</code> 交换栈顶部两个字长内容</p><h2 id="二、类型转换" tabindex="-1">二、类型转换 <a class="header-anchor" href="#二、类型转换" aria-label="Permalink to “二、类型转换”">​</a></h2><p><code>i2l</code> 把int类型的数据转化为long类型<br><code>i2f</code> 把int类型的数据转化为float类型<br><code>i2d</code> 把int类型的数据转化为double类型<br><code>l2i</code> 把long类型的数据转化为int类型<br><code>l2f</code> 把long类型的数据转化为float类型<br><code>l2d</code> 把long类型的数据转化为double类型<br><code>f2i</code> 把float类型的数据转化为int类型<br><code>f2l</code> 把float类型的数据转化为long类型<br><code>f2d</code> 把float类型的数据转化为double类型<br><code>d2i</code> 把double类型的数据转化为int类型<br><code>d2l</code> 把double类型的数据转化为long类型<br><code>d2f</code> 把double类型的数据转化为float类型<br><code>i2b</code> 把int类型的数据转化为byte类型<br><code>i2c</code> 把int类型的数据转化为char类型<br><code>i2s</code> 把int类型的数据转化为short类型<br></p><h2 id="三、整数运算" tabindex="-1">三、整数运算 <a class="header-anchor" href="#三、整数运算" aria-label="Permalink to “三、整数运算”">​</a></h2><p><code>iadd</code> 执行int类型的加法<br><code>ladd</code> 执行long类型的加法<br><code>isub</code> 执行int类型的减法<br><code>lsub</code> 执行long类型的减法<br><code>imul</code> 执行int类型的乘法<br><code>lmul</code> 执行long类型的乘法<br><code>idiv</code> 执行int类型的除法<br><code>ldiv</code> 执行long类型的除法<br><code>irem</code> 计算int类型除法的余数<br><code>lrem</code> 计算long类型除法的余数<br><code>ineg</code> 对一个int类型值进行取反操作<br><code>lneg</code> 对一个long类型值进行取反操作<br><code>iinc</code> 把一个常量值加到一个int类型的局部变量上<br></p><h2 id="四、逻辑运算" tabindex="-1">四、逻辑运算 <a class="header-anchor" href="#四、逻辑运算" aria-label="Permalink to “四、逻辑运算”">​</a></h2><h3 id="移位操作" tabindex="-1">移位操作 <a class="header-anchor" href="#移位操作" aria-label="Permalink to “移位操作”">​</a></h3><p><code>ishl</code> 执行int类型的向左移位操作<br><code>lshl</code> 执行long类型的向左移位操作<br><code>ishr</code> 执行int类型的向右移位操作<br><code>lshr</code> 执行long类型的向右移位操作<br><code>iushr</code> 执行int类型的向右逻辑移位操作<br><code>lushr</code> 执行long类型的向右逻辑移位操作<br></p><h3 id="按位布尔运算" tabindex="-1">按位布尔运算 <a class="header-anchor" href="#按位布尔运算" aria-label="Permalink to “按位布尔运算”">​</a></h3><p><code>iand</code> 对int类型值进行“逻辑与”操作<br><code>land</code> 对long类型值进行“逻辑与”操作<br><code>ior</code> 对int类型值进行“逻辑或”操作<br><code>lor</code> 对long类型值进行“逻辑或”操作<br><code>ixor</code> 对int类型值进行“逻辑异或”操作<br><code>lxor</code> 对long类型值进行“逻辑异或”操作<br></p><h3 id="浮点运算" tabindex="-1">浮点运算 <a class="header-anchor" href="#浮点运算" aria-label="Permalink to “浮点运算”">​</a></h3><p><code>fadd</code> 执行float类型的加法<br><code>dadd</code> 执行double类型的加法<br><code>fsub</code> 执行float类型的减法<br><code>dsub</code> 执行double类型的减法<br><code>fmul</code> 执行float类型的乘法<br><code>dmul</code> 执行double类型的乘法<br><code>fdiv</code> 执行float类型的除法<br><code>ddiv</code> 执行double类型的除法<br><code>frem</code> 计算float类型除法的余数<br><code>drem</code> 计算double类型除法的余数<br><code>fneg</code> 将一个float类型的数值取反<br><code>dneg</code> 将一个double类型的数值取反<br></p><h2 id="五、对象和数组" tabindex="-1">五、对象和数组 <a class="header-anchor" href="#五、对象和数组" aria-label="Permalink to “五、对象和数组”">​</a></h2><h3 id="对象操作指令" tabindex="-1">对象操作指令 <a class="header-anchor" href="#对象操作指令" aria-label="Permalink to “对象操作指令”">​</a></h3><p><code>new</code> 创建一个新对象<br><code>checkcast</code> 确定对象为所给定的类型。后跟目标类，判断栈顶元素是否为目标类 / 接口的实例。如果不是便抛出异常<br><code>getfield</code> 从对象中获取字段<br><code>putfield</code> 设置对象中字段的值<br><code>getstatic</code> 从类中获取静态字段<br><code>putstatic</code> 设置类中静态字段的值<br><code>instanceof</code> 判断对象是否为给定的类型。后跟目标类，判断栈顶元素是否为目标类 / 接口的实例。是则压入 1，否则压入 0<br></p><h3 id="数组操作指令" tabindex="-1">数组操作指令 <a class="header-anchor" href="#数组操作指令" aria-label="Permalink to “数组操作指令”">​</a></h3><p><code>newarray</code> 分配数据成员类型为基本上数据类型的新数组<br><code>anewarray</code> 分配数据成员类型为引用类型的新数组<br><code>arraylength</code> 获取数组长度<br><code>multianewarray</code> 分配新的多维数组<br></p><h2 id="六、控制流" tabindex="-1">六、控制流 <a class="header-anchor" href="#六、控制流" aria-label="Permalink to “六、控制流”">​</a></h2><h3 id="条件分支指令" tabindex="-1">条件分支指令 <a class="header-anchor" href="#条件分支指令" aria-label="Permalink to “条件分支指令”">​</a></h3><p><code>ifeq</code> 如果等于0，则跳转<br><code>ifne</code> 如果不等于0，则跳转<br><code>iflt</code> 如果小于0，则跳转<br><code>ifge</code> 如果大于等于0，则跳转<br><code>ifgt</code> 如果大于0，则跳转<br><code>ifle</code> 如果小于等于0，则跳转<br><code>if_icmpcq</code> 如果两个int值相等，则跳转<br><code>if_icmpne</code> 如果两个int类型值不相等，则跳转<br><code>if_icmplt</code> 如果一个int类型值小于另外一个int类型值，则跳转<br><code>if_icmpge</code> 如果一个int类型值大于或者等于另外一个int类型值，则跳转<br><code>if_icmpgt</code> 如果一个int类型值大于另外一个int类型值，则跳转<br><code>if_icmple</code> 如果一个int类型值小于或者等于另外一个int类型值，则跳转<br><code>ifnull</code> 如果等于null，则跳转<br><code>ifnonnull</code> 如果不等于null，则跳转<br><code>if_acmpeq</code> 如果两个对象引用相等，则跳转<br><code>if_acmpnc</code> 如果两个对象引用不相等，则跳转<br></p><h3 id="比较指令" tabindex="-1">比较指令 <a class="header-anchor" href="#比较指令" aria-label="Permalink to “比较指令”">​</a></h3><p><code>lcmp</code> 比较long类型值<br><code>fcmpl</code> 比较float类型值（当遇到NaN时，返回-1）<br><code>fcmpg</code> 比较float类型值（当遇到NaN时，返回1）<br><code>dcmpl</code> 比较double类型值（当遇到NaN时，返回-1）<br><code>dcmpg</code> 比较double类型值（当遇到NaN时，返回1）<br></p><h3 id="无条件转移指令" tabindex="-1">无条件转移指令 <a class="header-anchor" href="#无条件转移指令" aria-label="Permalink to “无条件转移指令”">​</a></h3><p><code>goto</code> 无条件跳转<br><code>goto_w</code> 无条件跳转（宽索引）<br></p><h3 id="表跳转指令" tabindex="-1">表跳转指令 <a class="header-anchor" href="#表跳转指令" aria-label="Permalink to “表跳转指令”">​</a></h3><p><code>tableswitch</code> 通过索引访问跳转表，并跳转<br><code>lookupswitch</code> 通过键值匹配访问跳转表，并执行跳转操作<br></p><h3 id="异常" tabindex="-1">异常 <a class="header-anchor" href="#异常" aria-label="Permalink to “异常”">​</a></h3><p><code>athrow</code> 抛出异常或错误。将栈顶异常抛出<br> finally子句<br><code>jsr</code> 跳转到子例程<br><code>jsr_w</code> 跳转到子例程（宽索引）<br><code>rct</code> 从子例程返回<br></p><h2 id="七、方法调用与返回" tabindex="-1">七、方法调用与返回 <a class="header-anchor" href="#七、方法调用与返回" aria-label="Permalink to “七、方法调用与返回”">​</a></h2><h3 id="方法调用指令" tabindex="-1">方法调用指令 <a class="header-anchor" href="#方法调用指令" aria-label="Permalink to “方法调用指令”">​</a></h3><p><code>invokcvirtual</code> 运行时按照对象的类来调用实例方法<br><code>invokespecial</code> 根据编译时类型来调用实例方法<br><code>invokestatic</code> 调用类（静态）方法<br><code>invokcinterface</code> 调用接口方法<br></p><h3 id="方法返回指令" tabindex="-1">方法返回指令 <a class="header-anchor" href="#方法返回指令" aria-label="Permalink to “方法返回指令”">​</a></h3><p><code>ireturn</code> 从方法中返回int类型的数据<br><code>lreturn</code> 从方法中返回long类型的数据<br><code>freturn</code> 从方法中返回float类型的数据<br><code>dreturn</code> 从方法中返回double类型的数据<br><code>areturn</code> 从方法中返回引用类型的数据<br><code>return</code> 从方法中返回，返回值为void<br></p><h3 id="线程同步" tabindex="-1">线程同步 <a class="header-anchor" href="#线程同步" aria-label="Permalink to “线程同步”">​</a></h3><p><code>montiorenter</code> 进入并获取对象监视器。即：为栈顶对象加锁<br><code>monitorexit</code> 释放并退出对象监视器。即：为栈顶对象解锁<br></p><h2 id="八、jvm指令助记符" tabindex="-1">八、JVM指令助记符 <a class="header-anchor" href="#八、jvm指令助记符" aria-label="Permalink to “八、JVM指令助记符”">​</a></h2><p>变量到操作数栈：<code>iload</code>,<code>iload_</code>,<code>lload</code>,<code>lload_</code>,<code>fload</code>,<code>fload_</code>,<code>dload</code>,<code>dload_</code>,<code>aload</code>,<code>aload_</code><br> 操作数栈到变量：<code>istore</code>,<code>istore_</code>,<code>lstore</code>,<code>lstore_</code>,<code>fstore</code>,<code>fstore_</code>,<code>dstore</code>,<code>dstor_</code>,<code>astore</code>,<code>astore_</code><br> 常数到操作数栈：<code>bipush</code>,<code>sipush</code>,<code>ldc</code>,<code>ldc_w</code>,<code>ldc2_w</code>,<code>aconst_null</code>,<code>iconst_ml</code>,<code>iconst_</code>,<code>lconst_</code>,<code>fconst_</code>,<code>dconst_</code><br> 加：<code>iadd</code>,<code>ladd</code>,<code>fadd</code>,<code>dadd</code><br> 减：<code>isub</code>,<code>lsub</code>,<code>fsub</code>,<code>dsub</code><br> 乘：<code>imul</code>,<code>lmul</code>,<code>fmul</code>,<code>dmul</code><br> 除：<code>idiv</code>,<code>ldiv</code>,<code>fdiv</code>,<code>ddiv</code><br> 余数：<code>irem</code>,<code>lrem</code>,<code>frem</code>,<code>drem</code><br> 取负：<code>ineg</code>,<code>lneg</code>,<code>fneg</code>,<code>dneg</code><br> 移位：<code>ishl</code>,<code>lshr</code>,<code>iushr</code>,<code>lshl</code>,<code>lshr</code>,<code>lushr</code><br> 按位或：<code>ior</code>,<code>lor</code><br> 按位与：<code>iand</code>,<code>land</code><br> 按位异或：<code>ixor</code>,<code>lxor</code><br> 类型转换：<code>i2l</code>,<code>i2f</code>,<code>i2d</code>,<code>l2f</code>,<code>l2d</code>,<code>f2d</code>(放宽数值转换)<br><code>i2b</code>,<code>i2c</code>,<code>i2s</code>,<code>l2i</code>,<code>f2i</code>,<code>f2l</code>,<code>d2i</code>,<code>d2l</code>,<code>d2f</code>(缩窄数值转换)<br> 创建类实便：<code>new</code><br> 创建新数组：<code>newarray</code>,<code>anewarray</code>,<code>multianwarray</code><br> 访问类的域和类实例域：<code>getfield</code>,<code>putfield</code>,<code>getstatic</code>,<code>putstatic</code><br> 把数据装载到操作数栈：<code>baload</code>,<code>caload</code>,<code>saload</code>,<code>iaload</code>,<code>laload</code>,<code>faload</code>,<code>daload</code>,<code>aaload</code><br> 从操作数栈存存储到数组：<code>bastore</code>,<code>castore</code>,<code>sastore</code>,<code>iastore</code>,<code>lastore</code>,<code>fastore</code>,<code>dastore</code>,<code>aastore</code><br> 获取数组长度：<code>arraylength</code><br> 检相类实例或数组属性：<code>instanceof</code>,<code>checkcast</code><br> 操作数栈管理：<code>pop</code>,<code>pop2</code>,<code>dup</code>,<code>dup2</code>,<code>dup_xl</code>,<code>dup2_xl</code>,<code>dup_x2</code>,<code>dup2_x2</code>,<code>swap</code><br> 有条件转移：<code>ifeq</code>,<code>iflt</code>,<code>ifle</code>,<code>ifne</code>,<code>ifgt</code>,<code>ifge</code>,<code>ifnull</code>,<code>ifnonnull</code>,<code>if_icmpeq</code>,<code>if_icmpene</code>,<code>if_icmplt</code>,<code>if_icmpgt</code>,<code>if_icmple</code>,<code>if_icmpge</code>,<code>if_acmpeq</code>,<code>if_acmpne</code>,<code>lcmp</code>,<code>fcmpl</code>,<code>fcmpg</code>,<code>dcmpl</code>,<code>dcmpg</code><br> 复合条件转移：<code>tableswitch</code>,<code>lookupswitch</code><br> 无条件转移：<code>goto</code>,<code>goto_w</code>,<code>jsr</code>,<code>jsr_w</code>,<code>ret</code><br> 调度对象的实便方法：<code>invokevirtual</code><br> 调用由接口实现的方法：<code>invokeinterface</code><br> 调用需要特殊处理的实例方法：<code>invokespecial</code><br> 调用命名类中的静态方法：<code>invokestatic</code><br> 方法返回：<code>ireturn</code>,<code>lreturn</code>,<code>freturn</code>,<code>dreturn</code>,<code>areturn</code>,<code>return</code><br> 异常：<code>athrow</code><br> finally关键字的实现使用：<code>jsr</code>,<code>jsr_w</code>,<code>ret</code><br></p>',45);function x(e,v,w,P,V,y){const a=t,l=b("ClientOnly");return c(),n("div",null,[g,s(l,null,{default:f(()=>{var o,d;return[(((o=e.$frontmatter)==null?void 0:o.aside)??!0)&&(((d=e.$frontmatter)==null?void 0:d.showArticleMetadata)??!0)?(c(),_(a,{key:0,article:e.$frontmatter},null,8,["article"])):p("",!0)]}),_:1}),k])}const J=i(m,[["render",x]]);export{M as __pageData,J as default};
