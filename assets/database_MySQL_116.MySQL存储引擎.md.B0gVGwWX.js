import{_ as t,c as s,o as i,aj as a}from"./chunks/framework._AF764y6.js";const l="/assets/Mwtz0u.D_19LJdg.png",c=JSON.parse('{"title":"MySQL存储引擎","description":"","frontmatter":{"title":"MySQL存储引擎","date":"2023-11-02T09:51:59.000Z","permalink":"/mysql/engines/","categories":["数据库","MySQL"],"tags":["MySQL"],"author":"Manaphy"},"headers":[],"relativePath":"database/MySQL/116.MySQL存储引擎.md","filePath":"database/MySQL/116.MySQL存储引擎.md","lastUpdated":1744977432000}'),e={name:"database/MySQL/116.MySQL存储引擎.md"},n=a(`<h1 id="mysql存储引擎" tabindex="-1">MySQL存储引擎 <a class="header-anchor" href="#mysql存储引擎" aria-label="Permalink to “MySQL存储引擎”">​</a></h1><h2 id="_1-查看存储引擎" tabindex="-1">1. 查看存储引擎 <a class="header-anchor" href="#_1-查看存储引擎" aria-label="Permalink to “1. 查看存储引擎”">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> show engines;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| FEDERATED          | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      | Federated MySQL storage engine                                 | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| MEMORY             | YES     | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> based, stored </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memory, useful </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temporary tables      | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| InnoDB             | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | Supports transactions, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">row-level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> locking, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foreign keys     | YES          | YES  | YES        |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| PERFORMANCE_SCHEMA | YES     | Performance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Schema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                             | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| MyISAM             | YES     | MyISAM storage engine                                          | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| MRG_MYISAM         | YES     | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Collection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> of identical MyISAM tables                          | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| BLACKHOLE          | YES     | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> storage engine (anything you write </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it disappears) | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| CSV                | YES     | CSV storage engine                                             | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| ARCHIVE            | YES     | Archive storage engine                                         | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span></code></pre></div><h2 id="_2-设置系统默认的存储引擎" tabindex="-1">2. 设置系统默认的存储引擎 <a class="header-anchor" href="#_2-设置系统默认的存储引擎" aria-label="Permalink to “2. 设置系统默认的存储引擎”">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%storage_engine%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---------------------------------+-----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| Variable_name                   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---------------------------------+-----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| default_storage_engine          | InnoDB    |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| default_tmp_storage_engine      | InnoDB    |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| disabled_storage_engines        |           |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| internal_tmp_mem_storage_engine | TempTable |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---------------------------------+-----------+</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 或</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @@default_storage_engine;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| @@default_storage_engine |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| InnoDB                   |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--------------------------+</span></span></code></pre></div><p>如果在创建表的语句中没有显式指定表的存储引擎的话，那就会默认使用InnoDB 作为表的存储引擎。</p><p>如果我们想改变表的默认存储引擎的话，可以这样写启动服务器的命令行：</p><p><code>SET DEFAULT_STORAGE_ENGINE=MyISAM;</code></p><h2 id="_3-设置表的存储引擎" tabindex="-1">3. 设置表的存储引擎 <a class="header-anchor" href="#_3-设置表的存储引擎" aria-label="Permalink to “3. 设置表的存储引擎”">​</a></h2><p>存储引擎是负责对表中的数据进行提取和写入工作的，我们可以为<code>不同的表设置不同的存储引擎</code>，也就是说不同的表可以有不同的物理存储结构，不同的提取和写入方式。</p><h3 id="_3-1-创建表时指定存储引擎" tabindex="-1">3.1 创建表时指定存储引擎 <a class="header-anchor" href="#_3-1-创建表时指定存储引擎" aria-label="Permalink to “3.1  创建表时指定存储引擎”">​</a></h3><p>我们之前创建表的语句都没有指定表的存储引擎，那就会使用默认的存储引擎InnoDB 。如果我们想显式的指定一下表的存储引擎，那可以这么写：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 表名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    建表语句;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ENGINE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 存储引擎名称;</span></span></code></pre></div><h3 id="_3-2-修改表的存储引擎" tabindex="-1">3.2 修改表的存储引擎 <a class="header-anchor" href="#_3-2-修改表的存储引擎" aria-label="Permalink to “3.2 修改表的存储引擎”">​</a></h3><p>如果表已经建好了，我们也可以使用下边这个语句来修改表的存储引擎：</p><p><code>ALTER TABLE 表名 ENGINE = 存储引擎名称;</code></p><h2 id="_4-引擎介绍" tabindex="-1">4. 引擎介绍 <a class="header-anchor" href="#_4-引擎介绍" aria-label="Permalink to “4. 引擎介绍”">​</a></h2><h3 id="_4-1-innodb-引擎" tabindex="-1">4.1 InnoDB 引擎 <a class="header-anchor" href="#_4-1-innodb-引擎" aria-label="Permalink to “4.1 InnoDB 引擎”">​</a></h3><blockquote><p>具备外键支持功能的事务存储引擎</p></blockquote><ul><li>MySQL从3.23.34a开始就包含InnoDB存储引擎。<code>大于等于5.5之后，默认采用InnoDB引擎。</code></li><li>InnoDB是MySQL的<code>默认事务型引擎</code>，它被设计用来处理大量的短期(short-lived)事务。可以确保事务的完整提交(Commit)和回滚(Rollback)。</li><li>除了增加和查询外，还需要更新、删除操作，那么，应优先选择InnoDB存储引擎。</li><li><strong>除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎。</strong></li><li>数据文件结构： <ul><li>表名.frm 存储表结构（MySQL8.0时，合并在表名.ibd中）</li><li>表名.ibd 存储数据和索引</li></ul></li><li>InnoDB是<code>为处理巨大数据量的最大性能设计</code>。 <ul><li>在以前的版本中，字典数据以元数据文件、非事务表等来存储。现在这些元数据文件被删除了。比如：<code>.frm</code> ， <code>.par</code> ，<code>.trn</code> ， <code>.isl</code> ，<code>.db.opt</code> 等都在MySQL8.0中不存在了。</li></ul></li><li>对比MyISAM的存储引擎，<code>InnoDB写的处理效率差一些</code>，并且会占用更多的磁盘空间以保存数据和索引。</li><li>MyISAM只缓存索引，不缓存真实数据；InnoDB不仅缓存索引还要缓存真实数据，<code>对内存要求较高</code>，而且内存大小对性能有决定性的影响。</li></ul><h3 id="_4-2-myisam-引擎" tabindex="-1">4.2 MyISAM 引擎 <a class="header-anchor" href="#_4-2-myisam-引擎" aria-label="Permalink to “4.2 MyISAM 引擎”">​</a></h3><blockquote><p>主要的非事务处理存储引擎</p></blockquote><ul><li>MyISAM提供了大量的特性，包括全文索引、压缩、空间函数(GIS)等，但MyISAM <code>不支持事务、行级锁、外键</code>，有一个毫无疑问的缺陷就是<code>崩溃后无法安全恢复</code>。</li><li><code>5.5之前默认的存储引擎</code></li><li>优势是访问的<code>速度快</code>，对事务完整性没有要求或者以SELECT、INSERT为主的应用</li><li>针对数据统计有额外的常数存储。故而 count(*) 的查询效率很高</li><li>数据文件结构： <ul><li>表名.frm 存储表结构</li><li>表名.MYD 存储数据 (MYData)</li><li>表名.MYI 存储索引 (MYIndex)</li></ul></li><li>应用场景：只读应用或者以读为主的业务</li></ul><h3 id="_4-3-archive-引擎" tabindex="-1">4.3 Archive 引擎 <a class="header-anchor" href="#_4-3-archive-引擎" aria-label="Permalink to “4.3 Archive 引擎”">​</a></h3><blockquote><p>用于数据存档</p></blockquote><p>下表展示了ARCHIVE 存储引擎功能</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>特征</strong></th><th style="text-align:left;"><strong>支持</strong></th></tr></thead><tbody><tr><td style="text-align:left;">B树索引</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;"><code>备份/时间点恢复</code>（在服务器中实现，而不是在存储引擎中）</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">集群数据库支持</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;">聚集索引</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;"><code>压缩数据</code></td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">数据缓存</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;">加密数据（加密功能在服务器中实现）</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">外键支持</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;">全文检索索引</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;">地理空间数据类型支持</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">地理空间索引支持</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;">哈希索引</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;">索引缓存</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;"><code>锁粒度</code></td><td style="text-align:left;">行锁</td></tr><tr><td style="text-align:left;">MVCC</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;">存储限制</td><td style="text-align:left;">没有任何限制</td></tr><tr><td style="text-align:left;">交易</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;"><code>更新数据字典的统计信息</code></td><td style="text-align:left;">支持</td></tr></tbody></table><h3 id="_4-4-blackhole-引擎" tabindex="-1">4.4 Blackhole 引擎 <a class="header-anchor" href="#_4-4-blackhole-引擎" aria-label="Permalink to “4.4 Blackhole 引擎”">​</a></h3><blockquote><p>丢弃写操作，读操作会返回空内容</p></blockquote><h3 id="_4-5-csv-引擎" tabindex="-1">4.5 CSV 引擎 <a class="header-anchor" href="#_4-5-csv-引擎" aria-label="Permalink to “4.5 CSV 引擎”">​</a></h3><blockquote><p>存储数据时，以逗号分隔各个数据项</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ENGINE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CSV;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;record one&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;record two&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---+------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| i | c          |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---+------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | record one |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | record two |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---+------------+</span></span></code></pre></div><p>创建CSV表还会创建相应的<code>元文件</code>，用于<code>存储表的状态</code>和<code>表中存在的行数</code>。此文件的名称与表的名称相同，后缀为<code>CSM</code> 。</p><p>使用记事本打开<code>test.CSV</code>文件，内容如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1,&quot;record one&quot;</span></span>
<span class="line"><span>2,&quot;record two&quot;</span></span></code></pre></div><p>这种格式可以被 Microsoft Excel 等电子表格应用程序读取，甚至写入。使用Microsoft Excel打开如图所示</p><p><img src="`+l+'" alt="image.png"></p><h3 id="_4-6-memory-引擎" tabindex="-1">4.6 Memory 引擎 <a class="header-anchor" href="#_4-6-memory-引擎" aria-label="Permalink to “4.6 Memory 引擎”">​</a></h3><p><strong>概述：</strong></p><blockquote><p>Memory采用的逻辑介质是<code>内存</code>，<code>响应速度很快</code>，但是当mysqld守护进程崩溃的时候<code>数据会丢失</code>。另外，要求存储的数据是数据长度不变的格式，比如，Blob和Text类型的数据不可用(长度不固定的)。</p></blockquote><p><strong>主要特征：</strong></p><ul><li>Memory同时<code>支持哈希（HASH）索引</code>和<code>B+树索引</code>。</li><li>Memory表至少比MyISAM表要<code>快一个数量级</code>。</li><li>MEMORY <code>表的大小是受到限制</code>的。表的大小主要取决于两个参数，分别是<code>max_rows</code> 和<code>max_heap_table_size</code> 。其中，max_rows可以在创建表时指定；max_heap_table_size的大小默认为16MB，可以按需要进行扩大。</li><li>数据文件与索引文件分开存储。</li><li>缺点：其数据易丢失，生命周期短。基于这个缺陷，选择MEMORY存储引擎时需要特别小心。</li></ul><p><strong>使用Memory存储引擎的场景：</strong></p><ol><li><code>目标数据比较小</code>，而且非常<code>频繁的进行访问</code>，在内存中存放数据，如果太大的数据会造成<code>内存溢出</code>。可以通过参数<code>max_heap_table_size</code> 控制Memory表的大小，限制Memory表的最大的大小。</li><li>如果<code>数据是临时的</code>，而且<code>必须立即可用</code>得到，那么就可以放在内存中。</li><li>存储在Memory表中的数据如果突然间<code>丢失的话也没有太大的关系</code>。</li></ol><h3 id="_4-7-federated-引擎" tabindex="-1">4.7 Federated 引擎 <a class="header-anchor" href="#_4-7-federated-引擎" aria-label="Permalink to “4.7 Federated 引擎”">​</a></h3><ul><li>Federated引擎是访问其他MySQL服务器的一个<code>代理</code>，尽管该引擎看起来提供了一种很好的<code>跨服务器的灵活性</code>，但也经常带来问题，因此<code>默认是禁用的</code>。</li></ul><h3 id="_4-8-merge引擎" tabindex="-1">4.8 Merge引擎 <a class="header-anchor" href="#_4-8-merge引擎" aria-label="Permalink to “4.8 Merge引擎”">​</a></h3><blockquote><p>管理多个MyISAM表构成的表集合</p></blockquote><h3 id="_4-9-ndb引擎" tabindex="-1">4.9 NDB引擎 <a class="header-anchor" href="#_4-9-ndb引擎" aria-label="Permalink to “4.9 NDB引擎”">​</a></h3><blockquote><p>MySQL集群专用存储引擎</p></blockquote><p>也叫做 NDB Cluster 存储引擎，主要用于 <code>MySQL Cluster 分布式集群</code>环境，类似于 Oracle 的 RAC 集群。</p><h3 id="_4-10-引擎对比" tabindex="-1">4.10 引擎对比 <a class="header-anchor" href="#_4-10-引擎对比" aria-label="Permalink to “4.10 引擎对比”">​</a></h3><p>MySQL中同一个数据库，不同的表可以选择不同的存储引擎。如下表对常用存储引擎做出了对比。</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>特点</strong></th><th style="text-align:left;"><strong>MyISAM</strong></th><th style="text-align:left;"><strong>InnoDB</strong></th><th style="text-align:left;"><strong>MEMORY</strong></th><th style="text-align:left;"><strong>MERGE</strong></th><th style="text-align:left;"><strong>NDB</strong></th></tr></thead><tbody><tr><td style="text-align:left;">存储限制</td><td style="text-align:left;">有</td><td style="text-align:left;">64TB</td><td style="text-align:left;">有</td><td style="text-align:left;">没有</td><td style="text-align:left;">有</td></tr><tr><td style="text-align:left;"><code>事务安全</code></td><td style="text-align:left;"></td><td style="text-align:left;">支持</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>锁机制</code></td><td style="text-align:left;">表锁</td><td style="text-align:left;">行锁</td><td style="text-align:left;">表锁</td><td style="text-align:left;">表锁</td><td style="text-align:left;">行锁</td></tr><tr><td style="text-align:left;">B树索引</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">哈希索引</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">支持</td><td style="text-align:left;"></td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">全文索引</td><td style="text-align:left;">支持</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">集群索引</td><td style="text-align:left;"></td><td style="text-align:left;">支持</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">数据缓存</td><td style="text-align:left;"></td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td><td style="text-align:left;"></td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;"><code>索引缓存</code></td><td style="text-align:left;">只缓存索引</td><td style="text-align:left;">缓存索引和真实数据</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;">数据可压缩</td><td style="text-align:left;">支持</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">空间使用</td><td style="text-align:left;">低</td><td style="text-align:left;">高</td><td style="text-align:left;">N/A</td><td style="text-align:left;">低</td><td style="text-align:left;">低</td></tr><tr><td style="text-align:left;">内存使用</td><td style="text-align:left;">低</td><td style="text-align:left;">高</td><td style="text-align:left;">中等</td><td style="text-align:left;">低</td><td style="text-align:left;">高</td></tr><tr><td style="text-align:left;">批量插入的速度</td><td style="text-align:left;">高</td><td style="text-align:left;">低</td><td style="text-align:left;">高</td><td style="text-align:left;">高</td><td style="text-align:left;">高</td></tr><tr><td style="text-align:left;"><code>支持外键</code></td><td style="text-align:left;"></td><td style="text-align:left;">支持</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><h2 id="_5-innodb介绍" tabindex="-1">5. InnoDB介绍 <a class="header-anchor" href="#_5-innodb介绍" aria-label="Permalink to “5. InnoDB介绍”">​</a></h2><h3 id="_1-innodb表的优势" tabindex="-1">1. InnoDB表的优势 <a class="header-anchor" href="#_1-innodb表的优势" aria-label="Permalink to “1. InnoDB表的优势”">​</a></h3><p>InnoDB存储引擎在实际应用中拥有诸多优势，比如操作便利、提高了数据库的性能、维护成本低等。如果由于硬件或软件的原因导致服务器崩溃，那么在重启服务器之后不需要进行额外的操作。InnoDB崩溃恢复功能自动将之前提交的内容定型，然后撤销没有提交的进程，重启之后继续从崩溃点开始执行。</p><p>InnoDB存储引擎在主内存中维护缓冲池，高频率使用的数据将在内存中直接被处理。这种缓存方式应用于多种信息，加速了处理进程。</p><p>在专用服务器上，物理内存中高达80%的部分被应用于缓冲池。如果需要将数据插入不同的表中，可以设置外键加强数据的完整性。更新或者删除数据，关联数据将会被自动更新或删除。如果试图将数据插入从表，但在主表中没有对应的数据，插入的数据将被自动移除。如果磁盘或内存中的数据出现崩溃，在使用脏数据之前，校验和机制会发出警告。当每个表的主键都设置合理时，与这些列有关的操作会被自动优化。插入、更新和删除操作通过做改变缓冲自动机制进行优化。<code>InnoDB不仅支持当前读写，也会缓冲改变的数据到数据流磁盘。</code></p><p>InnoDB的性能优势不只存在于长时运行查询的大型表。在同一列多次被查询时，自适应哈希索引会提高查询的速度。使用InnoDB可以压缩表和相关的索引，可以<code>在不影响性能和可用性的情况下创建或删除索引</code>。对于大型文本和BLOB数据，使用动态行形式，这种存储布局更高效。通过查询INFORMATION_SCHEMA库中的表可以监控存储引擎的内部工作。在同一个语句中，InnoDB表可以与其他存储引擎表混用。即使有些操作系统限制文件大小为2GB，InnoDB仍然可以处理。<code>当处理大数据量时，InnoDB兼顾CPU，以达到最大性能。</code></p><h3 id="_2-innodb和acid模型" tabindex="-1">2. InnoDB和ACID模型 <a class="header-anchor" href="#_2-innodb和acid模型" aria-label="Permalink to “2. InnoDB和ACID模型”">​</a></h3><p>ACID模型是一系列数据库设计规则，这些规则着重强调可靠性，而可靠性对于商业数据和任务关键型应用非常重要。MySQL包含类似InnoDB存储引擎的组件，与ACID模型紧密相连，这样出现意外时，数据不会崩溃，结果不会失真。如果依赖ACID模型，可以不使用一致性检查和崩溃恢复机制。如果拥有额外的软件保护，极可靠的硬件或者应用可以容忍一小部分的数据丢失和不一致，可以将MySQL设置调整为只依赖部分ACID特性，以达到更高的性能。下面讲解InnoDB存储引擎与ACID模型相同作用的四个方面。</p><p><strong>1. 原子方面</strong> ACID的原子方面主要涉及InnoDB事务，与MySQL相关的特性主要包括：</p><ul><li>自动提交设置。</li><li>COMMIT语句。</li><li>ROLLBACK语句。</li><li>操作INFORMATION_SCHEMA库中的表数据。</li></ul><p><strong>2. 一致性方面</strong> ACID模型的一致性主要涉及保护数据不崩溃的内部InnoDB处理过程，与MySQL相关的特性</p><p>主要包括：</p><ul><li>InnoDB双写缓存。</li><li>InnoDB崩溃恢复。</li></ul><p><strong>3. 隔离方面</strong> 隔离是应用于事务的级别，与MySQL相关的特性主要包括：</p><ul><li>自动提交设置。</li><li>SET ISOLATION LEVEL语句。</li><li>InnoDB锁的低级别信息。</li></ul><p><strong>4. 耐久性方面</strong> ACID模型的耐久性主要涉及与硬件配置相互影响的MySQL软件特性。由于硬件复杂多样化，耐久性方面没有具体的规则可循。与MySQL相关的特性有：</p><ul><li>InnoDB双写缓存，通过innodb_doublewrite配置项配置。</li><li>配置项innodb_flush_log_at_trx_commit。</li><li>配置项sync_binlog。</li><li>配置项innodb_file_per_table。</li><li>存储设备的写入缓存。</li><li>存储设备的备用电池缓存。</li><li>运行MySQL的操作系统。</li><li>持续的电力供应。</li><li>备份策略。</li><li>对分布式或托管的应用，最主要的在于硬件设备的地点以及网络情况。</li></ul><h3 id="_3-innodb架构" tabindex="-1">3. InnoDB架构 <a class="header-anchor" href="#_3-innodb架构" aria-label="Permalink to “3. InnoDB架构”">​</a></h3><p><strong>1. 缓冲池</strong> 缓冲池是主内存中的一部分空间，用来缓存已使用的表和索引数据。缓冲池使得经常被使用的数据能够直接在内存中获得，从而提高速度。</p><p><strong>2. 更改缓存</strong> 更改缓存是一个特殊的数据结构，当受影响的索引页不在缓存中时，更改缓存会缓存辅助索引页的更改。索引页被其他读取操作时会加载到缓存池，缓存的更改内容就会被合并。不同于集群索引，辅助索引并非独一无二的。当系统大部分闲置时，清除操作会定期运行，将更新的索引页刷入磁</p><p>盘。更新缓存合并期间，可能会大大降低查询的性能。在内存中，更新缓存占用一部分InnoDB缓冲池。在磁盘中，更新缓存是系统表空间的一部分。更新缓存的数据类型由innodb_change_buffering配置项管理。</p><p><strong>3. 自适应哈希索引</strong> 自适应哈希索引将负载和足够的内存结合起来，使得InnoDB像内存数据库一样运行，不需要降低事务上的性能或可靠性。这个特性通过innodb_adaptive_hash_index选项配置，或者通过--skip-innodb_adaptive_hash_index命令行在服务启动时关闭。</p><p><strong>4. 重做日志缓存</strong> 重做日志缓存存放要放入重做日志的数据。重做日志缓存大小通过innodb_log_buffer_size配置项配置。重做日志缓存会定期地将日志文件刷入磁盘。大型的重做日志缓存使得大型事务能够正常运行而不需要写入磁盘。</p><p><strong>5. 系统表空间</strong> 系统表空间包括InnoDB数据字典、双写缓存、更新缓存和撤销日志，同时也包括表和索引数据。多表共享，系统表空间被视为共享表空间。</p><p><strong>6. 双写缓存</strong> 双写缓存位于系统表空间中，用于写入从缓存池刷新的数据页。只有在刷新并写入双写缓存后，InnoDB才会将数据页写入合适的位置。</p><p><strong>7. 撤销日志</strong> 撤销日志是一系列与事务相关的撤销记录的集合，包含如何撤销事务最近的更改。如果其他事务要查询原始数据，可以从撤销日志记录中追溯未更改的数据。撤销日志存在于撤销日志片段中，这些片段包含于回滚片段中。</p><p><strong>8. 每个表一个文件的表空间</strong> 每个表一个文件的表空间是指每个单独的表空间创建在自身的数据文件中，而不是系统表空间中。这个功能通过innodb_file_per_table配置项开启。每个表空间由一个单独的.ibd数据文件代表，该文件默认被创建在数据库目录中。</p><p><strong>9. 通用表空间</strong> 使用CREATE TABLESPACE语法创建共享的InnoDB表空间。通用表空间可以创建在MySQL数据目录之外能够管理多个表并支持所有行格式的表。</p><p><strong>10. 撤销表空间</strong> 撤销表空间由一个或多个包含撤销日志的文件组成。撤销表空间的数量由innodb_undo_tablespaces配置项配置。</p><p><strong>11. 临时表空间</strong> 用户创建的临时表空间和基于磁盘的内部临时表都创建于临时表空间。innodb_temp_data_file_path配置项定义了相关的路径、名称、大小和属性。如果该值为空，默认会在innodb_data_home_dir变量指定的目录下创建一个自动扩展的数据文件。</p><p><strong>12. 重做日志</strong> 重做日志是基于磁盘的数据结构，在崩溃恢复期间使用，用来纠正数据。正常操作期间，重做日志会将请求数据进行编码，这些请求会改变InnoDB表数据。遇到意外崩溃后，未完成的更改会自动在初始化期间重新进行。</p>',85),d=[n];function h(p,k,r,o,g,E){return i(),s("div",null,d)}const f=t(e,[["render",h]]);export{c as __pageData,f as default};
