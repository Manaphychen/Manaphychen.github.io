import{_ as t}from"./chunks/ArticleMetadata.H12JcJLK.js";import{_ as h,E as r,c as k,o as l,j as n,I as d,aj as o,w as c,b as g,e as C,a as A}from"./chunks/framework._AF764y6.js";const y="/assets/%E7%AC%AC02%E7%AB%A0_JVM%E6%9E%B6%E6%9E%84-%E7%AE%80%E5%9B%BE_AS9xH2yQnQ.COMxZ-2f.jpg",D="/assets/image-20240314040657658_EKc58aqtfB.Iz5rsmxa.png",B="/assets/1618063193101-841254db-f73e-4cdd-9cb0-565229ea5b10_vlOUQobMYA.VxL345vP.png",m="/assets/image-20240314162901148_Zr19w8RpAV.UkT-aS_X.png",E="/assets/image-20240314174958001_sC1Dvi2zmN.CTZ5w4g_.png",u="/assets/image_zdCte9Hd1h.BJCFhXZu.png",M=JSON.parse('{"title":"类加载子系统","description":"","frontmatter":{"title":"类加载子系统","date":"2024-03-14T03:44:52.000Z","permalink":"/jvm/class_loading_subsystem/","categories":["后端","JVM虚拟机","JVM内存"],"tags":[null],"author":"Manaphy"},"headers":[],"relativePath":"jvm/01.JVM内存/01.类加载子系统.md","filePath":"jvm/01.JVM内存/01.类加载子系统.md","lastUpdated":1744301414000}'),b={name:"jvm/01.JVM内存/01.类加载子系统.md"},L=n("h1",{id:"类加载子系统",tabindex:"-1"},[A("类加载子系统 "),n("a",{class:"header-anchor",href:"#类加载子系统","aria-label":"Permalink to “类加载子系统”"},"​")],-1),_=o('<h2 id="内存结构概述" tabindex="-1">内存结构概述 <a class="header-anchor" href="#内存结构概述" aria-label="Permalink to “内存结构概述”">​</a></h2><img src="'+y+'" alt="第02章_JVM架构-简图"><h2 id="类加载器与类的加载过程" tabindex="-1">类加载器与类的加载过程 <a class="header-anchor" href="#类加载器与类的加载过程" aria-label="Permalink to “类加载器与类的加载过程”">​</a></h2><p><img src="'+D+'" alt="image-20240314040657658"></p><p>类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识。</p><p>ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。</p><p>加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是 Class文件中常量池部分的内存映射）</p><h3 id="类加载过程" tabindex="-1">类加载过程 <a class="header-anchor" href="#类加载过程" aria-label="Permalink to “类加载过程”">​</a></h3><p><img src="'+B+'" alt="img"></p><h4 id="加载" tabindex="-1">加载 <a class="header-anchor" href="#加载" aria-label="Permalink to “加载”">​</a></h4><ol><li>通过一个类的全限定名获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化方法区的运行时数据结构</li><li><span style="color:red;">在内存中生成一个代表这个类的java.lang.Class对象</span>，作为方法区这个类的各种数据的访问入口</li></ol><div class="tip custom-block"><p class="custom-block-title">补充：加载.class文件的方式</p><ul><li>从本地系统中直接加载</li><li>通过网络获取，典型场景：Web Applet</li><li>从zip压缩包中读取，成为日后jar、war格式的基础</li><li>运行时计算生成，使用最多的是：动态代理技术</li><li>由其他文件生成，典型场景：JSP应用</li><li>从专有数据库中提取.class文件，比较少见</li><li>从加密文件中获取，典型的防Class文件被反编译的保护措施</li></ul></div><h4 id="链接" tabindex="-1">链接 <a class="header-anchor" href="#链接" aria-label="Permalink to “链接”">​</a></h4><h5 id="验证" tabindex="-1">验证 <a class="header-anchor" href="#验证" aria-label="Permalink to “验证”">​</a></h5><ul><li>目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。</li><li>主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。</li></ul><h5 id="准备" tabindex="-1">准备 <a class="header-anchor" href="#准备" aria-label="Permalink to “准备”">​</a></h5><ul><li><span style="color:red;">为类变量分配内存并且设置该类变量的默认初始值，即零值。</span></li><li><span style="color:blue;">这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显式初始化；</span></li><li><span style="color:blue;">这里不会为实例变量分配初始化</span>，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中。</li></ul><h5 id="解析" tabindex="-1">解析 <a class="header-anchor" href="#解析" aria-label="Permalink to “解析”">​</a></h5><ul><li>将常量池内的符号引用转换为直接引用的过程。</li><li>事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行。</li><li>符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《java虚拟机规范》的Class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</li><li>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT_Class_info、CONSTANT_Fieldref_info、 CONSTANT_Methodref_info等。</li></ul><h4 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to “初始化”">​</a></h4><ul><li><span style="color:blue;">初始化阶段就是执行类构造器方法<code>&lt;clinit&gt;()</code>的过程。</span></li><li>此方法不需定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。</li><li>构造器方法中指令按语句在源文件中出现的顺序执行。</li><li><span style="color:blue;"><code>&lt;clinit&gt;()</code>不同于类的构造器</span>。（关联：构造器是虚拟机视角下的<code>&lt;init&gt;()</code>） 若该类具有父类，JVM会保证子类的<code>&lt;clinit&gt;()</code>执行前，父类的<code>&lt;clinit&gt;()</code>已经执行完毕。</li><li>虚拟机必须保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程下被同步加锁。</li></ul><h2 id="类加载器分类" tabindex="-1">类加载器分类 <a class="header-anchor" href="#类加载器分类" aria-label="Permalink to “类加载器分类”">​</a></h2><p>JVM支持两种类型的类加载器，分别为<span style="color:red;">引导类加载器(Bootstrap ClassLoader)</span>和<span style="color:red;">自定义类加载器(User-Defined ClassLoader)</span>。</p><p>从概上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是<span style="color:red;">将所有派生于抽象类 ClassLoader的类加载器都划分为自定义类加载器</span>。</p><p>无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个，如下所示：</p><img src="'+m+`" alt="image-20240314162901148"><p><span style="color:red;">这里的四者之间的关系是包含关系。不是上层下层，也不是子父类的继承关系。</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取系统类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> systemClassLoader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ClassLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getSystemClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(systemClassLoader);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// sun.misc.Launcher$AppClassLoader@18b4aac2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取其上层: 扩展类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> extClassLoader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> systemClassLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getParent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(extClassLoader);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// sun.misc.Launcher$ExtClassLoader@6bc7c054</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取其上层: 获取不到引导类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> bootstrapClassLoader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> extClassLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getParent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bootstrapClassLoader);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 对于用户自定义来说: 默认使用系统类加载器进行加载</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> classLoader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ClassLoaderTest.class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(classLoader);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// sun.misc.Launcher$AppClassLoader@18b4aac2</span></span></code></pre></div><p>jdk9及以后</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取系统类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> systemClassLoader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ClassLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getSystemClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(systemClassLoader);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// jdk.internal.loader.ClassLoaders$AppClassLoader@1dbd16a6</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取其上层: 平台类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> platformClassLoader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> systemClassLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getParent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(platformClassLoader);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// jdk.internal.loader.ClassLoaders$PlatformClassLoader@543c6f6d</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取其上层: 获取不到引导类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> bootstrapClassLoader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> platformClassLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getParent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bootstrapClassLoader);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 对于用户自定义来说: 默认使用系统类加载器进行加载</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> classLoader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TempTest.class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(classLoader);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// jdk.internal.loader.ClassLoaders$AppClassLoader@1dbd16a6</span></span></code></pre></div><h3 id="虚拟机自带的加载器" tabindex="-1">虚拟机自带的加载器 <a class="header-anchor" href="#虚拟机自带的加载器" aria-label="Permalink to “虚拟机自带的加载器”">​</a></h3><p><strong>启动类加载器(引导类加载器，Bootstrap ClassLoader)</strong></p><p>这个类加载使用C/C++语言实现的， 嵌套在JVM内部。</p><p>它用来加载Java的核心库（JAVA_HOME/jre/1ib/rt.jar、 resources.jar或sun.boot.ciass.path路径下的内容），用于提供JVM自身需要的类</p><p>并不继承自java.lang.ClassLoader，没有父加载器。</p><p>加载扩展类和应用程序类加载器，并指定为他们的父类加载器。</p><p>出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类</p><p><strong>扩展类加载器(Extension ClassLoader)</strong></p><p><span style="color:red;">Java语言编写</span>，由sun.misc.Launcher$ExtClassLoader实现。</p><p><span style="color:red;">派生于ClassLoader类</span></p><p>父类加载器启动类加载器</p><p>从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的<code>jre/lib/ext</code>子目录（扩展目录）下加载类库。<span style="color:red;">如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载</span>。</p><p><strong>应用程序类加载器(系统类加载器，AppClassLoader)</strong></p><p>java语言编写，由sun.misc.Launcher$AppClassLoader实现</p><p>派生于ClassLoader类</p><p>父类加载器为扩展类加载器</p><p>它负责加载环境变量classpath或系统属性 java.class.path 指定路径下的类库</p><p><span style="color:red;">该类加载是程序中默认的类加载器</span>，一般来说，Java应用的类都是由它来完成加载</p><p>通过<code>ClassLoader.getSystemClassLoader()</code>方法可以获取到该类加载器</p><p><strong>用户自定义类加载器</strong></p><p>在Java的日常应用程序开发中，类的加载几乎是由上述3种类加载器相互配合执行的，在必要时，我们还可以自定义类加载器，来定制类的加载方式。</p><div class="tip custom-block"><p class="custom-block-title">为什么要自定义类加载器？</p><ul><li>隔离加载类</li><li>修改类加载的方式</li><li>扩展加载源</li><li>防止源码泄漏</li></ul></div><p>用户自定义类加载器实现步骤：</p><ol><li><p>开发人员可以通过继承抽象类<code>java.lang.ClassLoader</code>类的方式，实现自己的类加载器，以满足一些特殊的需求</p></li><li><p>在JDK1.2之前，在自定义类加载器时，总会去继承ClassLoader类并重写<code>loadClass()</code>方法，从而实现自定义的类加载类，但是在JDK1.2之后已不再建议用户去覆盖<code>loadClass()</code>方法，而是建议把自定义的类加载逻辑写在<code>findClass()</code>方法中</p></li><li><p>在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承<code>URLClassLoader</code>类，这样就可以避免自己去编写<code>findClass()</code>方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。</p></li></ol><p><strong>获取类加载器加载的路径</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-----引导类加载器-----&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取BootstrapClassLoader能够加载的api的路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">URL</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">urLs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Launcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBootstrapClassPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getURLs</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (URL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> urL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> urLs) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(urL);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-----扩展类加载器-----&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取扩展类加载器加载的路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> extensionDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;java.ext.dirs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> extensionDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>结果如下(这里使用了%JAVA_HOME%替换了真实的jar路径)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>-----引导类加载器-----</span></span>
<span class="line"><span>file:%JAVA_HOME%/jre/lib/resources.jar</span></span>
<span class="line"><span>file:%JAVA_HOME%/jre/lib/rt.jar</span></span>
<span class="line"><span>file:%JAVA_HOME%/jre/lib/sunrsasign.jar</span></span>
<span class="line"><span>file:%JAVA_HOME%/jre/lib/jsse.jar</span></span>
<span class="line"><span>file:%JAVA_HOME%/jre/lib/jce.jar</span></span>
<span class="line"><span>file:%JAVA_HOME%/jre/lib/charsets.jar</span></span>
<span class="line"><span>file:%JAVA_HOME%/jre/lib/jfr.jar</span></span>
<span class="line"><span>file:%JAVA_HOME%/jre/lib/cat.jar</span></span>
<span class="line"><span>file:%JAVA_HOME%/jre/classes</span></span>
<span class="line"><span>-----扩展类加载器-----</span></span>
<span class="line"><span>/Users/manaphy/Library/Java/Extensions</span></span>
<span class="line"><span>%JAVA_HOME%/jre/lib/ext</span></span>
<span class="line"><span>/Library/Java/Extensions</span></span>
<span class="line"><span>/Network/Library/Java/Extensions</span></span>
<span class="line"><span>/System/Library/Java/Extensions</span></span>
<span class="line"><span>/usr/lib/java</span></span></code></pre></div><h2 id="classloader的使用说明" tabindex="-1">ClassLoader的使用说明 <a class="header-anchor" href="#classloader的使用说明" aria-label="Permalink to “ClassLoader的使用说明”">​</a></h2><p><strong>关于ClassLoader</strong></p><p>ClassLoader类，它是一个抽象类，其后所有的类加载器都继承自 ClassLoader（不包括启动类加载器）</p><p><strong>获取ClassLoader的途径</strong></p><p>方式一：获取当前类的ClassLoader</p><p><code>clazz.getClassLoader()</code></p><p>方式二：获取当前线程上下文的ClassLoader</p><p><code>Thread.currentThread().getContextClassLoader()</code></p><p>方式三：获取系统的ClassLoader</p><p><code>ClassLoader.getSystemClassLoader()</code></p><p>方式四：获取调用者的ClassLoader</p><p><code>DriverManager.getCallerClassLoader()</code></p><h2 id="双亲委派机制" tabindex="-1">双亲委派机制 <a class="header-anchor" href="#双亲委派机制" aria-label="Permalink to “双亲委派机制”">​</a></h2><blockquote><p>Java虚拟机对class文件采用的是<span style="color:red;">按需加载</span>的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，Java虚拟机采用的是<span style="color:red;">双亲委派模式</span>，即把请求交由父类处理，它是一种任务委派模式。</p></blockquote><h3 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to “工作原理”">​</a></h3><ol><li><p>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行；</p></li><li><p>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达项层的启动类加载器；</p></li><li><p>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。</p></li></ol><img src="`+E+'" alt="image-20240314174958001"><img src="'+u+'" alt="img"><p><strong>优势</strong></p><ul><li>避免类的重复加载</li><li>保护程序安全，防止核心API被随意篡改</li></ul><h3 id="沙箱安全机制" tabindex="-1">沙箱安全机制 <a class="header-anchor" href="#沙箱安全机制" aria-label="Permalink to “沙箱安全机制”">​</a></h3><p>自定义String类，但是在加载自定义String类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载jdk自带的文件(rt. jar包中java\\lang\\String.class)，报错信息说没有main方法，就是因为加载的是rt.jar包中的String类。这样可以保证对java核心源代码的保护，这就是<span style="color:red;">沙箱安全机制</span>。</p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to “其他”">​</a></h2><h3 id="类的主动使用和被动使用" tabindex="-1">类的主动使用和被动使用 <a class="header-anchor" href="#类的主动使用和被动使用" aria-label="Permalink to “类的主动使用和被动使用”">​</a></h3><p>在JVM中表示两个class对象是否为同一个类存在两个必要条件：</p><ol><li>类的完整类名必须一致，包括包名。</li><li>加载这个类的ClassLoader（指ClassLoader实例对象）必须相同。</li></ol><p>换句话说，在JVM中，即使这两个类对象（class对象）来源同一个Class文件，被同一个虚拟机所加载，但只要加载它们的ClassLoader实例对象不同，那么这两个类对象也是不相等的。</p><p>JVM必须知道一个类型是由启动加载器加载的还是由用户类加载器加载的。如果一个类型是由用户类加载器加载的，那么JVM会<span style="color:red;">将这个类加载器的一个引用作为类型信息的一部分保存在方法区中</span>。当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载器是相同的。</p><p><strong>java程序对类的使用方式分为：主动使用和被动使用。</strong></p><p>主动使用，又分为七种情况：</p><ol><li>创建类的实例</li><li>访问某个类或接口的静态变量，或者对该静态变量赋值</li><li>调用类的静态方法</li><li>反射（比如：Class.forName(&quot;com.cgp.Test&quot;)）</li><li>初始化一个类的子类</li><li>java虚拟机启动时被标明为启动类的类</li><li>jdk7开始提供的动态语言支持： <ol><li>java.lang.invoke.MethodHandle实例的解析结果</li><li>REF_getStatic,REF_putStatic,REF_invokeStatic句柄对应的类没有初始化，则初始化</li></ol></li></ol><p>除了以上七种情况，其他使用java类的方式都被看作是对<span style="color:red;">类的被动使用</span>，都<span style="color:red;">不会导致类的初始化</span>。</p>',90);function F(s,v,j,f,J,x){const e=t,p=r("ClientOnly");return l(),k("div",null,[L,d(p,null,{default:c(()=>{var a,i;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((i=s.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(l(),g(e,{key:0,article:s.$frontmatter},null,8,["article"])):C("",!0)]}),_:1}),_])}const P=h(b,[["render",F]]);export{M as __pageData,P as default};
