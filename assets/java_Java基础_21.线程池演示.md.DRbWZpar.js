import{_ as s,c as i,o as a,aj as n}from"./chunks/framework._AF764y6.js";const l="/assets/GRmyYL.BRLFWb3q.gif",h="/assets/llZTcc.apS5AUyf.gif",t="/assets/9oydcz.CiGOtVsI.gif",e="/assets/COhi1G.BXgjU2g4.gif",p="/assets/Ki2nRC.DE6XE6Ej.gif",k="/assets/4NL7SW.C8NftC5-.png",B=JSON.parse('{"title":"线程池演示","description":"","frontmatter":{"title":"线程池演示","date":"2023-11-04T11:39:47.000Z","permalink":"/thread/demonstrate/","categories":["后端","Java基础"],"tags":["线程"],"author":"Manaphy"},"headers":[],"relativePath":"java/Java基础/21.线程池演示.md","filePath":"java/Java基础/21.线程池演示.md","lastUpdated":1743259133000}'),r={name:"java/Java基础/21.线程池演示.md"},d=n(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(r).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Executor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Runnable </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="第一版" tabindex="-1">第一版 <a class="header-anchor" href="#第一版" aria-label="Permalink to “第一版”">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 新线程：直接创建一个新线程运行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> FlashExecutor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Executor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Runnable </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(r).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>这是最根本的功能，Doug Lea 大神在 JDK 源码注释中给出的就是这样的例子</p><h2 id="第二版" tabindex="-1">第二版 <a class="header-anchor" href="#第二版" aria-label="Permalink to “第二版”">​</a></h2><p>假如有 10000 个人都调用这个工具类提交任务，那就会创建 10000 个线程来执行</p><p>把这个任务 r 丢到一个 tasks 队列中，然后只启动一个线程，就叫它 <strong>Worker</strong> 线程，不断从 tasks 队列中取任务，执行任务。这样无论调用者调用多少次，永远就只有一个 Worker 线程在运行，像这样。</p><p><img src="`+l+'" alt="640.gif"></p><p>这个设计有了三个重大的意义：</p><ol><li>控制了线程数量。</li><li>队列不但起到了缓冲的作用，还将任务的提交与执行解耦了。</li><li>最重要的一点是，解决了每次重复创建和销毁线程带来的系统开销。</li></ol><h2 id="第三版" tabindex="-1">第三版 <a class="header-anchor" href="#第三版" aria-label="Permalink to “第三版”">​</a></h2><p>只有一个后台的工作线程 Worker 太少了，还有如果这个 tasks 队列满了怎么办呢？</p><p>Worker 线程的数量要增加，但是具体数量要让使用者决定，调用时传入，就叫核心线程数 <strong>corePoolSize</strong></p><p><img src="'+h+'" alt="640.gif"></p><ol><li>初始化线程池时，直接启动 corePoolSize 个工作线程 Worker 先跑着。</li><li>这些 Worker 就是死循环从队列里取任务然后执行。</li><li>execute 方法仍然是直接把任务放到队列，但队列满了之后直接抛弃</li></ol><h2 id="第四版" tabindex="-1">第四版 <a class="header-anchor" href="#第四版" aria-label="Permalink to “第四版”">​</a></h2><p>初始化的时候，就创建了一堆 Worker 线程在那空跑着，假如此时并没有异步任务提交过来执行，这就有点浪费了</p><p>队列一满，就直接把新任务丢弃了，这样有些粗暴，能不能让调用者自己决定该怎么处理呢？</p><ol><li><strong>按需创建Worker</strong>：刚初始化线程池时，不再立刻创建 corePoolSize 个工作线程，而是等待调用者不断提交任务的过程中，逐渐把工作线程 Worker 创建出来，等数量达到 corePoolSize 时就停止，把任务直接丢到队列里。那就必然要用一个属性记录已经创建出来的工作线程数量，就叫 workCount 吧。</li><li><strong>加拒绝策略</strong>：实现上就是增加一个入参，类型是一个接口 RejectedExecutionHandler，由调用者决定实现类，以便在任务提交失败后执行 rejectedExecution 方法。</li><li><strong>增加线程工厂</strong>：实现上就是增加一个入参，类型是一个接口 ThreadFactory，增加工作线程时不再直接 new 线程，而是调用这个由调用者传入的 ThreadFactory 实现类的 newThread 方法。</li></ol><p><img src="'+t+'" alt="640.gif"></p><h2 id="第五版" tabindex="-1">第五版 <a class="header-anchor" href="#第五版" aria-label="Permalink to “第五版”">​</a></h2><p>当提交任务的量突增时，工作线程和队列都被占满了，就只能走拒绝策略，其实就是被丢弃掉</p><p><img src="'+e+'" alt="640.gif"></p><p>可以使用一个新的属性，叫最大线程数 <strong>maximumPoolSize</strong>。当核心线程数和队列都满了时，新提交的任务仍然可以通过创建新的工作线程（叫它<strong>非核心线程</strong>），直到工作线程数达到 maximumPoolSize 为止，这样就可以缓解一时的高峰期了，而用户也不用设置过大的核心线程数。</p><p><img src="https://www.pnglog.com/M5oscZ.gif" alt="640.gif"></p><ol><li>开始的时候和上一版一样，当 workCount &lt; corePoolSize 时，通过创建新的 Worker 来执行任务。</li><li>当 workCount &gt;= corePoolSize 就停止创建新线程，把任务直接丢到队列里。</li><li>但当队列已满且仍然 workCount &lt; maximumPoolSize 时，不再直接走拒绝策略，而是创建非核心线程，直到 workCount = maximumPoolSize，再走拒绝策略。</li></ol><p>这样 corePoolSize 就负责平时大多数情况所需要的工作线程数，而 maximumPoolSize 就负责在高峰期临时扩充工作线程数。</p><p>高峰时期的弹性搞定了，那自然就还要考虑低谷时期。当长时间没有任务提交时，核心线程与非核心线程都一直空跑着，浪费资源。我们可以给非核心线程设定一个超时时间 keepAliveTime，当这么长时间没能从队列里获取任务时，就不再等了，销毁线程。</p><p><img src="'+p+`" alt="640 (1).gif"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h2><p>ThreadPoolExecutor的构造方法(JDK17)</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> corePoolSize, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 核心线程数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                          int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> maximumPoolSize, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 最大线程数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                          long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keepAliveTime, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 非核心线程的空闲时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                          TimeUnit unit, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 空闲时间的单位</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                          BlockingQueue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Runnable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> workQueue, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 任务队列(线程安全的阻塞队列)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                          ThreadFactory threadFactory, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 线程工厂</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                          RejectedExecutionHandler handler </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 拒绝策略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                         ) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (corePoolSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        maximumPoolSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        maximumPoolSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> corePoolSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        keepAliveTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> IllegalArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (workQueue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> threadFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> NullPointerException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.corePoolSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> corePoolSize;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.maximumPoolSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> maximumPoolSize;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.workQueue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> workQueue;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.keepAliveTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> unit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toNanos</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(keepAliveTime);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.threadFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> threadFactory;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> handler;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>整个任务的提交流程是</p><p><img src="`+k+'" alt="image.png"></p>',35),o=[d];function g(A,c,y,C,D,F){return a(),i("div",null,o)}const u=s(r,[["render",g]]);export{B as __pageData,u as default};
