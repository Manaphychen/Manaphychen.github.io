import{_ as r}from"./chunks/ArticleMetadata.H12JcJLK.js";import{_ as i,E as n,c,o as s,j as p,I as d,aj as h,w as m,b as u,e as b,a as J}from"./chunks/framework._AF764y6.js";const C="/assets/image-20240323114329929_oTCpil5cne.CcjZiQTB.png",_="/assets/image-20240323114654775_a3IkRznn50.C3wSlXMM.png",v="/assets/image-20240323114956086_L2azJeploh.CTj5y4-q.png",g="/assets/image-20240323115138943_uCWF2IHlyL.C_zM423t.png",y="/assets/image-20240323115316729_TKrWLBPXtD.YmilIsBI.png",T="/assets/image-20240323115531262_XBWNJCfO46.B_sd9Ea_.png",f="/assets/image-20240323120349160_7YDu3NKGpv.CL5HcVoN.png",k="/assets/image-20240323144037489_oUyW5jFWTZ.CZZVGzuv.png",M="/assets/image-20240323144430132_WpWxePY8X2.CFoaeqy_.png",P="/assets/image-20240323144616097_BDxYhTMmcX.pejH_4Cf.png",x="/assets/image-20240404130207895.c9Ey3hhB.png",V="/assets/image-20240404133000794.lic07-vB.png",I="/assets/image-20240404133424440.C756x0At.png",U=JSON.parse('{"title":"执行引擎","description":"","frontmatter":{"title":"执行引擎","date":"2024-03-23T11:36:52.000Z","permalink":"/jvm/execution_engine/","categories":["后端","JVM虚拟机","JVM内存"],"tags":[null],"author":"Manaphy"},"headers":[],"relativePath":"jvm/01.JVM内存/08.执行引擎.md","filePath":"jvm/01.JVM内存/08.执行引擎.md","lastUpdated":1743618064000}'),S={name:"jvm/01.JVM内存/08.执行引擎.md"},j=p("h1",{id:"执行引擎",tabindex:"-1"},[J("执行引擎 "),p("a",{class:"header-anchor",href:"#执行引擎","aria-label":"Permalink to “执行引擎”"},"​")],-1),H=h('<h2 id="执行引擎概述" tabindex="-1">执行引擎概述 <a class="header-anchor" href="#执行引擎概述" aria-label="Permalink to “执行引擎概述”">​</a></h2><img src="'+C+'" alt="image-20240323114329929"><p>执行引擎是Java虚拟机核心的组成部分之一。</p><p>“虚拟机”是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而<span style="color:red;">虚拟机的执行引擎则是由软件自行实现的</span>，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，<span style="color:red;">能够执行那些不被硬件直接支持的指令集格式</span>。</p><p>JVM的主要任务是负责<span style="color:red;">装载字节码到其内部</span>，但字节码并不能够直接运行在操作系统之上，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被JVM所识别的字节码指令、符号表，以及其他辅助信息。</p><p>那么，如果想要让一个Java程序运行起来，执行引擎(Execution Engine)的任务就是<span style="color:red;">将字节码指令解释/编译对应平台上的本地机器指令才可以</span>。简单来说，JVM中的执行引擎充当了将高级语言翻译为机器语言的译者。</p><img src="'+_+'" alt="image-20240323114654775"><h3 id="执行引擎的工作过程" tabindex="-1">执行引擎的工作过程 <a class="header-anchor" href="#执行引擎的工作过程" aria-label="Permalink to “执行引擎的工作过程”">​</a></h3><ol><li>执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于PC寄存器。</li><li>每当执行完一项指令操作后，PC寄存器就会更新下一条需要被执行的指令地址。</li><li>当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在Java堆区中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息。</li></ol><img src="'+v+'" alt="image-20240323114956086"><p>从外观上来看，所有的Java虚拟机的执行引擎输入，输出都是一致的：输入的是字节码二进制流，处理过程是字节码解析执行的等效过程，输出的是执行结果。</p><h2 id="java代码编译和执行过程" tabindex="-1">Java代码编译和执行过程 <a class="header-anchor" href="#java代码编译和执行过程" aria-label="Permalink to “Java代码编译和执行过程”">​</a></h2><img src="'+g+'" alt="image-20240323115138943"><p>大部分的程序代码转换成物理机的目标代码或虚拟机能执行的指令集之前，都需要经过上图中的各个步骤。</p><p>Java代码编译是由Java源码编译器(前端编译器)来完成，流程图如下所示：</p><img src="'+y+'" alt="image-20240323115316729"><p>Java字节码的执行是由JVM执行引擎(后端编译器)来完成，流程图如下所示：</p><img src="'+T+'" alt="image-20240323115531262"><div class="tip custom-block"><p class="custom-block-title">什么是解释器(Interpreter)，什么是JIT编译器？</p><p>解释器：当Java虚拟机启动时会根据预定义的规范<span style="color:blue;">对字节码采用逐行解释的方式执行</span>，将每条字节码文件中的内容“翻译”为对应平台的本地机器指令执行。</p><p>JIT(Just In Time Compiler)编译器：就是虚拟机将源代码直接编译成和本地机器平台相关的机器语言。</p></div><div class="tip custom-block"><p class="custom-block-title">为什么说Java是半编译半解释型语言？</p><p>JDK1.0时代，将Java语言定位为“解释执行”还是比较准确的。再后来，Java也发展出可以直接生成本地代码的编译器。</p><p>现在JVM在执行Java代码的时候，通常都会将解释执行与编译执行二者结合起来进行。</p></div><img src="'+f+'" alt="image-20240323120349160"><h2 id="机器码、指令、汇编语言" tabindex="-1">机器码、指令、汇编语言 <a class="header-anchor" href="#机器码、指令、汇编语言" aria-label="Permalink to “机器码、指令、汇编语言”">​</a></h2><h3 id="机器码" tabindex="-1">机器码 <a class="header-anchor" href="#机器码" aria-label="Permalink to “机器码”">​</a></h3><p>各种用二进制编码方式表示的指令，叫做机器指令码。开始，人们就用它采编写程序，这就是机器语言。</p><p>机器语言虽然能够被计算机理解和接受，但和人们的语言差别太大，不易被人们理解和记忆，并且用它编程容易出差错。</p><p>用它编写的程序一经输入计算机，CPU直接读取运行，因此和其他语言编的程序相比，执行速度最快。</p><p>机器指令与CPU紧密相关，所以不同种类的CPU所对应的机器指令也就不同。</p><h3 id="指令" tabindex="-1">指令 <a class="header-anchor" href="#指令" aria-label="Permalink to “指令”">​</a></h3><p>由于机器码是有0和1组成的二进制序列，可读性实在太差，于是人们发明了指令。</p><p>指令就是把机器码中特定的0和1序列，简化成对应的指令（一般为英文简写，如mov，inc等），可读性稍好</p><p>由于不同的硬件平台，执行同一个操作，对应的机器码可能不同，所以不同的硬件平台的同一种指令（比如mov），对应的机器码也可能不同。</p><h3 id="指令集" tabindex="-1">指令集 <a class="header-anchor" href="#指令集" aria-label="Permalink to “指令集”">​</a></h3><p>不同的硬件平台，各自支持的指令，是有差别的。因此每个平台所支持的指令，称之为对应平台的指令集。 如常见的</p><ul><li>x86指令集，对应的是x86架构的平台</li><li>ARM指令集，对应的是ARM架构的平台</li></ul><h3 id="汇编语言" tabindex="-1">汇编语言 <a class="header-anchor" href="#汇编语言" aria-label="Permalink to “汇编语言”">​</a></h3><p>由于指令的可读性还是太差，于是人们又发明了汇编语言。</p><p>在汇编语言中，用<span style="color:red;">助记符(Mnemonics)</span>代替<span style="color:blue;">机器指令的操作码</span>，用<span style="color:red;">地址符号(Symbol)或标号(Label)</span>代替<span style="color:blue;">指令或操作数的地址</span>。</p><p>在不同的硬件平台，汇编语言对应着不同的机器语言指令集，通过汇编过程转換成机器指令。</p><ul><li>由于计算机只认识指令码，所以用<span style="color:blue;">汇编语言编写的程序还必须翻译成机器指令码</span>，计算机才能识别和执行。</li></ul><h3 id="高级语言" tabindex="-1">高级语言 <a class="header-anchor" href="#高级语言" aria-label="Permalink to “高级语言”">​</a></h3><p>为了使计算机用户编程序更容易些，后来就出现了各种高级计算机语言。高级语言比机器语言、汇编语言<span style="color:blue;">更接近人的语言</span>。</p><p>当计算机执行高级语言编写的程序时，<span style="color:blue;">仍然需要把程序解释和编译成机器的指令码</span>。完成这个过程的程序就叫做解释程序或编译程序。</p><img src="'+k+'" alt="image-20240323144037489"><p>高级语言也不是直接翻译成机器指令，而是翻译成汇编语言码，如下面说的C和C++</p><p><strong>C、C++源程序执行过程</strong></p><p>编译过程又可以分成两个阶段：编译和汇编。</p><p>编译过程：是读取源程序（字符流），对之进行词法和语法的分析，将高级语言指令转换为功能等效的汇编代码</p><p>汇编过程：实际上指把汇编语言代码翻译成目标机器指令的过程。</p><img src="'+M+'" alt="image-20240323144430132"><h3 id="字节码" tabindex="-1">字节码 <a class="header-anchor" href="#字节码" aria-label="Permalink to “字节码”">​</a></h3><p>字节码是一种<span style="color:blue;">中间状态（中间码）的二进制代码</span>（文件），它比机器码更抽象，需要直译器转译后才能成为机器码。</p><p>字节码主要为了实现特定软件运行和软件环境、<span style="color:blue;">与硬件环境无关</span>。</p><p>字节码的实现方式是通过编译器和虚拟机器。编译器将源码编译成字节码，特定平台上的虚拟机器将字节码转译为可以直接执行的指令。</p><ul><li>字节码的典型应用为Java bytecode。</li></ul><h2 id="解释器" tabindex="-1">解释器 <a class="header-anchor" href="#解释器" aria-label="Permalink to “解释器”">​</a></h2><p>JVM设计者们的初衷仅仅只是单纯地<span style="color:red;">为了满足Java程序实现跨平台特性</span>，因此避免采用静态编译的方式直接生成本地机器指令，从而诞生了实现解释器在运行时采用逐行解释字节码执行程序的想法。</p><img src="'+P+'" alt="image-20240323144616097"><h3 id="解释器工作机制-或工作任务" tabindex="-1">解释器工作机制(或工作任务) <a class="header-anchor" href="#解释器工作机制-或工作任务" aria-label="Permalink to “解释器工作机制(或工作任务)”">​</a></h3><p>解释器真正意义上所承担的角色就是一个运行时“翻译者”，将字节码文件中的内容“翻译”为对应平台的本地机器指令执行。</p><p>当一条字节码指令被解释执行完成后，接着再根据PC寄存器中记录的下一条需要被执行的字节码指令执行解释操作。</p><h3 id="解释器分类" tabindex="-1">解释器分类 <a class="header-anchor" href="#解释器分类" aria-label="Permalink to “解释器分类”">​</a></h3><p>在Java的发展历史里，一共有两套解释执行器，即古老的<span style="color:red;">字节码解释器</span>、现在普遍使用的<span style="color:red;">模板解释器</span>。</p><ul><li>字节码解释器在执行时通过<span style="color:blue;">纯软件代码</span>模拟字节码的执行，效率非常低下。</li><li>而模板解释器将<span style="color:blue;">每一条字节码和一个模板函数相关联</span>，模板函数中直接产生这条字节码执行时的机器码，从而很大程度上提高了解释器的性能。</li><li>在HotSpot VM中，解释器主要由Interpreter模块和Code模块构成。 <ul><li>Interpreter模块：实现了解释器的核心功能</li><li>Code模块：用于管理HotSpot V在运行时生成的本地机器指令</li></ul></li></ul><h3 id="现状" tabindex="-1">现状 <a class="header-anchor" href="#现状" aria-label="Permalink to “现状”">​</a></h3><p>由于解释器在设计和实现上非常简单，因此除了Java语言之外，还有许多高级语言同样也是基于解释器执行的，比如Python、Perl、Ruby等。但是在今天，<span style="color:blue;">基于解释器执行已经沦落为低效的代名词</span>，并且时常被一些C/C++程序员所调侃。</p><p>为了解决这个问题，JVM平台支持一种叫作即时编译的技术。即时编译的目的是避免函数被解释执行，而是<span style="color:blue;">将整个函数体编译成为机器码，每次函数执行时，只执行编译后的机器码即可</span>，这种方式可以使执行效率大幅度提升。</p><p>不过无论如何，基于解释器的执行模式仍然为中间语言的发展做出了不可磨灭的贡献。</p><h2 id="jit编译器" tabindex="-1">JIT编译器 <a class="header-anchor" href="#jit编译器" aria-label="Permalink to “JIT编译器”">​</a></h2><h3 id="java代码的执行分类" tabindex="-1">Java代码的执行分类 <a class="header-anchor" href="#java代码的执行分类" aria-label="Permalink to “Java代码的执行分类”">​</a></h3><ul><li>第一种是将源代码编译成字节码文件，然后在运行时通过解释器将字节码文件转为机器码执行</li><li>第二种是编译执行（直接编译成机器码，但是要知道不同机器上编译的机器码是不一样，而字节码是可以跨平台的）。现代虚拟机为了提高执行效率，会使用即时编译技术（JIT，Just In Time）将方法编译成机器码后再执行。</li></ul><p>HotSpot VM是目前市面上高性能虚拟机的代表作之一。它采用<span style="color:blue;">解释器与即时编译器并存的架构</span>。在Java虚拟机运行时，解释器和即时编译器能够相互协作，各自取长补短，尽力去选择最合适的方式来权衡编译本地代码的时间和直接解释执行代码的时间。</p><p>在今天，Java程序的运行性能早已脱胎换骨，已经达到了可以和C/C++ 程序一较高下的地步。</p><p><strong>问题来了</strong></p><p>有些开发人员会感觉到诧异，<span style="color:blue;">既然HotSpot VM中已经内置JIT编译器了，那么为什么还需要再使用解释器来“拖累”程序的执行性能呢？</span>比如JRockit VM内部就不包含解释器，字节码全部都依靠即时编译器编译后执行。</p><p>首先明确： <br>当程序启动后，解释器可以马上发挥作用，省去编译的时间，立即执行。 编译器要想发挥作用，把代码编译成本地代码，需要一定的执行时间。但编译为本地代码后，执行效率高。</p><p>所以： <br>尽管JRockit VM中程序的执行性能会非常高效，但程序在启动时必然需要花费更长的时间来进行编译。对于服务端应用来说，启动时间并非是关注重点，但对于那些看中启动时间的应用场景而言，或许就需要采用解释器与即时编译器并存的架构来换取一个平衡点。在此模式下，<span style="color:red;">当Java虚拟器启动时，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成后再执行，这样可以省去许多不必要的编译时间。随着时间的推移，编译器发挥作用，把越来越多的代码编译成本地代码，获得更高的执行效率。</span></p><p>同时，解释执行在编译器进行激进优化不成立的时候，作为编译器的“逃生门”。</p><h3 id="hotspot-jvm执行方式" tabindex="-1">HotSpot JVM执行方式 <a class="header-anchor" href="#hotspot-jvm执行方式" aria-label="Permalink to “HotSpot JVM执行方式”">​</a></h3><p>当虚拟机启动的时候，<span style="color:blue;">解释器可以首先发挥作用</span>，而不必等待即时编译器全部编译完成再执行，这样可以<span style="color:blue;">省去许多不必要的编译时间</span>。并且随着程序运行时间的推移，即时编译器逐渐发挥作用，根据热点探测功能，<span style="color:blue;">将有价值的字节码编译为本地机器指令</span>，以换取更高的程序执行效率。</p><p><strong>案例来了</strong></p><p>注意解释执行与编译执行在线上环境微妙的辩证关系。机<span style="color:blue;">器在热机状态可以承受的负载要大于冷机状态</span>。如果以热机状态时的流量进行切流，可能使处于冷机状态的服务器因无法承载流量而假死。</p><p>在生产环境发布过程中，以分批的方式进行发布，根据机器数量划分成多个批次，每个批次的机器数至多占到整个集群的1/8。曾经有这样的故障案例：某程序员在发布平台进行分批发布，在输入发布总批数时，误填写成分为两批发布。如果是热机状态，在正常情况下一半的机器可以勉强承载流量，但由于刚启动的JVM均是解释执行，还没有进行热点代码统计和JIT动态编译，导致机器启动之后，当前1/2发布成功的服务器马上全部宕机，此故障说明了JIT的存在。---阿里团队</p><p><img src="'+x+'" alt="image-20240404130207895"></p><h3 id="概念解释" tabindex="-1">概念解释 <a class="header-anchor" href="#概念解释" aria-label="Permalink to “概念解释”">​</a></h3><p>Java 语言的“编译期”其实是一段“不确定”的操作过程，因为它可能是指一个<span style="color:blue;">前端编译器</span>（其实叫“编译器的前端”更准确一些）把.java文件转变成.class文件的过程。</p><p>也可能是指虚拟机的<span style="color:blue;">后端运行期编译器</span>（<strong>JIT编译器</strong>，Just In Time Compiler）把字节码转变成机器码的过程。</p><p>还可能是指使用<span style="color:blue;">静态提前编译器</span>（AOT编译器，Ahead of Time Compiler）直接把.java文件编译成本地机器代码的过程。</p><ul><li>前端编译器：Sun的Javac、Eclipse JDT中的增量式编译器（ECJ）。</li><li>JIT编译器：HotSpot VM的C1、C2编译器。</li><li>AOT 编译器：GNU Compiler for the Java（GCJ）、Excelsior JET。</li></ul><h3 id="热点代码及探测技术" tabindex="-1">热点代码及探测技术 <a class="header-anchor" href="#热点代码及探测技术" aria-label="Permalink to “热点代码及探测技术”">​</a></h3><p>当然是否需要启动JIT编译器将字节码直接编译为对应平台的本地机器指令，则需要根据代码被调用<span style="color:red;">执行的频率而定</span>。关于那些需要被编译为本地代码的字节码，也被称之为“<span style="color:red;">热点代码</span>”，JIT编译器在运行时会针对那些频繁被调用的“热点代码”做出<span style="color:red;">深度优化</span>，将其直接编译对应平台的本地机器指令，以此提升Java程序的执行性能。</p><p><span style="color:blue;">一个被多次调用的方法，或者是一个方法体内部循环次数较多的循环体都可以被称之为“热点代码”</span>，因此都可以通过JIT编译器编译为本地机器指令。由于这种编译方式发生在方法的执行过程中，因此被称之为栈上替换，或简称为<span style="color:red;">OSR（On Stack Replacement）编译</span>。</p><p>一个方法究竟<span style="color:blue;">要被调用多少次</span>，或者一个循环体究竟需要执行多少次循环才可以达到这个标准？必然需要一个明确的阈值，JIT编译器才会将这些“热点代码”编译为本地机器指令执行。这里主要依靠<span style="color:red;">热点探测功能</span>。</p><p><span style="color:red;">目前HotSpot VM所采用的热点探测方式是基于计数器的热点探测。</span></p><p>采用基于计数器的热点探测，HotSpot VM将会为每一个方法都建立2个不同类型的计数器，分别为方法调用计数器（Invocation Counter）和回边计数器（Back Edge Counter）。</p><ul><li>方法调用计数器用于统计方法的调用次数</li><li>回边计数器则用于统计循环体执行的循环次数</li></ul><h4 id="方法调用计数器" tabindex="-1">方法调用计数器 <a class="header-anchor" href="#方法调用计数器" aria-label="Permalink to “方法调用计数器”">​</a></h4><p>这个计数器就用于统计方法被调用的次数，它的默认阀值在Client模式下是1500次，在Server模式下是10000次。超过这个阈值，就会触发JIT编译。</p><p>这个阀值可以通过虚拟机参数 <code>-XX:CompileThreshold</code>来人为设定。</p><p>当一个方法被调用时，会先检查该方法是否存在被JIT编译过的版本，如果存在，则优先使用编译后的本地代码来执行。如果不存在已被编译过的版本，则将此方法的调用计数器值加1，然后判断<span style="color:blue;">方法调用计数器与回边计数器值之和</span>是否超过方法调用计数器的阀值。如果已超过阈值，那么将会向即时编译器提交一个该方法的代码编译请求。</p><p><img src="'+V+'" alt="image-20240404133000794"></p><p><strong>热点衰减</strong></p><p>如果不做任何设置，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即<span style="color:blue;">一段时间之内方法被调用的次数</span>。当超过<span style="color:red;">一定的时间限度</span>，如果方法的调用次数仍然不足以让它提交给即时编译器编译，那这个方法的调用计数器就会被<span style="color:red;">减少一半</span>，这个过程称为方法调用计数器热度的<span style="color:red;">衰减（Counter Decay）</span>，而这段时间就称为此方法统计的<span style="color:red;">半衰周期（Counter Half Life Time）</span>。</p><p>进行热度衰减的动作是在虚拟机进行垃圾收集时顺便进行的，可以使用虚拟机参数 <code>-XX:-UseCounterDecay</code> 来关闭热度衰减，让方法计数器统计方法调用的绝对次数，这样，只要系统运行时间足够长，绝大部分方法都会被编译成本地代码。</p><p>另外，可以使用<code>-XX:CounterHalfLifeTime</code>参数设置半衰周期的时间，单位是秒。</p><h4 id="回边计数器" tabindex="-1">回边计数器 <a class="header-anchor" href="#回边计数器" aria-label="Permalink to “回边计数器”">​</a></h4><p>它的作用是统计一个方法中<strong>循环体代码执行的次数</strong>，在字节码中遇到控制流向后跳转的指令称为“回边”（Back Edge）。显然，建立回边计数器统计的目的就是为了触发OSR编译。</p><p><img src="'+I+'" alt="image-20240404133424440"></p><h3 id="hotspotvm-可以设置程序执行方法" tabindex="-1">HotSpotVM 可以设置程序执行方法 <a class="header-anchor" href="#hotspotvm-可以设置程序执行方法" aria-label="Permalink to “HotSpotVM 可以设置程序执行方法”">​</a></h3><p>缺省情況下HotSpot VM是采用解释器与即时编译器并存的架构，当然开发人员可以根据具体的应用场景，通过命令显式地为Java虚拟机指定在运行时到底是完全采用解释器执行，还是完全采用即时编译器执行。如下所示：</p><ul><li><code>-Xint</code>：完全采用解释器模式执行程序；</li><li><code>-Xcomp</code>：完全采用即时编译器模式执行程序。如果即时编译出现问题，解释器会介入执行</li><li><code>-Xmixed</code>：采用解释器+即时编译器的混合模式共同执行程序。</li></ul><h3 id="hotspotvm中-jit-分类" tabindex="-1">HotSpotVM中 JIT 分类 <a class="header-anchor" href="#hotspotvm中-jit-分类" aria-label="Permalink to “HotSpotVM中 JIT 分类”">​</a></h3><p>JIT的编译器还分为了两种，分别是C1和C2，在HotSpot VM中内嵌有两个JIT编译器，分别为Client Compiler和Server Compiler，但大多数情况下我们简称为C1编译器 和 C2编译器。开发人员可以通过如下命令显式指定Java虚拟机在运行时到底使用哪一种即时编译器，如下所示：</p><ul><li><p><code>-client</code>：指定Java虚拟机运行在Client模式下，并使用C1编译器；</p><ul><li>C1编译器会对字节码进行<span style="color:red;">简单和可靠的优化，耗时短</span>。以达到更快的编译速度。</li></ul></li><li><p><code>-server</code>：指定Java虚拟机运行在server模式下，并使用C2编译器。</p><ul><li>C2进行<span style="color:red;">耗时较长的优化，以及激进优化</span>。但优化的代码执行效率更高。</li></ul></li></ul><p><span style="color:red;">分层编译（Tiered Compilation）策略</span>：程序解释执行（不开启性能监控）可以触发C1编译，将字节码编译成机器码，可以进行简单优化，也可以加上性能监控，C2编译会根据性能监控信息进行激进优化。</p><p>不过在Java7版本之后，一旦开发人员在程序中显式指定命令“-server&quot;时，默认将会开启分层编译策略，由C1编译器和C2编译器相互协作共同来执行编译任务。</p><h4 id="c1-和-c2编译器不同的优化策略" tabindex="-1">C1 和 C2编译器不同的优化策略 <a class="header-anchor" href="#c1-和-c2编译器不同的优化策略" aria-label="Permalink to “C1 和 C2编译器不同的优化策略”">​</a></h4><p>在不同的编译器上有不同的优化策略，C1编译器上主要有方法内联、去虚拟化、冗余消除。</p><ul><li>方法内联：将引用的函数代码编译到引用点处，这样可以减少栈帧的生成，减少参数传递以及跳转过程</li><li>去虚拟化：对唯一的实现类进行内联</li><li>冗余消除：在运行期间把一些不会执行的代码折叠掉</li></ul><p>C2的优化主要是在全局层面，逃逸分析（前面讲过，并不成熟）是优化的基础。基于逃逸分析在C2上有如下几种优化：</p><ul><li>标量替换：用标量值代替聚合对象的属性值</li><li>栈上分配：对于未逃逸的对象分配对象在栈而不是堆</li><li>同步消除：清除同步操作，通常指synchronized</li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h3><p>一般来讲，JIT编译出来的机器码性能比解释器高。C2编译器启动时长比C1慢，系统稳定执行以后，C2编译器执行速度远快于C1编译器</p><h3 id="写到最后" tabindex="-1">写到最后 <a class="header-anchor" href="#写到最后" aria-label="Permalink to “写到最后”">​</a></h3><p>自JDK10起，HotSpot又加入了一个全新的及时编译器：Graal编译器，编译效果短短几年时间就追评了C2编译器，未来可期</p><p>目前，带着实验状态标签，需要使用开关参数<code>-XX:+UnlockExperimentalvMOptions -XX:+UseJVMCICompiler</code>去激活才能使用</p><p>jdk9引入了AOT编译器（静态提前编译器，Ahead of Time Compiler）</p><p>Java 9引入了实验性AOT编译工具<span style="color:blue;">jaotc</span>。它借助了Graal编译器，将所输入的Java类文件转换为机器码，并存放至生成的动态共享库之中。</p><p>所谓AOT编译，是与即时编译相对立的一个概念。我们知道，即时编译指的是在<span style="color:blue;">程序的运行过程中</span>，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而AOT编译指的则是，在<span style="color:blue;">程序运行之前</span>，便将字节码转换为机器码的过程。</p><p>最大的好处：Java虚拟机加载已经预编译成二进制库，可以直接执行。不必等待及时编译器的预热，减少Java应用给人带来“第一次运行慢” 的不良体验</p><p>缺点：</p><ul><li>破坏了 java “一次编译，到处运行”的理念，必须为每个不同的硬件，OS编译对应的发行包</li><li><span style="color:blue;">降低了Java链接过程的动态性</span>，加载的代码在编译器就必须全部已知。</li><li>还需要继续优化中，最初只支持Linux X64 java base</li></ul>',131);function X(a,A,O,B,E,N){const o=r,t=n("ClientOnly");return s(),c("div",null,[j,d(t,null,{default:m(()=>{var e,l;return[(((e=a.$frontmatter)==null?void 0:e.aside)??!0)&&(((l=a.$frontmatter)==null?void 0:l.showArticleMetadata)??!0)?(s(),u(o,{key:0,article:a.$frontmatter},null,8,["article"])):b("",!0)]}),_:1}),H])}const L=i(S,[["render",X]]);export{U as __pageData,L as default};
