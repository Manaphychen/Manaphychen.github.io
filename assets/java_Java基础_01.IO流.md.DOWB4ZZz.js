import{_ as A}from"./chunks/ArticleMetadata.BPSr9oED.js";import{_ as y,E as D,c as C,o as t,j as d,I as h,aj as r,a as g,w as k,b as p,e}from"./chunks/framework._AF764y6.js";const B="/assets/JpHBMl.DD4R7RlN.png",N=JSON.parse('{"title":"IO流","description":"","frontmatter":{"title":"IO流","date":"2023-11-02T10:45:24.000Z","permalink":"/java/io/","categories":["后端","Java基础"],"tags":null,"author":"Manaphy"},"headers":[],"relativePath":"java/Java基础/01.IO流.md","filePath":"java/Java基础/01.IO流.md","lastUpdated":1743259133000}'),F={name:"java/Java基础/01.IO流.md"},o=d("h1",{id:"_1、io流的四点明确",tabindex:"-1"},[g("1、IO流的四点明确 "),d("a",{class:"header-anchor",href:"#_1、io流的四点明确","aria-label":"Permalink to “1、IO流的四点明确”"},"​")],-1),c=r('<p>（1）明确要操作的数据是数据源还是数据目的(要读还是要写)</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>源</strong></th><th style="text-align:left;"><strong>InputStream</strong></th><th style="text-align:left;"><strong>Reader</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>目的</strong></td><td style="text-align:left;"><strong>OutputStream</strong></td><td style="text-align:left;"><strong>Writer</strong></td></tr></tbody></table><p>（2）明确要操作的设备上的数据是字节还是文本</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"><strong>字节</strong></th><th style="text-align:left;"><strong>文本</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>源</strong></td><td style="text-align:left;"><strong>InputStream</strong></td><td style="text-align:left;"><strong>Reader</strong></td></tr><tr><td style="text-align:left;"><strong>目的</strong></td><td style="text-align:left;"><strong>OutputStream</strong></td><td style="text-align:left;"><strong>Writer</strong></td></tr></tbody></table><p>（3）明确数据所在的具体设备</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">硬盘</th><th style="text-align:left;">内存</th><th style="text-align:left;">键盘/屏幕</th><th style="text-align:left;">网络</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>源设备</strong></td><td style="text-align:left;">文件<code>File</code>开头</td><td style="text-align:left;">数组，字符串</td><td style="text-align:left;">System.in</td><td style="text-align:left;">Socket</td></tr><tr><td style="text-align:left;"><strong>对应目的设备</strong></td><td style="text-align:left;">文件<code>File</code>开头</td><td style="text-align:left;">数组，字符串</td><td style="text-align:left;">System.out</td><td style="text-align:left;">Socket</td></tr></tbody></table><p>（4）明确是否需要额外功能</p><ul><li>需要转换—— 转换流 <code>InputStreamReader </code>、<code>OutputStreamWriter</code></li><li>需要高效—— 缓冲流<code>Bufferedxxx</code></li><li>多个源—— 序列流 <code>SequenceInputStream</code></li><li>对象序列化—— <code>ObjectInputStream</code>、<code>ObjectOutputStream</code></li><li>保证数据的输出形式—— 打印流<code>PrintStream </code>、<code>Printwriter</code></li><li>操作基本数据，保证字节原样性——<code>DataOutputStream</code>、<code>DataInputStream</code></li></ul><h2 id="io流的主要分类" tabindex="-1">IO流的主要分类 <a class="header-anchor" href="#io流的主要分类" aria-label="Permalink to “IO流的主要分类”">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>分类</strong></th><th style="text-align:left;"><strong>字节输入流</strong></th><th style="text-align:left;"><strong>字节输出流</strong></th><th style="text-align:left;"><strong>字符输入流</strong></th><th style="text-align:left;"><strong>字符输出流</strong></th></tr></thead><tbody><tr><td style="text-align:left;">抽象基类</td><td style="text-align:left;"><em><u>InputStream</u></em></td><td style="text-align:left;"><em><u>OutputStream</u></em></td><td style="text-align:left;"><em><u>Reader</u></em></td><td style="text-align:left;"><em><u>Writer</u></em></td></tr><tr><td style="text-align:left;">访问文件</td><td style="text-align:left;"><span style="color:red;">FileInputStream</span></td><td style="text-align:left;"><span style="color:red;">FileOutputStream</span></td><td style="text-align:left;"><span style="color:red;">FileReader</span></td><td style="text-align:left;"><span style="color:red;">FileWriter</span></td></tr><tr><td style="text-align:left;">访问数组</td><td style="text-align:left;"><span style="color:red;">ByteArrayInputStream</span></td><td style="text-align:left;"><span style="color:red;">ByteArrayOutputStream</span></td><td style="text-align:left;"><span style="color:red;">CharArrayReader</span></td><td style="text-align:left;"><span style="color:red;">CharArrayWriter</span></td></tr><tr><td style="text-align:left;">访问管道</td><td style="text-align:left;"><span style="color:red;">PipedInputStream</span></td><td style="text-align:left;"><span style="color:red;">PipedOutputStream</span></td><td style="text-align:left;"><span style="color:red;">PipedReader</span></td><td style="text-align:left;"><span style="color:red;">PipedWriter</span></td></tr><tr><td style="text-align:left;">访问字符串</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"><span style="color:red;">StringReader</span></td><td style="text-align:left;"><span style="color:red;">StringWriter</span></td></tr><tr><td style="text-align:left;">缓冲流</td><td style="text-align:left;">BufferedInputStream</td><td style="text-align:left;">BufferedOutStream</td><td style="text-align:left;">BufferedReader</td><td style="text-align:left;">BufferedWriter</td></tr><tr><td style="text-align:left;">转换流</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">InputStreamReader</td><td style="text-align:left;">OutputStreamWriter</td></tr><tr><td style="text-align:left;">对象流</td><td style="text-align:left;">ObjectInputStream</td><td style="text-align:left;">ObjectOutputStream</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">抽象基类</td><td style="text-align:left;"><em><u>FilterInputStream</u></em></td><td style="text-align:left;"><em><u>FilterOutputStream</u></em></td><td style="text-align:left;"><em><u>FilterReader</u></em></td><td style="text-align:left;"><em><u>FilterWriter</u></em></td></tr><tr><td style="text-align:left;">打印流</td><td style="text-align:left;"></td><td style="text-align:left;">PrintStream</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">推回输入流</td><td style="text-align:left;">PushbackInputStream</td><td style="text-align:left;"></td><td style="text-align:left;">PushbackReader</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">特殊流</td><td style="text-align:left;">DataInputStream</td><td style="text-align:left;">DataOutputStream</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><p>倾斜+下划线代表抽象类，无法创建实例。红色的表示节点流，必须直接与指定的物理节点关联</p><h1 id="_2、file类" tabindex="-1">2、File类 <a class="header-anchor" href="#_2、file类" aria-label="Permalink to “2、File类”">​</a></h1>',12),E=r(`<p><code>java.io.File</code> 类是专门对文件进行操作的类，只能对文件本身进行操作，不能对文件内容进行操作。</p><p><code>java.io.File</code> 类是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。</p><h2 id="_2-1-构造方法" tabindex="-1">2.1 构造方法 <a class="header-anchor" href="#_2-1-构造方法" aria-label="Permalink to “2.1 构造方法”">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 通过将给定的 路径名字符串 转换为抽象路径名来创建新的File实例。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;D:/1.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 从 父路径名字符串和子路径名字符串 创建新的File实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;D:/1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 从父抽象路径名和子路径名字符串创建新的File实例。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> parentDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;D:/a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(parentDir, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;b.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>File类的注意点：</p><ol><li>一个File对象代表硬盘中实际存在的一个文件或者目录。</li><li>File类构造方法不会给你检验这个文件或文件夹是否真实存在，因此无论该路径下是否存在文件或者目录，都不影响File对象的创建。</li></ol><h2 id="_2-2-常用方法" tabindex="-1">2.2 常用方法 <a class="header-anchor" href="#_2-2-常用方法" aria-label="Permalink to “2.2 常用方法”">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;D:/Project/Hello.java&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 返回此File的绝对路径名字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getAbsolutePath</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// D:\\Project\\Hello.java</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 将此File转换为路径名字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// D:\\Project\\Hello.java</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 返回由此File表示的文件或目录的名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Hello.java</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 返回由此File表示的文件的长度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 105</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 此File表示的文件或目录是否实际存在</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">exists</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 此File表示的是否为目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 此File表示的是否为文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建一个新的空文件 (操作成功返回true,失败返回false 下同)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;D:/a.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">createNewFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建一级目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;D:/test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(test.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">mkdir</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建多级目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;D:/dir1/dir2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">mkdirs</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 删除文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 删除目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(test.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div><h2 id="_2-3-目录的遍历" tabindex="-1">2.3 目录的遍历 <a class="header-anchor" href="#_2-3-目录的遍历" aria-label="Permalink to “2.3 目录的遍历”">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//获取当前目录下的文件以及文件夹的名称。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">names</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> names){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//获取当前目录下的文件以及文件夹对象，只要拿到了文件对象，那么就可以获取更多信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">files</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">listFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> files) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>递归遍历所有文件</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 打印文件树</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> file</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  文件名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> level</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 层次数,无要求输入0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(File file, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> level) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 输出层次数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> level; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 输出文件名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		File</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">files</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">listFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> files) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">			printFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file2, level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h1 id="_3、初探io流" tabindex="-1">3、初探IO流 <a class="header-anchor" href="#_3、初探io流" aria-label="Permalink to “3、初探IO流”">​</a></h1>`,13),u=r(`<blockquote><p>Java中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入也叫做读取数据，输出也叫做作写出数据</strong>。</p></blockquote><h2 id="_3-1-io流的分类" tabindex="-1">3.1 IO流的分类 <a class="header-anchor" href="#_3-1-io流的分类" aria-label="Permalink to “3.1 IO流的分类”">​</a></h2><p>根据数据的流向分为：<strong>输入流</strong> 和 <strong>输出流</strong>。</p><ul><li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。</li><li><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。</li></ul><p>根据数据的类型分为：<strong>字节流</strong> 和 <strong>字符流</strong>。</p><ul><li><strong>字节流</strong>：以字节为单位，读写数据的流。</li><li><strong>字符流</strong> ：以字符为单位，读写数据的流。</li></ul><p><img src="https://www.pnglog.com/5qG7wD.png" alt="image.png"></p><h2 id="_3-2-字节输出流-outputstream" tabindex="-1">3.2 字节输出流（OutputStream） <a class="header-anchor" href="#_3-2-字节输出流-outputstream" aria-label="Permalink to “3.2 字节输出流（OutputStream）”">​</a></h2><p><code>java.io.OutputStream</code>抽象类是表示<strong>字节输出流</strong>的所有类的<strong>超类</strong>（父类），将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><p><strong>字节输出流的基本共性功能方法</strong></p><ul><li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。</li><li><code>public void flush()</code>：刷新此输出流并强制任何缓冲的输出字节被写出。</li><li><code>public void write(byte[] b)</code>：将 b.length个字节从指定的字节数组写入此输出流。</li><li><code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。 也就是说从off个字节数开始读取一直到len个字节结束</li><li><code>public abstract void write(int b)</code> ：将指定的字节输出流。</li></ul><p>以上五个方法则是字节输出流都具有的方法，由父类OutputStream定义提供，子类都会共享以上方法</p><h3 id="fileoutputstream" tabindex="-1">FileOutputStream <a class="header-anchor" href="#fileoutputstream" aria-label="Permalink to “FileOutputStream”">​</a></h3><blockquote><p>文件输出流，用于将数据写出到文件。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 使用File对象创建流对象 如果文件不存在则会自动创建,存在则覆盖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/1.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 使用文件名称创建流对象,传入第二个参数true表示追加内容到文件末尾(不覆盖)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fos2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/1.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> writeBytesTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/1.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;manaphy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(StandardCharsets.UTF_8);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 3种写出数据的方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    fos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">109</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    fos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(b);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    fos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 关闭资源</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    fos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="_3-3-字节输入流-inputstream" tabindex="-1">3.3 字节输入流（InputStream） <a class="header-anchor" href="#_3-3-字节输入流-inputstream" aria-label="Permalink to “3.3 字节输入流（InputStream）”">​</a></h2><p><code>java.io.InputStream</code>抽象类是表示<strong>字节输入流</strong>的所有类的<strong>超类</strong>（父类），可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p><p><strong>字节输入流的基本共性功能方法</strong></p><p><code>public void close()</code> ：关闭此输入流并释放与此流相关联的任何系统资源。<br><code>public abstract int read()</code>： 从输入流读取数据的下一个字节。<br><code>public int read(byte[] b)</code>： 该方法返回的int值代表的是读取了多少个字节，读到几个返回几个，读取不到返回-1</p><h3 id="fileinputstream" tabindex="-1">FileInputStream <a class="header-anchor" href="#fileinputstream" aria-label="Permalink to “FileInputStream”">​</a></h3><blockquote><p>文件输入流，从文件中读取字节。</p></blockquote><p><strong>构造方法</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/1.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 使用File对象创建流对象,文件不存在则会抛出FileNotFoundException异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 使用文件名称创建流对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/1.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p><strong>读取字节数据</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> readBytesTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/1.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 文件内容为 manaphy</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 读取数据，返回一个字节</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> read</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) read);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// m</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 继续读取下一个数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// n</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// p</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// y</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 读到末尾,则返回-1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// -1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>根据读到末尾返回-1，可将以上代码改为</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> readBytes2Test</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/1.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 文件内容为 manaphy</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 读取数据，返回一个字节</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> read</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (read </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) read);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        read </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>使用字节数组读取</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> readBytes3Test</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/1.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 文件内容为 manaphy</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 定义字节数组，作为装字节数据的容器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 返回读取到的长度,如果为-1,则读取完毕</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        read </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>结果会发现输出:<code>manaphyh</code> 这是因为每次循环都会覆盖bytes数组的内容，文件长度为7，所以最后一次读取只覆盖第一个字节，从而读取到 yh<br>修改优化代码为以下内容(开发中一般使用这种方式)</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> readBytes4Test</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/1.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 文件内容为 manaphy</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 定义字节数组，作为装字节数据的容器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 返回读取到的长度,如果为-1,则读取完毕</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, length));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> byteCopyTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/b.jpeg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/b_1.jpeg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        fos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, len);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="_3-4-字符输入流-reader" tabindex="-1">3.4 字符输入流（Reader） <a class="header-anchor" href="#_3-4-字符输入流-reader" aria-label="Permalink to “3.4 字符输入流（Reader）”">​</a></h2><p><code>java.io.Reader</code>抽象类是<strong>字符输入流</strong>的所有类的<strong>超类</strong>（父类），可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><p><strong>字符输入流的共性方法</strong></p><ul><li><code>public void close()</code> ：关闭此流并释放与此流相关联的任何系统资源。</li><li><code>public int read()</code>： 从输入流读取一个字符。</li><li><code>public int read(char[] cbuf)</code>： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中</li></ul><h3 id="filereader" tabindex="-1">FileReader <a class="header-anchor" href="#filereader" aria-label="Permalink to “FileReader”">​</a></h3><blockquote><p>读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fileReader1Test</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    FileReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/1.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> read</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (read </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) read);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        read </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    fr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>读取的写法类似字节流的写法，只是读取单位不同罢了</p><h2 id="_3-5-字符输出流-writer" tabindex="-1">3.5 字符输出流（Writer） <a class="header-anchor" href="#_3-5-字符输出流-writer" aria-label="Permalink to “3.5 字符输出流（Writer）”">​</a></h2><p><code>java.io.Writer</code>抽象类是<strong>字符输出流</strong>的所有类的<strong>超类</strong>（父类），将指定的字符信息写出到目的地。它同样定义了字符输出流的基本共性功能方法。</p><p><strong>字符输出流的基本共性功能方法</strong></p><ul><li><code>void write(int c)</code>写入单个字符。</li><li><code>void write(char[] cbuf)</code>写入字符数组。</li><li><code>abstract void write(char[] cbuf, int off, int len)</code>写入字符数组的某一部分,off数组的开始索引,len写的字符个数。</li><li><code>void write(String str)</code>写入字符串。</li><li><code>void write(String str, int off, int len)</code> 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</li><li><code>void flush()</code>刷新该流的缓冲。</li><li><code>void close()</code>关闭此流，但要先刷新它。</li></ul><h3 id="filewriter" tabindex="-1">FileWriter <a class="header-anchor" href="#filewriter" aria-label="Permalink to “FileWriter”">​</a></h3><blockquote><p>写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p></blockquote><p><strong>写出数据</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fileWriterTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    FileWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/2.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">chars</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;爱&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;北&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;我爱北京天安门&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    fw.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;我&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    fw.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(chars);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    fw.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(str, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 写出换行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    fw.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 关闭资源时,与FileOutputStream不同。 如果不关闭,数据只是保存到缓冲区，并未保存到文件。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    fw.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>关闭close和刷新flush</strong></p><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要flush 方法了。</p><p><code>flush</code>：刷新缓冲区，流对象可以继续使用。<br><code>close</code>：先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</p><p><strong>文本文件复制</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fileCopyTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/2.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/3.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">chars</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(chars);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        fw.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(chars, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, len);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(chars);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h1 id="缓冲流" tabindex="-1">缓冲流 <a class="header-anchor" href="#缓冲流" aria-label="Permalink to “缓冲流”">​</a></h1>`,55),m=r(`<blockquote><p>1、使用了底层流对象从具体设备上获取数据，并将数据存储到缓冲区的数组内。 2、通过缓冲区的read()方法从缓冲区获取具体的字符数据，这样就提高了效率。 3、如果用read方法读取字符数据，并存储到另一个容器中，直到读取到了换行符时，将另一个容器临时存储的数据转成字符串返回，就形成了readLine()功能。</p></blockquote><h2 id="字节缓冲流" tabindex="-1">字节缓冲流 <a class="header-anchor" href="#字节缓冲流" aria-label="Permalink to “字节缓冲流”">​</a></h2><blockquote><p>使用缓冲字节流包装文件字节流，增加缓冲功能，提高效率 缓存区的大小（缓存数组的长度）默认是8192，也可以自己指定大小</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fileCopy2Test</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> BufferedInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> bis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> BufferedInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/2.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> BufferedOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> bos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> BufferedOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/4.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> len;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ((len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> bis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        bos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, len);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="字符缓冲流" tabindex="-1">字符缓冲流 <a class="header-anchor" href="#字符缓冲流" aria-label="Permalink to “字符缓冲流”">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fileCopy3Test</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> BufferedReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> br</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> BufferedReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/2.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> BufferedWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> bw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> BufferedWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/5.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 从缓冲字符流中读取一行,读到文件末尾返回null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> line</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> br.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readLine</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        bw.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(line);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 换行,下次写入之前先换行,否则会在上一行后边继续追加，而不是另起一行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        bw.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">newLine</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> br.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readLine</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h1 id="转换流" tabindex="-1">转换流 <a class="header-anchor" href="#转换流" aria-label="Permalink to “转换流”">​</a></h1>`,7),f=d("img",{src:"https://www.pnglog.com/4EijvD.png#pic_left",alt:"image.png"},null,-1),b=d("br",null,null,-1),x=r('<p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。对象的数据、对象的类型和对象中存储的数据信息，都可以用来在内存中创建对象。看图理解序列化：</p><img src="'+B+`" alt="image.png"><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> serializableTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ObjectOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> oos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ObjectOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/object.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(person);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> deserializationTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException, ClassNotFoundException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ObjectInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ois</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ObjectInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/object.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 通过ObjectInputStream将文件中二进制数据反序列化成Person对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (Person) ois.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(person);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Person类实现Serializable接口后，Person对象才能被序列化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Data</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> serialVersionUID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1L</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    transient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> age;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// transient瞬态修饰成员,不会被序列化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h1 id="打印流" tabindex="-1">打印流 <a class="header-anchor" href="#打印流" aria-label="Permalink to “打印流”">​</a></h1>`,4),S=r(`<p>平时我们在控制台打印输出，是调用<code>print</code>方法和<code>println</code>方法完成的，这两个方法都来自于<code>java.io.PrintStream</code>类。该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p><p><strong>打印流特点</strong></p><ul><li>只操作目的地,不操作数据源</li><li>可以操作任意类型的数据</li><li>如果启用了自动刷新，在调用println()方法的时候，能够换行并刷新</li><li>可以直接操作文件</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws FileNotFoundException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    PrintStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> PrintStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/7.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 这里的console要在System.setOut(file)之前</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    PrintStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> console</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> System.out;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // System类的out成员就是PrintStream类型的打印流</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // System.out默认系统的标准输出设备是显示器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;默认在显示器上打印信息&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setOut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 设置后System.out.println的内容将输出到7.txt中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;这一行信息将打印到pStream流中&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 向7.txt写入A(只能写入字符或者字符数组)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;HelloWorld!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 向7.txt写入字符串</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 将输出改为屏幕</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setOut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(console);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 向屏幕打印</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;向屏幕打印&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 扫描仪从7.txt读取数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/7.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(sc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">nextLine</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 从7.txt读取文件打印到屏幕上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/** 打印字节流(异常处理) */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printStreamTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> PrintStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> PrintStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/8.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 经常把异常信息保存到日志文件中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/1.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 不存在的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        //在开发时, 一般调用e.printStackTrace()把异常信息打印到屏幕上方便程序员调试</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 在部署后, 会把异常信息打印到日志文件中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ps);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/** 以字符为单位的打印流(异常处理) */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> PrintWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> PrintWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/9.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/1.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 不存在的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 捕获这个异常,并将异常信息打印到log.txt文件中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pw);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h1 id="字节数组流-内存流" tabindex="-1">字节数组流(内存流) <a class="header-anchor" href="#字节数组流-内存流" aria-label="Permalink to “字节数组流(内存流)”">​</a></h1>`,5),w=r(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> byteArrayTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> InputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/7.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ByteArrayOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> baos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ByteArrayOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ((b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        baos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(b);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 当循环结束,所有的数据都在内存输出流的byte数组中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(baos);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h1 id="数据流" tabindex="-1">数据流 <a class="header-anchor" href="#数据流" aria-label="Permalink to “数据流”">​</a></h1>`,2),v=r(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> dataTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 数据流也可以不用缓存流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> DataOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> DataOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> BufferedOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/9.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> DataInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> DataInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> BufferedInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/9.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    dos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    dos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeChar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    dos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    dos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;数据流&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 手动刷新缓冲区：将流中数据写入到文件中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    dos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">flush</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 直接读取数据：读取的顺序要与写入的顺序一致，否则不能正确读取数据。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readChar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h1 id="对象流" tabindex="-1">对象流 <a class="header-anchor" href="#对象流" aria-label="Permalink to “对象流”">​</a></h1>`,2),_=r(`<blockquote><p><em>对象流能够对对象数据类型进行读写操作</em><em>Date是系统提供的类，已经实现了序列化接口</em><em>如果是自定义类，则需要自己实现序列化接口</em></p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> objectOutputTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 创建Object输出流，并包装缓冲流，增加缓冲功能</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ObjectOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> oos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ObjectOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> BufferedOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/10.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3.14</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeChar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;数据流用UTF&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> objectInputTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException, ClassNotFoundException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ObjectInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ois</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ObjectInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> BufferedInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/10.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 使用Object输入流按照写入顺序读取</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ois.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ois.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ois.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readChar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ois.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ois.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ois.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h1 id="序列流" tabindex="-1">序列流 <a class="header-anchor" href="#序列流" aria-label="Permalink to “序列流”">​</a></h1>`,3),I=r(`<blockquote><p>这个流将多个流进行逻辑串联</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> sequenceTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/1.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/2.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/3.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/4.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 必须使用Vector</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Vector</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Vector&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(fis1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(fis2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(fis3);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(fis4);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 把集合中的元素变成枚举</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Enumeration</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">elements</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SequenceInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> SequenceInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/Users/manaphy/Downloads/11.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        fos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h1 id="fileutils的使用" tabindex="-1">FileUtils的使用 <a class="header-anchor" href="#fileutils的使用" aria-label="Permalink to “FileUtils的使用”">​</a></h1>`,3),q=r('<table tabindex="0"><thead><tr><th style="text-align:left;"><strong>方法</strong></th><th style="text-align:left;"><strong>作用</strong></th></tr></thead><tbody><tr><td style="text-align:left;">cleanDirectory</td><td style="text-align:left;">清空目录，但不删除目录。</td></tr><tr><td style="text-align:left;">contentEquals</td><td style="text-align:left;">比较两个文件的内容是否相同。</td></tr><tr><td style="text-align:left;">copyDirectory</td><td style="text-align:left;">将一个目录内容拷贝到另一个目录。可以通过FileFilter过滤需要拷贝的文件。</td></tr><tr><td style="text-align:left;">copyFileToDirectory</td><td style="text-align:left;">将一个文件拷贝到某个目录下。</td></tr><tr><td style="text-align:left;">copyInputStreamToFile</td><td style="text-align:left;">将一个输入流中的内容拷贝到某个文件。</td></tr><tr><td style="text-align:left;">deleteDirectory</td><td style="text-align:left;">删除目录。</td></tr><tr><td style="text-align:left;">deleteQuietly</td><td style="text-align:left;">删除文件。</td></tr><tr><td style="text-align:left;">listFiles</td><td style="text-align:left;">列出指定目录下的所有文件。</td></tr><tr><td style="text-align:left;">openInputSteam</td><td style="text-align:left;">打开指定文件的输入流。</td></tr><tr><td style="text-align:left;">readFileToString</td><td style="text-align:left;">将文件内容作为字符串返回。</td></tr><tr><td style="text-align:left;">readLines</td><td style="text-align:left;">将文件内容按行返回到一个字符串数组中。</td></tr><tr><td style="text-align:left;">size</td><td style="text-align:left;">返回文件或目录的大小。</td></tr><tr><td style="text-align:left;">write</td><td style="text-align:left;">将字符串内容直接写到文件中。</td></tr><tr><td style="text-align:left;">writeByteArrayToFile</td><td style="text-align:left;">将字节数组内容写到文件中。</td></tr><tr><td style="text-align:left;">writeLines</td><td style="text-align:left;">将容器中的元素的toString方法返回的内容依次写入文件中。</td></tr><tr><td style="text-align:left;">writeStringToFile</td><td style="text-align:left;">将字符串内容写到文件中。</td></tr></tbody></table><h1 id="ioutils的使用" tabindex="-1">IOUtils的使用 <a class="header-anchor" href="#ioutils的使用" aria-label="Permalink to “IOUtils的使用”">​</a></h1>',2),T=r('<table tabindex="0"><thead><tr><th style="text-align:left;"><strong>方法</strong></th><th style="text-align:left;"><strong>作用</strong></th></tr></thead><tbody><tr><td style="text-align:left;">buffer</td><td style="text-align:left;">将传入的流进行包装，变成缓冲流。并可以通过参数指定缓冲大小。</td></tr><tr><td style="text-align:left;">closeQueitly</td><td style="text-align:left;">关闭流。</td></tr><tr><td style="text-align:left;">contentEquals</td><td style="text-align:left;">比较两个流中的内容是否一致。</td></tr><tr><td style="text-align:left;">copy</td><td style="text-align:left;">将输入流中的内容拷贝到输出流中，并可以指定字符编码。</td></tr><tr><td style="text-align:left;">copyLarge</td><td style="text-align:left;">将输入流中的内容拷贝到输出流中，适合大于2G内容的拷贝。</td></tr><tr><td style="text-align:left;">lineIterator</td><td style="text-align:left;">返回可以迭代每一行内容的迭代器。</td></tr><tr><td style="text-align:left;">read</td><td style="text-align:left;">将输入流中的部分内容读入到字节数组中。</td></tr><tr><td style="text-align:left;">readFully</td><td style="text-align:left;">将输入流中的所有内容读入到字节数组中。</td></tr><tr><td style="text-align:left;">readLine</td><td style="text-align:left;">读入输入流内容中的一行。</td></tr><tr><td style="text-align:left;">toBufferedInputStream<br>toBufferedReader</td><td style="text-align:left;">将输入转为带缓存的输入流。</td></tr><tr><td style="text-align:left;">toByteArray/toCharArray</td><td style="text-align:left;">将输入流的内容转为字节数组、字符数组。</td></tr><tr><td style="text-align:left;">toString</td><td style="text-align:left;">将输入流或数组中的内容转化为字符串。</td></tr><tr><td style="text-align:left;">write</td><td style="text-align:left;">向流里面写入内容。</td></tr><tr><td style="text-align:left;">writeLine</td><td style="text-align:left;">向流里面写入一行内容。</td></tr></tbody></table>',1);function O(s,j,P,U,R,$){const n=A,l=D("ClientOnly");return t(),C("div",null,[o,h(l,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),p(n,{key:0,article:s.$frontmatter},null,8,["article"])):e("",!0)]}),_:1}),c,h(l,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),p(n,{key:0,article:s.$frontmatter},null,8,["article"])):e("",!0)]}),_:1}),E,h(l,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),p(n,{key:0,article:s.$frontmatter},null,8,["article"])):e("",!0)]}),_:1}),u,h(l,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),p(n,{key:0,article:s.$frontmatter},null,8,["article"])):e("",!0)]}),_:1}),m,h(l,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),p(n,{key:0,article:s.$frontmatter},null,8,["article"])):e("",!0)]}),_:1}),f,g(' ## OutputStreamWriter 转换流`java.io.OutputStreamWriter` ，是Writer的子类，字面看容易混淆会误以为是转为字符流，其实不然，OutputStreamWriter为从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 ```java @Test public void convertTest() throws IOException { @Cleanup OutputStreamWriter osw = new OutputStreamWriter( new FileOutputStream("/Users/manaphy/Downloads/6.txt"), "GBK"); osw.write("我爱北京天安门");// 生成的文件为GBK编码 } ``` ## InputStreamReader 转换流`java.io.InputStreamReader`，是`Reader`的子类，从字面意思可以看出它是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 ```java @Test public void convert2Test() throws IOException { @Cleanup InputStreamReader isr = new InputStreamReader( new FileInputStream("/Users/manaphy/Downloads/6.txt"), "GBK"); int read = isr.read(); System.out.println((char) read);// 正常读取 } ``` 为了达到**最高效率**，可以考虑在 `BufferedReader` 内包装 `InputStreamReader`'),b,g("`BufferedReader in = new BufferedReader(new InputStreamReader(srcFile));` ## 序列化流 Java 提供了一种对象**序列化**的机制。用一个字节序列可以表示一个对象，该字节序列包含该对象的数据、对象的类型和对象中存储的属性等信息。字节序列写出到文件之后，相当于文件中持久保存了一个对象的信息。 "),x,h(l,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),p(n,{key:0,article:s.$frontmatter},null,8,["article"])):e("",!0)]}),_:1}),S,h(l,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),p(n,{key:0,article:s.$frontmatter},null,8,["article"])):e("",!0)]}),_:1}),w,h(l,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),p(n,{key:0,article:s.$frontmatter},null,8,["article"])):e("",!0)]}),_:1}),v,h(l,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),p(n,{key:0,article:s.$frontmatter},null,8,["article"])):e("",!0)]}),_:1}),_,h(l,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),p(n,{key:0,article:s.$frontmatter},null,8,["article"])):e("",!0)]}),_:1}),I,h(l,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),p(n,{key:0,article:s.$frontmatter},null,8,["article"])):e("",!0)]}),_:1}),q,h(l,null,{default:k(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),p(n,{key:0,article:s.$frontmatter},null,8,["article"])):e("",!0)]}),_:1}),T])}const M=y(F,[["render",O]]);export{N as __pageData,M as default};
