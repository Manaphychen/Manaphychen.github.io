import{_ as g}from"./chunks/ArticleMetadata.H12JcJLK.js";import{_ as k,E as _,c as f,o as s,j as r,I as l,aj as h,w as n,b as o,e as c,a as p}from"./chunks/framework._AF764y6.js";const b="/assets/1613998086904-13ceabe0-30b7-4511-895d-1c00e0cdcdd8.phwy2Hiy.png",m="/assets/1613998912892-b83f8de9-6d35-4514-8d13-1f70be399dfd.q7UAiWTD.png",y="/assets/1613998966862-afe9596f-574c-4a9f-a783-b1d7513b947e.p7OXYq7C.png",x="/assets/1613999019106-dc5f8206-d981-4a89-ae9a-310822f6492e.B9sqpaeF.png",u="/assets/1614001147394-f0bafe21-db29-42c4-afe0-f3cd0047233a.Dv0aNOj8.png",C="/assets/1614001685937-69aa4b4e-443b-4473-baef-dda45aea3f54.DX2Fy6Dd.png",A="/assets/1614002087877-88666369-c640-42a5-8748-68e5f6750c3a.CuB5MEsC.png",D="/assets/1614002148886-6b72fcf0-1155-49a0-8db7-c2d6a3e08f44.BTqUvpRS.png",T="/assets/1614002229335-83a65610-6d41-41b8-9b2a-0eefb24ef33d.D0xmet-J.png",F="/assets/1614002481419-c9b72ce6-c8e9-42f2-9b1d-182b61b685aa.DqrBBQR_.png",P="/assets/1614003069926-167b9160-6824-4585-9f78-69a6a6b1684d.B5oq6Zgr.png",v="/assets/1614003197970-f84cb324-8e20-4daa-b596-8ad7cf81d87b.DVnMux_d.png",$="/assets/1614003389196-d80e4c7f-656d-484e-a042-90f48ec7888a.D49Wykg8.png",B="/assets/1614003618674-add1c940-b767-4e5c-a684-00927c08818e.BlwW8Pmp.png",E="/assets/1614003860767-11b0e8c4-2a75-4386-8fbd-4163dc4879ad.DePs-EUr.png",S="/assets/1614003920248-e4cf801b-6511-4f6b-8e5f-b55418c9b733.CPUOSMbE.png",V="/assets/1614004003158-c4ab8da3-a0b3-467e-a4cc-bf29e734387f.2JV9nrcG.png",I="/assets/1614004042978-99886acb-b8a7-4439-bd62-b5994d1558c4.tH1RmgvK.png",N="/assets/1614004756651-ead3d47b-eb9a-455e-a521-1ce9fe81fa31.C2Vo9r6_.png",M="/assets/1614004859812-6b49cc49-c57b-4863-94fb-93f3e93c15e8.C_Ns9ADb.png",w="/assets/1614005218890-3d68aca7-dca6-4a4c-add7-d28015d3cbb2.ZfEViqTo.png",R="/assets/1614005366950-9cb0e0ec-04e2-4c29-9fa1-d61bde4737b6.PIIGBczE.png",ie=JSON.parse('{"title":"正则表达式","description":"","frontmatter":{"title":"正则表达式","date":"2023-11-02T10:36:32.000Z","permalink":"/regular_expression/","categories":["后端","未分类"],"tags":["正则表达式"],"author":"Manaphy"},"headers":[],"relativePath":"java/未分类/01.正则表达式.md","filePath":"java/未分类/01.正则表达式.md","lastUpdated":1743612544000}'),j={name:"java/未分类/01.正则表达式.md"},q=r("h1",{id:"正则表达式",tabindex:"-1"},[p("正则表达式 "),r("a",{class:"header-anchor",href:"#正则表达式","aria-label":"Permalink to “正则表达式”"},"​")],-1),z=h('<blockquote><p>正则表达式是⼀组由字⺟和符号组成的特殊⽂本，它可以⽤来从⽂本中找出满⾜你想要的格式的句⼦。</p></blockquote><p>正则表达式的网站 <a href="https://regex101.com/" target="_blank" rel="noreferrer">https://regex101.com/</a></p><p>⼀个正则表达式是⼀种从左到右匹配主体字符串的模式。</p><p>“Regular expression”这个词比较拗口，我们常使⽤缩写的术语“regex”或“regexp”。</p><p>正则表达式可以从⼀个基础字符串中根据⼀定的匹配模式替换⽂本中的字符串、验证表单、提取字符串等等。</p><p>想象你正在写⼀个应⽤，然后你想设定⼀个⽤户命名的规则，让⽤户名包含字符、数字、下划线和连字符，以及限制字符的个数，好让名字看起来没那么丑。 我们使⽤以下正则表达式来验证⼀个⽤户名：</p><p><img src="'+b+'" alt="image.png"></p><p>以上的正则表达式可以接受 <code>john_doe</code> 、 <code>jo-hn_doe</code> 、 <code>john12_as</code> 。</p><p>但不匹配 <code>Jo</code> ，因为它包含了⼤写的字⺟⽽且太短了。</p><h1 id="_1-基本匹配" tabindex="-1">1. 基本匹配 <a class="header-anchor" href="#_1-基本匹配" aria-label="Permalink to “1. 基本匹配”">​</a></h1>',10),O=h('<p>正则表达式其实就是在执行搜索时的格式，它由一些字母和数字组合而成。 例如：一个正则表达式 <code>the</code>，它表示一个规则：由字母<code>t</code>开始，接着是<code>h</code>，再接着是<code>e</code>。</p><p><img src="'+m+'" alt="image.png"></p><h1 id="_2-元字符" tabindex="-1">2. 元字符 <a class="header-anchor" href="#_2-元字符" aria-label="Permalink to “2. 元字符”">​</a></h1>',3),G=h('<p>正则表达式主要依赖于元字符。 元字符不代表他们本身的字面意思，他们都有特殊的含义。一些元字符写在方括号中的时候有一些特殊的意思。以下是一些元字符的介绍：</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>元字符</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">.</td><td style="text-align:left;">句号匹配任意单个字符除了换行符。</td></tr><tr><td style="text-align:left;">[ ]</td><td style="text-align:left;">字符种类。匹配方括号内的任意字符。</td></tr><tr><td style="text-align:left;">[^]</td><td style="text-align:left;">否定的字符种类。匹配除了方括号里的任意字符</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">匹配&gt;=0个重复的在*号之前的字符。</td></tr><tr><td style="text-align:left;">+</td><td style="text-align:left;">匹配&gt;=1个重复的+号前的字符。</td></tr><tr><td style="text-align:left;">?</td><td style="text-align:left;">标记?之前的字符为可选.</td></tr><tr><td style="text-align:left;">{n,m}</td><td style="text-align:left;">匹配num个大括号之前的字符或字符集 (n &lt;= num &lt;= m).</td></tr><tr><td style="text-align:left;">(xyz)</td><td style="text-align:left;">字符集，匹配与 xyz 完全相等的字符串.</td></tr><tr><td style="text-align:left;">|</td><td style="text-align:left;">或运算符，匹配符号前或后的字符.</td></tr><tr><td style="text-align:left;">\\</td><td style="text-align:left;">转义字符,用于匹配一些保留的字符 <code>[ ] ( ) \\{ } . * + ? ^ $ \\\\ &amp;#124;</code></td></tr><tr><td style="text-align:left;">^</td><td style="text-align:left;">从开始行开始匹配.</td></tr><tr><td style="text-align:left;">$</td><td style="text-align:left;">从末端开始匹配.</td></tr></tbody></table><h2 id="_2-1-点运算符" tabindex="-1">2.1 点运算符 <code>.</code> <a class="header-anchor" href="#_2-1-点运算符" aria-label="Permalink to “2.1 点运算符 .”">​</a></h2><p><code>.</code>是元字符中最简单的例子。 <code>.</code>匹配任意单个字符，但不匹配换行符。 例如，表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串。</p><p><img src="'+y+'" alt="image.png"></p><h2 id="_2-2-字符集" tabindex="-1">2.2 字符集 <a class="header-anchor" href="#_2-2-字符集" aria-label="Permalink to “2.2 字符集”">​</a></h2><p>字符集也叫做字符类。 方括号用来指定一个字符集。 在方括号中使用连字符来指定字符集的范围。 在方括号中的字符集不关心顺序。 例如，表达式<code>[Tt]he</code> 匹配 <code>the</code> 和 <code>The</code>。</p><p><img src="'+x+'" alt="image.png"></p><h3 id="_2-2-1-否定字符集" tabindex="-1">2.2.1 否定字符集 <a class="header-anchor" href="#_2-2-1-否定字符集" aria-label="Permalink to “2.2.1 否定字符集”">​</a></h3><p>一般来说 <code>^</code> 表示一个字符串的开头，但它用在一个方括号的开头的时候，它表示这个字符集是否定的。 例如，表达式<code>[^c]ar</code> 匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符。</p><p><img src="'+u+'" alt="image.png"></p><h2 id="_2-3-重复次数" tabindex="-1">2.3 重复次数 <a class="header-anchor" href="#_2-3-重复次数" aria-label="Permalink to “2.3 重复次数”">​</a></h2><p>后面跟着元字符 <code>+</code>，<code>*</code> or <code>?</code> 的，用来指定匹配子模式的次数。 这些元字符在不同的情况下有着不同的意思。</p><h3 id="_2-3-号" tabindex="-1">2.3.<code>*</code> 号 <a class="header-anchor" href="#_2-3-号" aria-label="Permalink to “2.3.* 号”">​</a></h3><p><code>*</code>号匹配 在<code>*</code>之前的字符出现<code>大于等于0</code>次。 例如，表达式 <code>a*</code> 匹配0或更多个以a开头的字符。表达式<code>[a-z]*</code> 匹配一个行中所有以小写字母开头的字符串。</p><p><img src="'+C+'" alt="image.png"></p><h3 id="_2-3-2-号" tabindex="-1">2.3.2 <code>+</code> 号 <a class="header-anchor" href="#_2-3-2-号" aria-label="Permalink to “2.3.2 + 号”">​</a></h3><p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;=1 次。 例如表达式<code>c.+t</code> 匹配以首字母<code>c</code>开头以<code>t</code>结尾，中间跟着至少一个字符的字符串。</p><p><img src="'+A+'" alt="image.png"></p><h3 id="_2-3-3-号" tabindex="-1">2.3.3 <code>?</code> 号 <a class="header-anchor" href="#_2-3-3-号" aria-label="Permalink to “2.3.3 ? 号”">​</a></h3><p>在正则表达式中元字符 <code>?</code> 标记在符号前面的字符为可选，即出现 0 或 1 次。 例如，表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>。</p><p><img src="'+D+'" alt="image.png"></p><h2 id="_2-4-号" tabindex="-1">2.4 <code>{}</code> 号 <a class="header-anchor" href="#_2-4-号" aria-label="Permalink to “2.4 {} 号”">​</a></h2><p>在正则表达式中 <code>{}</code> 是一个量词，常用来限定一个或一组字符可以重复出现的次数。 例如， 表达式 <code>[0-9]{2,3}</code> 匹配最少 2 位最多 3 位 0~9 的数字。</p><p><img src="'+T+'" alt="image.png"></p><h2 id="_2-5-特征标群" tabindex="-1">2.5 <code>(...)</code> 特征标群 <a class="header-anchor" href="#_2-5-特征标群" aria-label="Permalink to “2.5 (...) 特征标群”">​</a></h2><p>特征标群是一组写在 <code>(...)</code> 中的子模式。<code>(...)</code> 中包含的内容将会被看成一个整体，和数学中小括号（ ）的作用相同。例如, 表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>。如果没有使用 <code>(...)</code> ，那么表达式 <code>ab*</code> 将匹配连续出现 0 或更多个 <code>b</code> 。再比如之前说的 <code>{}</code> 是用来表示前面一个字符出现指定次数。但如果在 <code>{}</code> 前加上特征标群 <code>(...)</code> 则表示整个标群内的字符重复 N 次。</p><p>我们还可以在 <code>()</code> 中用或字符 <code>|</code> 表示或。例如，<code>(c|g|p)ar</code> 匹配 <code>car</code> 或 <code>gar</code> 或 <code>par</code>。</p><p><img src="'+F+'" alt="image.png"></p><h2 id="_2-6-或运算符" tabindex="-1">2.6 <code>|</code> 或运算符 <a class="header-anchor" href="#_2-6-或运算符" aria-label="Permalink to “2.6 | 或运算符”">​</a></h2><p>或运算符就表示或，用作判断条件。</p><p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或 <code>car</code>。</p><p><img src="'+P+'" alt="image.png"></p><h2 id="_2-7-转码特殊字符" tabindex="-1">2.7 转码特殊字符 <a class="header-anchor" href="#_2-7-转码特殊字符" aria-label="Permalink to “2.7 转码特殊字符”">​</a></h2><p>反斜线 <code>\\</code> 在表达式中用于转码紧跟其后的字符。用于指定 <code>{ } [ ] / \\ + * . $ ^ | ?</code> 这些特殊字符。如果想要匹配这些特殊字符则要在其前面加上反斜线 <code>\\</code>。</p><p>例如 <code>.</code> 是用来匹配除换行符外的所有字符的。如果想要匹配句子中的 <code>.</code> 则要写成 <code>\\.</code> 以下这个例子 <code>\\.?</code>是选择性匹配<code>.</code></p><p><img src="'+v+'" alt="image.png"></p><h2 id="_2-8-锚点" tabindex="-1">2.8 锚点 <a class="header-anchor" href="#_2-8-锚点" aria-label="Permalink to “2.8 锚点”">​</a></h2><p>在正则表达式中，想要匹配指定开头或结尾的字符串就要使用到锚点。<code>^</code> 指定开头，<code>$</code> 指定结尾。</p><h3 id="_2-8-1-号" tabindex="-1">2.8.1 <code>^</code> 号 <a class="header-anchor" href="#_2-8-1-号" aria-label="Permalink to “2.8.1 ^ 号”">​</a></h3><p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头。</p><p>例如，在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果 <code>a</code>。但如果使用 <code>^b</code> 将匹配不到任何结果。因为在字符串 <code>abc</code> 中并不是以 <code>b</code> 开头。</p><p>例如，<code>^(T|t)he</code> 匹配以 <code>The</code> 或 <code>the</code> 开头的字符串。</p><p><img src="'+$+'" alt="image.png"></p><h3 id="_2-8-2-号" tabindex="-1">2.8.2 <code>$</code> 号 <a class="header-anchor" href="#_2-8-2-号" aria-label="Permalink to “2.8.2 $ 号”">​</a></h3><p>同理于 <code>^</code> 号，<code>$</code> 号用来匹配字符是否是最后一个。</p><p>例如，<code>(at\\.)$</code> 匹配以 <code>at.</code> 结尾的字符串。</p><p><img src="'+B+'" alt="image.png"></p><h1 id="_3-简写字符集" tabindex="-1">3. 简写字符集 <a class="header-anchor" href="#_3-简写字符集" aria-label="Permalink to “3. 简写字符集”">​</a></h1>',49),U=h('<p>正则表达式提供一些常用的字符集简写。如下:</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>简写</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">.</td><td style="text-align:left;">除换行符外的所有字符</td></tr><tr><td style="text-align:left;">\\w</td><td style="text-align:left;">匹配所有字母数字，等同于 <code>[a-zA-Z0-9_]</code></td></tr><tr><td style="text-align:left;">\\W</td><td style="text-align:left;">匹配所有非字母数字，即符号，等同于： <code>[^\\\\w]</code></td></tr><tr><td style="text-align:left;">\\d</td><td style="text-align:left;">匹配数字： <code>[0-9]</code></td></tr><tr><td style="text-align:left;">\\D</td><td style="text-align:left;">匹配非数字： <code>[^\\\\d]</code></td></tr><tr><td style="text-align:left;">\\s</td><td style="text-align:left;">匹配所有空格字符，等同于： <code>[\\\\t\\\\n\\\\f\\\\r\\\\p{Z}]</code></td></tr><tr><td style="text-align:left;">\\S</td><td style="text-align:left;">匹配所有非空格字符： <code>[^\\\\s]</code></td></tr><tr><td style="text-align:left;">\\f</td><td style="text-align:left;">匹配一个换页符</td></tr><tr><td style="text-align:left;">\\n</td><td style="text-align:left;">匹配一个换行符</td></tr><tr><td style="text-align:left;">\\r</td><td style="text-align:left;">匹配一个回车符</td></tr><tr><td style="text-align:left;">\\t</td><td style="text-align:left;">匹配一个制表符</td></tr><tr><td style="text-align:left;">\\v</td><td style="text-align:left;">匹配一个垂直制表符</td></tr><tr><td style="text-align:left;">\\p</td><td style="text-align:left;">匹配 CR/LF（等同于 <code>\\\\r\\\\n</code>），用来匹配 DOS 行终止符</td></tr></tbody></table><h1 id="_4-零宽度断言-前后预查" tabindex="-1">4. 零宽度断言（前后预查） <a class="header-anchor" href="#_4-零宽度断言-前后预查" aria-label="Permalink to “4. 零宽度断言（前后预查）”">​</a></h1>',3),Z=h('<p>先行断言和后发断言都属于<strong>非捕获簇</strong>（不捕获文本 ，也不针对组合计进行计数）。 先行断言用于判断所匹配的格式是否在另一个确定的格式之前，匹配结果不包含该确定格式（仅作为约束）。</p><p>例如，我们想要获得所有跟在 <code>$</code> 符号后的数字，我们可以使用正后发断言 <code>(?&lt;=\\$)[0-9\\.]*</code>。 这个表达式匹配 <code>$</code> 开头，之后跟着 <code>0,1,2,3,4,5,6,7,8,9,.</code> 这些字符可以出现大于等于 0 次。</p><p>零宽度断言如下：</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>符号</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">?=</td><td style="text-align:left;">正先行断言-存在</td></tr><tr><td style="text-align:left;">?!</td><td style="text-align:left;">负先行断言-排除</td></tr><tr><td style="text-align:left;">?&lt;=</td><td style="text-align:left;">正后发断言-存在</td></tr><tr><td style="text-align:left;">?&lt;!</td><td style="text-align:left;">负后发断言-排除</td></tr></tbody></table><h2 id="_4-1-正先行断言" tabindex="-1">4.1 <code>?=...</code> 正先行断言 <a class="header-anchor" href="#_4-1-正先行断言" aria-label="Permalink to “4.1 ?=... 正先行断言”">​</a></h2><p><code>?=...</code> 正先行断言，表示第一部分表达式之后必须跟着 <code>?=...</code>定义的表达式。</p><p>返回结果只包含满足匹配条件的第一部分表达式。 定义一个正先行断言要使用 <code>()</code>。在括号内部使用一个问号和等号： <code>(?=...)</code>。</p><p>正先行断言的内容写在括号中的等号后面。 例如，表达式 <code>(T|t)he(?=\\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，在括号中我们又定义了正先行断言 <code>(?=\\sfat)</code> ，即 <code>The</code> 和 <code>the</code> 后面紧跟着 <code>(空格)fat</code>。</p><p><img src="'+E+'" alt="image.png"></p><h2 id="_4-2-负先行断言" tabindex="-1">4.2 <code>?!...</code> 负先行断言 <a class="header-anchor" href="#_4-2-负先行断言" aria-label="Permalink to “4.2 ?!... 负先行断言”">​</a></h2><p>负先行断言 <code>?!</code> 用于筛选所有匹配结果，筛选条件为 其后不跟随着断言中定义的格式。 <code>正先行断言</code> 定义和 <code>负先行断言</code> 一样，区别就是 <code>=</code> 替换成 <code>!</code> 也就是 <code>(?!...)</code>。</p><p>表达式 <code>(T|t)he(?!\\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，且其后不跟着 <code>(空格)fat</code>。</p><p><img src="'+S+'" alt="image.png"></p><h2 id="_4-3-正后发断言" tabindex="-1">4.3 <code>?&lt;= ...</code> 正后发断言 <a class="header-anchor" href="#_4-3-正后发断言" aria-label="Permalink to “4.3 ?&lt;= ... 正后发断言”">​</a></h2><p>正后发断言 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果，筛选条件为 其前跟随着断言中定义的格式。 例如，表达式 <code>(?&lt;=(T|t)he\\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>，且其前跟着 <code>The</code> 或 <code>the</code>。</p><p><img src="'+V+'" alt="image.png"></p><h2 id="_4-4-负后发断言" tabindex="-1">4.4 <code>?&lt;!...</code> 负后发断言 <a class="header-anchor" href="#_4-4-负后发断言" aria-label="Permalink to “4.4 ?&lt;!... 负后发断言”">​</a></h2><p>负后发断言 记作 <code>(?&lt;!...)</code> 用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。 例如，表达式 <code>(?&lt;!(T|t)he\\s)(cat)</code> 匹配 <code>cat</code>，且其前不跟着 <code>The</code> 或 <code>the</code>。</p><p><img src="'+I+'" alt="image.png"></p><h1 id="_5-标志" tabindex="-1">5. 标志 <a class="header-anchor" href="#_5-标志" aria-label="Permalink to “5. 标志”">​</a></h1>',20),J=h('<p>标志也叫模式修正符，因为它可以用来修改表达式的搜索结果。 这些标志可以任意的组合使用，它也是整个正则表达式的一部分。</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>标志</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">i</td><td style="text-align:left;">忽略大小写。</td></tr><tr><td style="text-align:left;">g</td><td style="text-align:left;">全局搜索。</td></tr><tr><td style="text-align:left;">m</td><td style="text-align:left;">多行修饰符：锚点元字符 <code>^``$</code> 工作范围在每行的起始。</td></tr></tbody></table><h2 id="_5-1-忽略大小写-case-insensitive" tabindex="-1">5.1 忽略大小写 (Case Insensitive) <a class="header-anchor" href="#_5-1-忽略大小写-case-insensitive" aria-label="Permalink to “5.1 忽略大小写 (Case Insensitive)”">​</a></h2><p>修饰语 <code>i</code> 用于忽略大小写。 例如，表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>，在后面的 <code>i</code> 将其条件修改为忽略大小写，则变成搜索 <code>the</code> 和 <code>The</code>，<code>g</code> 表示全局搜索。</p><p><img src="'+N+'" alt="image.png"></p><h2 id="_5-2-全局搜索-global-search" tabindex="-1">5.2 全局搜索 (Global search) <a class="header-anchor" href="#_5-2-全局搜索-global-search" aria-label="Permalink to “5.2 全局搜索 (Global search)”">​</a></h2><p>修饰符 <code>g</code> 常用于执行一个全局搜索匹配，即（不仅仅返回第一个匹配的，而是返回全部）。 例如，表达式 <code>/.(at)/g</code> 表示搜索 任意字符（除了换行）+ <code>at</code>，并返回全部结果。</p><p><img src="'+M+'" alt="image.png"></p><h2 id="_5-3-多行修饰符-multiline" tabindex="-1">5.3 多行修饰符 (Multiline) <a class="header-anchor" href="#_5-3-多行修饰符-multiline" aria-label="Permalink to “5.3 多行修饰符 (Multiline)”">​</a></h2><p>多行修饰符 <code>m</code> 常用于执行一个多行匹配。</p><p>像之前介绍的 <code>(^,$)</code> 用于检查格式是否是在待检测字符串的开头或结尾。但我们如果想要它在每行的开头和结尾生效，我们需要用到多行修饰符 <code>m</code>。</p><p>例如，表达式 <code>/at(.)?$/gm</code> 表示小写字符 <code>a</code> 后跟小写字符 <code>t</code> ，末尾可选除换行符外任意字符。根据 <code>m</code> 修饰符，现在表达式匹配每行的结尾。</p><p><img src="'+w+'" alt="image.png"></p><h1 id="_6-贪婪匹配与惰性匹配-greedy-vs-lazy-matching" tabindex="-1">6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching) <a class="header-anchor" href="#_6-贪婪匹配与惰性匹配-greedy-vs-lazy-matching" aria-label="Permalink to “6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)”">​</a></h1>',14),W=r("p",null,[p("正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 "),r("code",null,"?"),p(" 将贪婪匹配模式转化为惰性匹配模式。")],-1),H=r("p",null,[r("img",{src:R,alt:"image.png"})],-1),X=r("h1",{id:"_7-使用案例",tabindex:"-1"},[p("7.使用案例 "),r("a",{class:"header-anchor",href:"#_7-使用案例","aria-label":"Permalink to “7.使用案例”"},"​")],-1),K=h(`<p><strong>在行首添加指定内容</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">匹配字符</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">^(.+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)$ </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#代表匹配任意行首</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">替换字符</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">a$1</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> #代表在上面的匹配结果前加一个字符a</span></span></code></pre></div><p><strong>匹配空行</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">^(\\s*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span></span></code></pre></div><p><strong>匹配包含某字符的一行</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#匹配包含@Override的行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">@Override(.*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span></span></code></pre></div><p><strong>匹配括号内的内容</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 匹配{}括号内的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)[^}]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">*(?</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">\\</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 解析</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#(?&lt;=\\{)   匹配以左花括号开头</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#[^}]*    取得内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#(?=\\})   匹配以右花括号结束</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 匹配()小括号的内容(包含括号)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">\\((.+?</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 匹配[]中括号的内容(包含括号)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">\\[(.+?</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 匹配{}花括号的内容(包含括号)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">\\</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">{[^</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">\\</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">]+\\}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 匹配中文</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\u</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">4e00-</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\u</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">9fa5]</span></span></code></pre></div><p><strong>跨行匹配</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">开始(?s</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">*?</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)结束</span></span></code></pre></div>`,10);function L(e,Q,Y,ee,te,ae){const d=g,i=_("ClientOnly");return s(),f("div",null,[q,l(i,null,{default:n(()=>{var t,a;return[(((t=e.$frontmatter)==null?void 0:t.aside)??!0)&&(((a=e.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(s(),o(d,{key:0,article:e.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),z,l(i,null,{default:n(()=>{var t,a;return[(((t=e.$frontmatter)==null?void 0:t.aside)??!0)&&(((a=e.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(s(),o(d,{key:0,article:e.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),O,l(i,null,{default:n(()=>{var t,a;return[(((t=e.$frontmatter)==null?void 0:t.aside)??!0)&&(((a=e.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(s(),o(d,{key:0,article:e.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),G,l(i,null,{default:n(()=>{var t,a;return[(((t=e.$frontmatter)==null?void 0:t.aside)??!0)&&(((a=e.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(s(),o(d,{key:0,article:e.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),U,l(i,null,{default:n(()=>{var t,a;return[(((t=e.$frontmatter)==null?void 0:t.aside)??!0)&&(((a=e.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(s(),o(d,{key:0,article:e.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),Z,l(i,null,{default:n(()=>{var t,a;return[(((t=e.$frontmatter)==null?void 0:t.aside)??!0)&&(((a=e.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(s(),o(d,{key:0,article:e.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),J,l(i,null,{default:n(()=>{var t,a;return[(((t=e.$frontmatter)==null?void 0:t.aside)??!0)&&(((a=e.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(s(),o(d,{key:0,article:e.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),W,H,X,l(i,null,{default:n(()=>{var t,a;return[(((t=e.$frontmatter)==null?void 0:t.aside)??!0)&&(((a=e.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(s(),o(d,{key:0,article:e.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),K])}const le=k(j,[["render",L]]);export{ie as __pageData,le as default};
