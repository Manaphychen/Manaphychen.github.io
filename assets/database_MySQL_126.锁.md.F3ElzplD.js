import{_ as e}from"./chunks/ArticleMetadata.H12JcJLK.js";import{_ as p,E as k,c as d,o as t,j as n,I as r,aj as g,w as A,b as o,e as c,a as y}from"./chunks/framework._AF764y6.js";const C="/assets/b5DCft.DA_EkDOg.png",D="/assets/WNb2gY.B1Wz57c-.png",E="/assets/ebc1e7ef838f480983ffdc9f90d9b261png.Ddx1mGAo.png",F="/assets/ylsRUs.DstWaRKJ.png",B="/assets/X9XetI.bmGMbiwz.png",m="/assets/image-09121.DDDmD8k4.png",b="/assets/image-0918212.DKHzS5zG.png",u="/assets/UYIvD5.C8m3kPb4.png",_="/assets/WVPGOl.CBNHyyaM.png",T="/assets/Lo2x9K.D7rgHFil.png",f="/assets/image-20240615053921128.BzquQ58c.png",x="/assets/image-20240615055924839.CkinNcvU.png",N="/assets/image-20240615055943835.BvbiazJf.png",I="/assets/K0crsG.D_YICN-i.png",L="/assets/K0crsG.D_YICN-i.png",S="/assets/UWV567.DYXRLIOC.png",Q=JSON.parse('{"title":"锁","description":"","frontmatter":{"title":"锁","date":"2023-11-02T09:32:44.000Z","permalink":"/mysql/lock/","categories":["数据库","MySQL"],"tags":["MySQL"],"author":"Manaphy"},"headers":[],"relativePath":"database/MySQL/126.锁.md","filePath":"database/MySQL/126.锁.md","lastUpdated":1743612544000}'),v={name:"database/MySQL/126.锁.md"},O=n("h1",{id:"锁",tabindex:"-1"},[y("锁 "),n("a",{class:"header-anchor",href:"#锁","aria-label":"Permalink to “锁”"},"​")],-1),R=g('<blockquote><p>事务的<code>隔离性</code>由这章讲述的<code>锁</code>来实现。</p></blockquote><h2 id="_1-概述" tabindex="-1">1. 概述 <a class="header-anchor" href="#_1-概述" aria-label="Permalink to “1. 概述”">​</a></h2><p><code>锁</code>是计算机协调多个进程或线程<code>并发访问某一资源</code>的机制。在程序开发中会存在多线程同步的问题，当多个线程并发访问某个数据的时候，尤其是针对一些敏感的数据(比如订单、金额等)， 我们就需要保证这个数据在任何时刻<code>最多只有一个线程</code>在访问，保证数据的<code>完整性</code>和<code>一致性</code>。在开发过程中加锁是为了保证数据的一致性，这个思想在数据库领域中同样很重要。</p><p>在数据库中，除传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的资源。为保证数据的一致性，需要对<code>并发操作进行控制</code>，因此产生了<code>锁</code>。同时<code>锁机制</code>也为实现MySQL的各个隔离级别提供了保证。<code>锁冲突</code>也是影响数据库<code>并发访问性能</code>的一个重要因素。所以锁对数据库而言显得尤其重要，也更加复杂。</p><h2 id="_2-mysql并发事务访问相同记录" tabindex="-1">2. MySQL并发事务访问相同记录 <a class="header-anchor" href="#_2-mysql并发事务访问相同记录" aria-label="Permalink to “2. MySQL并发事务访问相同记录”">​</a></h2><p>并发事务访问相同记录的情况大致可以划分为3种：</p><h3 id="_2-1-读-读情况" tabindex="-1">2.1 读-读情况 <a class="header-anchor" href="#_2-1-读-读情况" aria-label="Permalink to “2.1 读-读情况”">​</a></h3><p><code>读-读</code>情况，即并发事务相继<code>读取相同的记录</code>。读取操作本身不会对记录有任何影响，并不会引起什么问题，所以允许这种情况的发生。</p><h3 id="_2-2-写-写情况" tabindex="-1">2.2 写-写情况 <a class="header-anchor" href="#_2-2-写-写情况" aria-label="Permalink to “2.2 写-写情况”">​</a></h3><p><code>写-写</code>情况，即并发事务相继对相同的记录做出改动。</p><p>在这种情况下会发生<code>脏写</code>的问题，任何一种隔离级别都不允许这种问题的发生。所以在多个未提交事务相继对一条记录做改动时，需要让它们<code>排队执行</code>，这个排队的过程其实是通过<code>锁</code>来实现的。这个所谓的锁其实是一个<code>内存中的结构</code>，在事务执行前本来是没有锁的，也就是说一开始是没有<code>锁结构</code>和记录进行关联的，如图所示：</p><p><img src="'+C+'" alt="image.png"></p><p>当一个事务想对这条记录做改动时，首先会看看内存中有没有与这条记录关联的<code>锁结构</code>，当没有的时候就会在内存中生成一个锁结构与之关联。比如，事务T1 要对这条记录做改动，就需要生成一个锁结构与之关联：</p><p><img src="'+D+'" alt="image.png"></p><p>在锁结构里有很多信息，为了简化理解，只把两个比较重要的属性拿了出来:</p><ul><li>trx信息:代表这个锁结构是哪个事务生成的。</li><li>is_waiting :代表当前事务是否在等待。</li></ul><p>当事务T1改动了这条记录后，就生成了一个锁结构与该记录关联，因为之前没有别的事务为这条记录加锁，所以is_waiting属性就是false，我们把这个场景就称之为获取锁成功，或者加锁成功，然后就可以继续执行操作了。</p><p>在事务T1提交之前，另一个事务T2也想对该记录做改动，那么先看看有没有锁结构与这条记录关联，发现有一个锁结构与之关联后，然后也生成了一个锁结构与这条记录关联，不过锁结构的is_waiting属性值为true ,表示当前事务需要等待，我们把这个场景就称之为获取锁失败，或者加锁失败，图示:</p><p><img src="'+E+'" alt="image.png"></p><p>在事务T1提交之后，就会把该事务生成的锁结构释放掉，然后看看还有没有别的事务在等待获取锁，发现了事务T2还在等待获取锁，所以把事务T2对应的锁结构的is_waiting属性设置为false，然后把该事务对应的线程唤醒，让它继续执行，此时事务T2就算获取到锁了。效果图就是这样:</p><p><img src="'+F+'" alt="image.png"></p><p>小结几种说法：</p><ul><li><p>不加锁</p><p>意思就是不需要在内存中生成对应的<code>锁结构</code>，可以直接执行操作。</p></li><li><p>获取锁成功，或者加锁成功</p><p>意思就是在内存中生成了对应的<code>锁结构</code>，而且锁结构的<code>is_waiting</code> 属性为<code>false</code>，也就是事务可以继续执行操作。</p></li><li><p>获取锁失败，或者加锁失败，或者没有获取到锁</p><p>意思就是在内存中生成了对应的锁结构，不过锁结构的is_waiting 属性为true ，也就是事务需要等待，不可以继续执行操作。</p></li></ul><h3 id="_2-3-读-写或写-读情况" tabindex="-1">2.3 读-写或写-读情况 <a class="header-anchor" href="#_2-3-读-写或写-读情况" aria-label="Permalink to “2.3 读-写或写-读情况”">​</a></h3><p><code>读-写</code>或<code>写-读</code>，即一个事务进行读取操作，另一个进行改动操作。这种情况下可能发生<code>脏读</code>、<code>不可重复读</code>、<code>幻读</code>的问题。</p><p>各个数据库厂商对<code>SQL标准</code>的支持都可能不一样。比如MySQL在<code>REPEATABLE READ</code>隔离级别上就已经解决了幻读问题。</p><h3 id="_2-4-并发问题的解决方案" tabindex="-1">2.4 并发问题的解决方案 <a class="header-anchor" href="#_2-4-并发问题的解决方案" aria-label="Permalink to “2.4 并发问题的解决方案”">​</a></h3><p>怎么解决<code>脏读</code>、<code>不可重复读</code>、<code>幻读</code>这些问题呢？其实有两种可选的解决方案：</p><p><strong>方案一</strong>：读操作利用多版本并发控制（MVCC），写操作进行加锁。</p><p>所谓的<code>MVCC(Multi-Version Concurrency Control)</code>，就是生成一个<code>ReadView</code>，通过ReadView找到符合条件的记录版本（历史版本由<code>undo日志</code>构建)。查询语句只能<code>读</code>到在生成ReadView之前<code>已提交事务所做的更改</code>，在生成ReadView之前未提交的事务或者之后才开启的事务所做的更改是看不到的。而<code>写操作</code>肯定针对的是<code>最新版本的记录</code>，读记录的历史版本和改动记录的最新版本本身并不冲突，也就是采用MVCC时，<code>读-写</code>操作并不冲突。</p><blockquote><p>普通的SELECT语句在READ COMMITTED和REPEATABLE READ隔离级别下会使用到MVCC读取记录。</p><ul><li>在<code>READ COMMITTED</code> 隔离级别下，一个事务在执行过程中每次执行SELECT操作时都会生成一个ReadView，ReadView的存在本身就保证了<code>事务不可以读取到未提交的事务所做的更改</code>，也就是避免了脏读现象；</li><li>在<code>REPEATABLE READ</code>隔离级别下，一个事务在执行过程中只有<code>第一次执行SELECT操作</code>才会生成一个ReadView，之后的SELECT操作都<code>复用</code>这个ReadView，这样也就避免了不可重复读和幻读的问题。</li></ul></blockquote><p><strong>方案二</strong>：读、写操作都采用加锁的方式。</p><p>如果我们的一些业务场景不允许读取记录的旧版本，而是每次都必须去<code>读取记录的最新版本</code>。比如，在银行存款的事务中，你需要先把账户的余额读出来，然后将其加上本次存款的数额最后再写到数据库中。在将账户余额读取出来后，就不想让别的事务再访问该余额，直到本次存款事务执行完成，其他事务才可以访问账户的余额。这样在读取记录的时候就需要对其进行<code>加锁</code>操作，这样也就意味着<code>读</code>操作和<code>写</code>操作也像<code>写-写</code>操作那样<code>排队</code>执行。</p><p><code>脏读</code>的产生是因为当前事务读取了另一个未提交事务写的一条记录，如果另一个事务在写记录的时候就给这条记录加锁，那么当前事务就无法继续读取该记录了，所以也就不会有脏读问题的产生了。</p><p><code>不可重复读</code>的产生是因为当前事务先读取一条记录，另外一个事务对该记录做了改动之后并提交之后，当前事务再次读取时会获得不同的值，如果在当前事务读取记录时就给该记录加锁那么另一个事务就无法修改该记录，自然也不会发生不可重复读了。</p><p><code>幻读</code>问题的产生是因为当前事务读取了一个范围的记录，然后另外的事务向该范围内插入了新记录，当前事务再次读取该范围的记录时发现了新插入的新记录。采用加锁的方式解决幻读问题就有一些麻烦，因为当前事务在第一次读取记录时幻影记录并不存在，所以读取的时候加锁就有点尴尬（因为你并不知道给谁加锁)。</p><p>小结对比发现：</p><ul><li>采用<code>MVCC</code>方式的话，<code>读-写</code>操作彼此并不冲突，<code>性能更高</code>。</li><li>采用<code>加锁</code>方式的话，<code>读-写</code>操作彼此需要<code>排队执行</code>，影响性能。</li></ul><p>一般情况下我们当然愿意采用<code>MVCC</code> 来解决<code>读-写</code>操作并发执行的问题，但是业务在某些特殊情况下，要求必须采用<code>加锁</code>的方式执行。下面就讲解下MySQL中不同类别的锁。</p><h2 id="_3-锁的不同角度分类" tabindex="-1">3. 锁的不同角度分类 <a class="header-anchor" href="#_3-锁的不同角度分类" aria-label="Permalink to “3. 锁的不同角度分类”">​</a></h2><p>锁的分类图，如下：</p><p><img src="'+B+`" alt="image.png"></p><h3 id="_3-1-从数据操作的类型划分-读锁、写锁" tabindex="-1">3.1 从数据操作的类型划分：读锁、写锁 <a class="header-anchor" href="#_3-1-从数据操作的类型划分-读锁、写锁" aria-label="Permalink to “3.1 从数据操作的类型划分：读锁、写锁”">​</a></h3><p>对于数据库中并发事务的<code>读-读</code>情况并不会引起什么问题。对于<code>写-写</code>、<code>读-写</code>或<code>写-读</code>这些情况可能会引起一些问题，需要使用MVCC或者加锁的方式来解决它们。在使用加锁的方式解决问题时，由于既要允许<code>读-读</code>情况不受影响，又要使<code>写-写</code>、<code>读-写</code>或<code>写-读</code>情况中的操作相互阻塞，所以MySQL实现一个由两种类型的锁组成的锁系统来解决。这两种类型的锁通常被称为<strong>共享锁(Shared Lock，SLock)</strong> 和<strong>排他锁(Exclusive Lock，XLock)</strong> ,也叫读锁(readlock)和写锁(write lock)。</p><ul><li><code>读锁</code>：也称为<code>共享锁</code>、英文用<code>S</code>表示。针对同一份数据，多个事务的读操作可以同时进行而不会互相影响，相互不阻塞的。</li><li><code>写锁</code>：也称为<code>排他锁</code>、英文用<code>X</code>表示。当前写操作没有完成前，它会阻断其他写锁和读锁。这样就能确保在给定的时间里，只有一个事务能执行写入，并防止其他用户读取正在写入的同一资源。</li></ul><p><strong>需要注意的是对于 InnoDB 引擎来说，读锁和写锁可以加在表上，也可以加在行上。</strong></p><p>**举例(行级读写锁)∶**如果一个事务T1已经获得了某个行r的读锁，那么此时另外的一个事务T2是可以去获得这个行r的读锁的，因为读取操作并没有改变行r的数据;但是，如果某个事务T3想获得行r的写锁，则它必须等待事务T1、T2释放掉行r上的读锁才行。</p><p>总结:这里的兼容是指对同一张表或记录的锁的兼容性情况。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"><strong>X锁</strong></th><th style="text-align:left;"><strong>S锁</strong></th></tr></thead><tbody><tr><td style="text-align:left;">X锁</td><td style="text-align:left;">不兼容</td><td style="text-align:left;">不兼容</td></tr><tr><td style="text-align:left;">S锁</td><td style="text-align:left;">不兼容</td><td style="text-align:left;"><strong>兼容</strong></td></tr></tbody></table><h4 id="_1-锁定读" tabindex="-1">1. 锁定读 <a class="header-anchor" href="#_1-锁定读" aria-label="Permalink to “1. 锁定读”">​</a></h4><p>在采用<code>加锁</code>方式解决脏读、不可重复读、幻读这些问题时，读取一条记录时需要获取该记录的S锁，其实是不严谨的，有时候需要在读取记录时就获取记录的X锁，来禁止别的事务读写该记录，为此MySQL提出了两种比较特殊的SELECT语句格式:</p><ul><li>对读取的记录加S锁:</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ... LOCK </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">IN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SHARE MODE;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#或</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FOR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SHARE;#(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.0新增语法)</span></span></code></pre></div><p>在普通的SELECT语句后边加<code>LOCK IN SHARE MODE</code>，如果当前事务执行了该语句，那么它会为读取到的记录加S锁，这样允许别的事务继续获取这些记录的S锁(比方说别的事务也使用<code>SELECT ... LOCK IN SHAREMODE</code>语句来读取这些记录)，但是不能获取这些记录的X锁(比如使用<code>SELECT ... FOR UPDATE</code>语句来读取这些记录，或者直接修改这些记录)。如果别的事务想要获取这些记录的<code>x锁</code>，那么它们会阻塞，直到当前事务提交之后将这些记录上的<code>S锁</code>释放掉。</p><ul><li>对读取的记录加X锁:</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>在普通的SELECT语句后边加<code>FOR UPDATE</code>，如果当前事务执行了该语句，那么它会为读取到的记录加<code>X锁</code>，这样既不允许别的事务获取这些记录的S锁(比方说别的事务使用<code>SELECT ... LOCK IN SHARE MODE</code>语句来读取这些记录)，也不允许获取这些记录的X锁(比如使用<code>SELECT ... FOR UPDATE</code>语句来读取这些记录，或者直接修改这些记录)。如果别的事务想要获取这些记录的s锁或者X锁，那么它们会阻塞，直到当前事务提交之后将这些记录上的X锁释放掉。</p><p><strong>MySQL8.0新特性:</strong></p><p>在5.7及之前的版本，SELECT ... FOR UPDATE，如果获取不到锁，会一直等待，直到<code>innodb_lock_wait_timeout</code>超时。在8.0版本中，SELECT ... FOR UPDATE，SELECT ... FOR SHARE添加<code>NOWAIT</code>、<code>SKIP LOCKED</code>语法，跳过锁等待，或者跳过锁定。</p><ul><li>通过添加NOWAIT、SKIP LOCKED语法，能够立即返回。如果查询的行已经加锁: <ul><li>那么NOWAIT会立即报错返回（等不到锁立即返回）</li><li>而SKIP LOCKED也会立即返回，只是返回的结果中不包含被锁定的行。</li></ul></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> UPDATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOWAIT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> UPDATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SKIP</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> LOCKED;</span></span></code></pre></div><p>测试：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">account</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">\` (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`name\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`balance\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> decimal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`id\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">InnoDB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">utf8mb3;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, balance) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;李四&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;王五&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># session1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Query OK, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> rows</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> affected (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sec)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----+--------+---------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| id | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   | balance |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----+--------+---------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | 张三   |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | 李四   |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | 王五   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----+--------+---------+</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> rows</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sec)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># session2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> update</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> nowait</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ERROR </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3572</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (HY000): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Statement</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> aborted because lock(s) could </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">not</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> be acquired immediately </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">and</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOWAIT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> update</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> skip</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> locked;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Empty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sec)</span></span></code></pre></div><h4 id="_2-写操作" tabindex="-1">2.写操作 <a class="header-anchor" href="#_2-写操作" aria-label="Permalink to “2.写操作”">​</a></h4><p>平常所用到的<code>写操作</code>无非是<code>DELETE</code>、<code>UPDATE</code>、<code>INSERT</code>这三种:</p><ul><li>DELETE:</li></ul><p>对一条记录做DELETE操作的过程其实是先在<code>B+</code>树中定位到这条记录的位置，然后获取这条记录的<code>X锁</code>，再执行<code>delete mark</code>.操作。我们也可以把这个定位待删除记录在B+树中位置的过程看成是一个获取<code>X锁</code>的<code>锁定读</code>。</p><ul><li><p>UPDATE∶在对一条记录做UPDATE操作时分为三种情况:</p><ul><li><p>情况1: 未修改该记录的<code>键值</code>，并且被更新的列占用的存储空间在修改前后<code>未发生变化</code>。</p><p>则先在<code>B+</code>树中定位到这条记录的位置，然后再获取一下记录的<code>X锁</code>，最后在原记录的位置进行修改操作。我们也可以把这个定位待修改记录在B+树中位置的过程看成是一个获取<code>X锁</code>的<code>锁定读</code>。</p><ul><li><p>情况2∶未修改该记录的<code>键值</code>，并且至少有一个被更新的列占用的存储空间在修改前后发生变化。</p><p>则先在B+树中定位到这条记录的位置，然后获取一下记录的X锁，将该记录彻底删除掉（就是把记录彻底移入垃圾链表)，最后再插入一条新记录。这个定位待修改记录在B+树中位置的过程看成是一个获取<code>×锁</code>的<code>锁定读</code>，新插入的记录由<code>INSERT</code>操作提供的<code>隐式锁</code>进行保护。</p></li><li><p>情况3∶修改了该记录的键值，则相当于在原记录上做DELETE操作之后再来一次INSERT操作，加锁操作就需要按照<code>DELETE</code>和<code>INSERT</code>的规则进行了。</p></li></ul></li></ul></li><li><p>INSERT :</p><p>一般情况下，新插入一条记录的操作并不加锁，通过一种称之为<code>隐式锁</code>的结构来保护这条新插入的记录在本事务<code>提交前不被别的事务访问</code>。</p></li></ul><h3 id="_3-2-从数据操作的粒度划分-表级锁、页级锁、行锁" tabindex="-1">3.2 从数据操作的粒度划分：表级锁、页级锁、行锁 <a class="header-anchor" href="#_3-2-从数据操作的粒度划分-表级锁、页级锁、行锁" aria-label="Permalink to “3.2 从数据操作的粒度划分：表级锁、页级锁、行锁”">​</a></h3><p>为了尽可能提高数据库的并发度，每次锁定的数据范围越小越好，理论上每次只锁定当前操作的数据的方案会得到最大的并发度，但是管理锁是很<code>耗资源</code>的事情（涉及获取、检查、释放锁等动作)(越小消耗越大)。因此数据库系统需要在<code>高并响应</code>和<code>系统性能</code>两方面进行平衡，这样就产生了“<code>锁粒度(Lock granularity)</code>”的概念。</p><p>对一条记录加锁影响的也只是这条记录而已，我们就说这个锁的粒度比较细;其实一个事务也可以在<code>表级别</code>进行加锁，自然就被称之为<code>表级锁</code>或者<code>表锁</code>，对一个表加锁影响整个表中的记录，我们就说这个锁的粒度比较粗。锁的粒度主要分为表级锁、页级锁和行锁。</p><h4 id="_1-表锁-table-lock" tabindex="-1">1.表锁（Table Lock） <a class="header-anchor" href="#_1-表锁-table-lock" aria-label="Permalink to “1.表锁（Table Lock）”">​</a></h4><p>该锁会锁定整张表，它是MySQL中最基本的锁策略，<code>并不依赖于存储引擎</code>(不管你是MySQL的什么存储引擎，对于表锁的策略都是一样的)，并且表锁是<code>开销最小</code>的策略（因为粒度比较大)。由于表级锁一次会将整个表锁定，所以可以很好的<code>避免死锁</code>问题。当然，锁的粒度大所带来最大的负面影响就是出现锁资源争用的概率也会最高，导致<code>并发率大打折扣</code>。</p><h5 id="_1-表级别的s锁、x锁" tabindex="-1">① 表级别的S锁、X锁 <a class="header-anchor" href="#_1-表级别的s锁、x锁" aria-label="Permalink to “① 表级别的S锁、X锁”">​</a></h5><p>在对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，InnoDB存储引擎是不会为这个表添加表级别的<code>S锁</code>或者<code>X锁</code>的。在对某个表执行一些诸如<code>ALTER TABLE</code>、<code>DROP TABLE</code>这类的<code>DDL</code>语句时，其他事务对这个表并发执行诸如SELECT、INSERT、DELETE、UPDATE的语句会发生阻塞。同理，某个事务中对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，在其他会话中对这个表执行<code>DDL</code>语句也会发生阻塞。这个过程其实是通过在server层使用一种称之为<code>元数据锁</code>（英文名：<code>Metadata Locks</code>，简称<code>MDL</code>）结构来实现的。</p><p>一般情况下，不会使用InnoDB存储引擎提供的<code>表级别</code>的<code>S锁</code>和<code>X锁</code>。只会在一些特殊情况下，比方说<code>崩溃恢复</code>过程中用到。比如，在系统变量<code>autocommit=0，innodb_table_locks = 1</code>时，手动获取InnoDB存储引擎提供的表t 的S锁或者X锁可以这么写：</p><ul><li><code>LOCK TABLES t READ</code>：InnoDB存储引擎会对表t加表级别的S锁。</li><li><code>LOCK TABLES t WRITE</code>：InnoDB存储引擎会对表t加表级别的X锁。</li></ul><p>不过尽量避免在使用InnoDB存储引擎的表上使用<code>LOCK TABLES</code>这样的手动锁表语句，它们并不会提供什么额外的保护，只是会降低并发能力而已。InnoDB的厉害之处还是实现了更细粒度的行锁，关于InnoDB表级别的S锁和X锁大家了解一下就可以了。</p><p><strong>举例</strong>: MyISAM引擎下的表锁</p><p>步骤1: 创建表并添加数据</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> mylock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> auto_increment,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)ENGINE myisam;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 插入一条数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> mylock(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 查询表中的所有数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> mylock;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----+------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| id | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----+------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | a    |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----+------+</span></span></code></pre></div><p>步骤2: 查看表中加过的锁</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">SHOW </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OPEN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TABLES; #主要关注In_use字段的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#或者</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">SHOW </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OPEN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TABLES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> In_use </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SHOW </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OPEN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TABLES;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--------------------+--------------------------+--------+-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Database</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">           | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Table</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    | In_use | Name_locked |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--------------------+--------------------------+--------+-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| chen               | mylock                   |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| performance_schema | session_status           |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| information_schema | VIEWS                    |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | parameters               |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| information_schema | PARAMETERS               |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | tablespace_files         |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | routines                 |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| information_schema | ROUTINES                 |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| information_schema | COLUMNS                  |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | tablespaces              |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| information_schema | TABLES                   |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | catalogs                 |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| information_schema | SCHEMATA                 |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | column_statistics        |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | view_table_usage         |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | view_routine_usage       |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | triggers                 |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | tables                   |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | table_partitions         |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | schemata                 |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | indexes                  |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | index_partitions         |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | table_stats              |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | index_column_usage       |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | foreign_key_column_usage |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | collations               |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | columns                  |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | column_type_elements     |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | character_sets           |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | foreign_keys             |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | check_constraints        |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| mysql              | table_partition_values   |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| performance_schema | session_variables        |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--------------------+--------------------------+--------+-------------+</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SHOW </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OPEN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TABLES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> In_use </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Empty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sec)</span></span></code></pre></div><p>上面的结果表明，当前数据库中没有被锁定的表。</p><p>步骤3: 手动增加表锁命令</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK TABLES t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">READ</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; #存储引擎会对表t加表级别的共享锁。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK TABLES t WRITE; #存储引擎会对表t加表级别的排他锁。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> lock tables mylock write;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Query OK, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> rows</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> affected (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">01</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sec)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SHOW </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OPEN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TABLES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> In_use </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----------+--------+--------+-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Database</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Table</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  | In_use | Name_locked |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----------+--------+--------+-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| chen     | mylock |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |           </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----------+--------+--------+-------------+</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> row</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sec)</span></span></code></pre></div><p>步骤4: 释放表锁</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">UNLOCK</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TABLES; #使用此命令解锁当前加锁的表</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tables;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Query OK, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> rows</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> affected (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sec)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SHOW </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OPEN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TABLES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> In_use </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Empty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sec)</span></span></code></pre></div><p>步骤5: 加读锁</p><p>我们为mylock表加read锁(读阻塞写)，观察阻塞的情况，流程如下：</p><p><img src="`+m+'" alt="image-09121"></p><p>步骤6: 加写锁</p><p>为mylock表加write锁，观察阻塞的情况，流程如下：</p><p><img src="'+b+`" alt="image-0918212"></p><p><strong>总结：</strong></p><p>MyISAM在执行查询语句（SELECT）前，会给涉及的所有表加读锁，在执行增删改操作前，会给涉及的表加写锁。InnoDB存储引擎是不会为这个表添加表级别的<code>读锁</code>或者<code>写锁</code>的。</p><p>MySQL的表级锁有两种模式：（以MyISAM表进行操作的演示）</p><ul><li>表共享读锁（Table Read Lock）</li><li>表独占写锁（Table Write Lock）</li></ul><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>锁类型</strong></th><th style="text-align:left;"><strong>自己可读</strong></th><th style="text-align:left;"><strong>自己可写</strong></th><th style="text-align:left;"><strong>自己可操作其他表</strong></th><th style="text-align:left;"><strong>他人可读</strong></th><th style="text-align:left;"><strong>他人可写</strong></th></tr></thead><tbody><tr><td style="text-align:left;">读锁</td><td style="text-align:left;">是</td><td style="text-align:left;">否</td><td style="text-align:left;">否</td><td style="text-align:left;">是</td><td style="text-align:left;">否，等</td></tr><tr><td style="text-align:left;">写锁</td><td style="text-align:left;">是</td><td style="text-align:left;">是</td><td style="text-align:left;">否</td><td style="text-align:left;">否，等</td><td style="text-align:left;">否，等</td></tr></tbody></table><h5 id="_2-意向锁-intention-lock" tabindex="-1">② 意向锁 （intention lock） <a class="header-anchor" href="#_2-意向锁-intention-lock" aria-label="Permalink to “② 意向锁 （intention lock）”">​</a></h5><p>InnoDB 支持<code>多粒度锁（multiple granularity locking）</code>，它允许行级锁与表级锁共存，而 <strong>意向锁</strong> 就是其中的一种<code>表锁</code>。</p><p>1、意向锁的存在是为了<code>协调行锁和表锁</code>的关系，支持多粒度（表锁与行锁)的锁并存。</p><p>2、意向锁是一种<code>不与行级锁冲突表级锁</code>，这一点非常重要。</p><p>3、表明“某个事务正在某些行持有了锁或该事务准备去持有锁”</p><p>意向锁分为两种：</p><ul><li><strong>意向共享锁 （intention shared lock, IS）</strong>：事务有意向对表中的某些行加 <strong>共享锁 （S锁</strong>）</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 事务要获取某些行的 S 锁，必须先获得表的 IS 锁。 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 会自动加，不用管</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> column </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FROM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ... LOCK </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">IN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SHARE MODE;</span></span></code></pre></div><ul><li><strong>意向排他锁 （intention exclusive lock, IX）</strong>：事务有意向对表中的某些行加 <strong>排他锁</strong> （X锁）</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 事务要获取某些行的 X 锁，必须先获得表的 IX 锁。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 会自动加，不用管</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> column </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FROM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>即：意向锁是由存储引擎<code>自己维护的</code>，用户无法手动操作意向锁，在为数据行加共享 / 排他锁之前，InooDB 会先获取该数据行<code>所在数据表的对应意向锁</code>。</p><p><strong>1.意向锁要解决的问题</strong></p><p>现在有两个事务，分别是T1和T2，其中T2试图在该表级别上应用共享或排它锁，如果没有意向锁存在，那么T2就需要去检查各个页或行是否存在锁;如果存在意向锁，那么此时就会受到由T1控制的<code>表级别意向锁的阻塞</code>。T2在锁定该表前不必检查各个页或行锁，而只需检查表上的意向锁。简单来说就是给更大一级别的空间示意里面是否已经上过锁。</p><p>在数据表的场景中，<strong>如果我们给某一行数据加上了排它锁，数据库会自动给更大一级的空间，比如数据页或数据表加上意向锁，告诉其他人这个数据页或数据表已经有人上过排它锁了</strong>(不这么做的话，想上表锁的那个程序，还要遍历有没有航所)，这样当其他人想要获取数据表排它锁的时候，只需要了解是否有人已经获取了这个数据表的意向排他锁即可。</p><ul><li>如果事务想要获得数据表中某些记录的共享锁，就需要在数据表上<code>添加意向共享锁</code>。</li><li>如果事务想要获得数据表中某些记录的排他锁，就需要在数据表上<code>添加意向排他锁</code>。</li></ul><p>这时，意向锁会告诉其他事务已经有人锁定了表中的某些记录。</p><p>举例:创建表teacher，插入6条数据，事务的隔离级别默认为Repeatable-Read，如下所示。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">teacher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">\` (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`name\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ( </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ( </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`id\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ENGINE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> INNODB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CHARSET </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> utf8mb4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">COLLATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> utf8mb4_0900_ai_ci;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INSERT INTO</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`teacher\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> VALUES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;zhangsan &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;lisi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ) ,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;wangwu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ) ,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;zhaoliu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;songhongkang&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;6&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;leifengyang&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ) ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> @@transaction_isolation;</span></span></code></pre></div><p>假设事务A获取了某一行的排他锁，并未提交，语句如下所示。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> teacher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>事务B想要获取teacher 表的表读锁，语句如下。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK TABLES teacher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">READ</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>因为共享锁与排他锁互斥，所以事务B在试图对teacher表加共享锁的时候，必须保证两个条件。</p><p>(1）当前没有其他事务持有teacher 表的排他锁</p><p>(2）当前没有其他事务持有teacher表中任意一行的排他锁。</p><p>为了检测是否满足第二个条件，事务B必须在确保teacher表不存在任何排他锁的前提下，去检测表中的每一行是否存在排他锁。很明显这是一个效率很差的做法，但是有了意向锁之后，情况就不一样了。</p><p>意向锁是怎么解决这个问题的呢?首先，我们需要知道意向锁之间的兼容互斥性，如下所示。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"><strong>意向共享锁(lS)</strong></th><th style="text-align:left;"><strong>意向排他锁(IX)</strong></th></tr></thead><tbody><tr><td style="text-align:left;">意向共享锁 (IS)</td><td style="text-align:left;">兼容</td><td style="text-align:left;">兼容</td></tr><tr><td style="text-align:left;">意向排他锁 (IX)</td><td style="text-align:left;">兼容</td><td style="text-align:left;">兼容</td></tr></tbody></table><p>即意向锁之间是互相兼容的，虽然意向锁和自家兄弟互相兼容，但是它会与普通的排他/共享锁互斥。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"><strong>意向共享锁(lS)</strong></th><th style="text-align:left;"><strong>意向排他锁(IX)</strong></th></tr></thead><tbody><tr><td style="text-align:left;">共享锁 (S)</td><td style="text-align:left;">兼容</td><td style="text-align:left;">互斥</td></tr><tr><td style="text-align:left;">排他锁 (X)</td><td style="text-align:left;">互斥</td><td style="text-align:left;">互斥</td></tr></tbody></table><p>注意这里的排他/共享锁指的都是表锁，意向锁不会与行级的共享/排他锁互斥。回到刚才teacher表的例子。</p><p>事务A获取了某一行的排他锁，并未提交:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 事务A</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> teacher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>此时teacher表存在两把锁: teacher表上的意向排他锁与id为6的数据行上的排他锁。事务B想要获取teacher表的共享锁。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 事务B</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK TABLES teacher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">READ</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>此时事务B检测事务A持有teacher表的意向排他锁，就可以得知事务A必然持有该表中某些数据行的排他锁，那么事务B对teacher表的加锁请求就会被排斥（阻塞)，而无需去检测表中的每一行数据是否存在排他锁。</p><p><strong>意向锁的并发性</strong></p><p>意向锁不会与行级的共享 / 排他锁互斥！正因为如此，意向锁并不会影响到多个事务对不同数据行加排他锁时的并发性。（不然我们直接用普通的表锁就行了）</p><p>我们扩展一下上面 teacher表的例子来概括一下意向锁的作用（一条数据从被锁定到被释放的过程中，可能存在多种不同锁，但是这里我们只着重表现意向锁）。</p><p><strong>从上面的案例可以得到如下结论：</strong></p><ol><li>InnoDB 支持<code>多粒度锁</code>，特定场景下，行级锁可以与表级锁共存。</li><li>意向锁之间互不排斥，但除了 IS 与 S 兼容外，<code>意向锁会与 共享锁 / 排他锁 互斥</code>。</li><li>IX，IS是表级锁，不会和行级的X，S锁发生冲突。只会和表级的X，S发生冲突。</li><li>意向锁在保证并发性的前提下，实现了<code>行锁和表锁共存</code>且<code>满足事务隔离性</code>的要求。</li></ol><h5 id="_3-自增锁-auto-inc锁" tabindex="-1">③ 自增锁（AUTO-INC锁） <a class="header-anchor" href="#_3-自增锁-auto-inc锁" aria-label="Permalink to “③ 自增锁（AUTO-INC锁）”">​</a></h5><p>在使用MySQL过程中，我们可以为表的某个列添加<code>AUTO_INCREMENT</code>属性。举例：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">teacher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">\` (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`name\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`id\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">InnoDB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">utf8mb4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">COLLATE=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">utf8mb4_0900_ai_ci;</span></span></code></pre></div><p>由于这个表的id字段声明了AUTO_INCREMENT，意味着在书写插入语句时不需要为其赋值，SQL语句修改如下所示。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INSERT INTO</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`teacher\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;zhangsan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;lisi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>上边的插入语句并没有为id列显式赋值，所以系统会自动为它赋上递增的值，结果如下所示。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> teacher;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----+----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| id |   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----+----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  | zhangsan |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  |   lisi   |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----+----------+</span></span></code></pre></div><p>现在我们看到的上面插入数据只是一种简单的插入模式，所有插入数据的方式总共分为三类，分别是“<code>Simple inserts</code>”，“<code>Bulk inserts</code>”和“<code>Mixed-mode inserts</code>”。</p><p><strong>1. “Simple inserts” （简单插入）</strong></p><p>可以<code>预先确定要插入的行数</code>（当语句被初始处理时）的语句。包括没有嵌套子查询的单行和多行<code>INSERT...VALUES()</code>和<code>REPLACE</code>语句。比如我们上面举的例子就属于该类插入，已经确定要插入的行数。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INSERT INTO</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`teacher\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;zhangsan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;lisi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">REPLACE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INTO</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`teacher\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;wangwu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p><strong>2. “Bulk inserts” （批量插入）</strong></p><p><code>事先不知道要插入的行数</code>（和所需自动递增值的数量）的语句。比如INSERT ... SELECT，REPLACE... SELECT和LOAD DATA语句，但不包括纯INSERT。 InnoDB在每处理一行，为AUTO_INCREMENT列分配一个新值。</p><p><strong>3. “Mixed-mode inserts” （混合模式插入）</strong></p><p>这些是“Simple inserts”语句但是指定部分新行的自动递增值。例如<code>INSERT INTO teacher (id,name) VALUES (1,&#39;a&#39;), (NULL,&#39;b&#39;), (5,&#39;c&#39;), (NULL,&#39;d&#39;);</code>只是指定了部分id的值。另一种类型的“混合模式插入”是 <code>INSERT ... ON DUPLICATE KEY UPDATE</code>。</p><p>对于上面数据插入的案例，MySQL中采用了<code>自增锁</code>的方式来实现，<strong>AUTO-INC锁是当向使用含有AUTO_INCREMENT列的表中插入数据时需要获取的一种特殊的表级锁</strong>，在执行插入语句时就在表级别加一个AUTO-INC锁，然后为每条待插入记录的AUTO_INCREMENT修饰的列分配递增的值，在该语句执行结束后，再把AUTO-INC锁释放掉。<strong>一个事务在持有AUTO-INC锁的过程中，其他事务的插入语句都要被阻塞</strong>，可以保证<code>一个语句</code>中分配的递增值是<code>连续</code>的。也正因为此，其并发性显然并不高，<strong>当我们向一个有AUTO_INCREMENT关键字的主键插入值的时候，每条语句都要对这个表锁进行竞争</strong>，这样的并发潜力其实是很低下的，所以innodb通过<code>innodb_autoinc_lock_mode</code>的不同取值来提供不同的锁定机制，来显著提高SQL语句的可伸缩性和性能。</p><p>innodb_autoinc_lock_mode有三种取值，分别对应与不同锁定模式：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">innodb_autoinc_lock_mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(“传统”锁定模式)</span></span></code></pre></div><p>在此锁定模式下，所有类型的insert语句都会获得一个特殊的表级AUTO-INC锁，用于插入具有AUTO_INCREMENT列的表。这种模式其实就如我们上面的例子，即每当执行insert的时候，都会得到一个表级锁(AUTO-INC锁)，使得语句中生成的auto_increment为顺序，且在binlog中重放的时候，可以保证master与slave中数据的auto_increment是相同的。因为是表级锁，当在同一时间多个事务中执行insert的时候，对于AUTO-INC锁的争夺会<code>限制并发能力</code>。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">innodb_autoinc_lock_mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(“连续”锁定模式)</span></span></code></pre></div><p>在 MySQL 8.0 之前，连续锁定模式是<code>默认</code>的。</p><p>在这个模式下，“bulk inserts”仍然使用AUTO-INC表级锁，并保持到语句结束。这适用于所有INSERT ... SELECT，REPLACE ... SELECT和LOAD DATA语句。同一时刻只有一个语句可以持有AUTO-INC锁。</p><p>对于“Simple inserts”（要插入的行数事先已知），则通过在<code>mutex（轻量锁）</code>的控制下获得所需数量的自动递增值来避免表级AUTO-INC锁， 它只在分配过程的持续时间内保持，而不是直到语句完成。不使用表级AUTO-INC锁，除非AUTO-INC锁由另一个事务保持。如果另一个事务保持AUTO-INC锁，则“Simpleinserts”等待AUTO-INC锁，如同它是一个“bulk inserts”。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">innodb_autoinc_lock_mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(“交错”锁定模式)</span></span></code></pre></div><p>从 MySQL 8.0 开始，交错锁模式是<code>默认</code>设置。</p><p>在这种模式下，自增值生成采用轻量级的互斥锁机制（称为“无锁模式”或“交错模式”），提高了并发性能。具体行为如下：</p><p><strong>1. 轻量级互斥锁</strong>：在这种模式下，自增值生成不需要对表进行传统的 AUTO-INC 锁定（table-level auto-increment lock），而是使用轻量级的互斥锁。这减少了锁争用，提高了并发事务的性能。</p><p><strong>2. 并发插入</strong>：对于“简单插入”语句（如 INSERT、INSERT ... SELECT 和 REPLACE），自增值是批量分配的。这意味着多个并发插入操作可以互不干扰地进行，从而显著提高了插入性能。但是，对于“混合模式插入”语句（如 INSERT ... ON DUPLICATE KEY UPDATE 和 LOAD DATA），MySQL 会自动调整为连续模式以确保数据一致性。</p><p><strong>3. 批量插入</strong>：批量插入操作（如 INSERT ... SELECT 或 INSERT ... VALUES (...)）将一次性分配所有需要的自增值。这允许并发插入，而不会导致锁争用。</p><p><strong>4. 唯一性保证</strong>：由于没有表级别的自增锁，因此在交错模式下，MySQL 依赖于事务提交顺序来保证自增值的唯一性。如果有两个事务同时进行插入操作，它们会各自分配一组自增值，并在提交时检查是否有冲突。</p><h5 id="_4-元数据锁-mdl锁" tabindex="-1">④ 元数据锁（MDL锁） <a class="header-anchor" href="#_4-元数据锁-mdl锁" aria-label="Permalink to “④ 元数据锁（MDL锁）”">​</a></h5><p>MySQL5.5引入了meta data lock，简称MDL锁，属于表锁范畴。MDL 的作用是，保证读写的正确性。比如，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个<code>表结构做变更</code>，增加了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。</p><p>因此， <strong>当对一个表做增删改查操作的时候，加 MDL读锁；当要对表做结构变更操作的时候，加 MDL 写锁。</strong></p><p>读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性，解决了DML和DDL操作之间的一致性问题。<code>不需要显式使用</code>，在访问一个表的时候会被自动加上。</p><p><strong>举例:元数据锁的使用场景模拟</strong></p><p>会话A: 从表中查询数据</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Query 0K,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> rows</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> affected (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sec)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 默认加了MDL 读锁</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> select</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">|        </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----------+</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> row</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sec)</span></span></code></pre></div><p>会话B: 修改表结构，增加新列</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 修改表结构 需要加MDL写锁</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;# 这个时候就会阻塞在这里，有其他事务在读数据。</span></span></code></pre></div><p>会话C: 查看当前MySQL的进程</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> show processlist;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----+-----------------+-----------+------+---------+--------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| Id | User            | Host      | db   | Command | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Time</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                           | Info                            |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----+-----------------+-----------+------+---------+--------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | event_scheduler | localhost | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | Daemon  | </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">225129</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | Waiting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">on</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> empty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> queue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                            |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            | localhost | chen | Sleep   |     </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">81</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |                                 | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                            |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            | localhost | chen | Query   |     </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | Waiting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> metadata lock | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            | localhost | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | Query   |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                            | show processlist                |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----+-----------------+-----------+------+---------+--------+---------------------------------+---------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> rows</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sec)</span></span></code></pre></div><p>通过会话C可以看出会话B被阻塞，这是由于会话A拿到了account表的元数据读锁，会话B想申请account表的元数据写锁，由于读写锁互斥，会话B需要等待会话A释放元数据锁才能执行。</p><p><strong>元数据锁可能带来的问题</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;">Session A</th><th style="text-align:left;">Session B</th><th style="text-align:left;">Session C</th></tr></thead><tbody><tr><td style="text-align:left;">begin;<br>select * from account;</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">alter table account add age int;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">select * from account;</td></tr></tbody></table><p>我们可以看到 Session A会对表account加一个 MDL 读锁，之后 Session B要加MDL写锁会被 blocked，因为 Session A 的MDL 读锁还没有释放，而 Session C要在表account上新申请MDL 读锁的请求也会被 Session B 阻塞。前面我们说了，所有对表的增删改查操作都需要先申请MDL 读锁，就都被阻塞，等于这个表现在完全不可读写了。</p><h4 id="_2-innodb中的行锁" tabindex="-1">2. InnoDB中的行锁 <a class="header-anchor" href="#_2-innodb中的行锁" aria-label="Permalink to “2. InnoDB中的行锁”">​</a></h4><p>行锁(Row Lock)也称为记录锁，顾名思义，就是锁住某一行（某条记录row)。需要的注意的是，MySQL服务器层并没有实现行锁机制，<strong>行级锁只在存储引擎层实现。</strong></p><p>优点: 锁定力度小，<code>发生锁冲突概率低</code>，可以实现的<code>并发度高</code>。</p><p>缺点: 对于<code>锁的开销比大</code>，加锁会比较慢，容易出现<code>死锁</code>情况。</p><p>InnoDB与MylSAM的最大不同有两点:一是支持事务(TRANSACTION);二是采用了行级锁。</p><p>首先我们创建表如下:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  class </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ( id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) Engine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">InnoDB CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">utf8;</span></span></code></pre></div><p>向这个表里插入几条记录:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;一班&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;李四&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;一班&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;王五&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;二班&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;赵六&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;二班&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;钱七&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;三班&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>这里把B+树的索引结构做了一个超级简化，只把索引中的记录给拿了出来，下面看看都有哪些常用的行锁类型。</p><h5 id="_1-记录锁-record-locks" tabindex="-1">① 记录锁（Record Locks） <a class="header-anchor" href="#_1-记录锁-record-locks" aria-label="Permalink to “① 记录锁（Record Locks）”">​</a></h5><p>记录锁也就是仅仅把一条记录锁上，官方的类型名称为：<code>LOCK_REC_NOT_GAP</code>。比如我们把id值为 8 的那条记录加一个记录锁的示意图如图所示。仅仅是锁住了id值为 8 的记录，对周围的数据没有影响。</p><p><img src="`+u+'" alt="image-20220328185943202.png"></p><p>举例如下：</p><p><img src="'+_+'" alt="image-20220328185953649.png"></p><p>记录锁是有S锁和X锁之分的，称之为<code>S型记录锁</code>和<code>X型记录锁</code>。</p><ul><li>当一个事务获取了一条记录的S型记录锁后，其他事务也可以继续获取该记录的S型记录锁，但不可以继续获取X型记录锁；</li><li>当一个事务获取了一条记录的X型记录锁后，其他事务既不可以继续获取该记录的S型记录锁，也不可以继续获取X型记录锁。</li></ul><h5 id="_2-间隙锁-gap-locks" tabindex="-1">② 间隙锁（Gap Locks） <a class="header-anchor" href="#_2-间隙锁-gap-locks" aria-label="Permalink to “② 间隙锁（Gap Locks）”">​</a></h5><p>MySQL在<code>REPEATABLE READ</code>隔离级别下是可以解决幻读问题的，解决方案有两种，可以使用<code>MVCC</code>方案解决，也可以采用加锁方案解决。但是在使用<code>加锁</code>方案解决时有个大问题，就是事务在第一次执行读取操作时，那些幻影记录尚不存在，我们无法给这些<code>幻影记录</code>加上<code>记录锁</code>。InnoDB提出了一种称之为<code>Gap Locks</code>的锁，官方的类型名称为：<code>LOCK_GAP</code>，我们可以简称为<code>gap锁</code>。比如，把id值为 8 的那条记录加一个gap锁的示意图如下。</p><p><img src="'+T+`" alt="image-20220328190138150.png"></p><p>图中id值为 8 的记录加了gap锁，意味着<code>不允许别的事务在id值为 8 的记录前边的间隙插入新记录</code>，其实就是id列的值( 3 , 8 )这个区间的新记录是不允许立即插入的。比如，有另外一个事务再想插入一条id值为 4 的新记录，它定位到该条新记录的下一条记录的id值为 8 ，而这条记录上又有一个gap锁，所以就会阻塞插入操作，直到拥有这个gap锁的事务提交了之后，id列的值在区间( 3 , 8 )中的新记录才可以被插入。</p><p><strong>gap锁的提出仅仅是为了防止插入幻影记录而提出的</strong> 。虽然有共享<code>gap锁</code>和<code>独占gap锁</code>这样的说法，但是它们起到的作用是相同的。而且如果对一条记录加了gap锁（不论是共享gap锁还是独占gap锁)，并不会限制其他事务对这条记录加记录锁或者继续加gap锁。</p><blockquote><p>这里间隙锁，会加到小的数据上。。比如查询 4~8 的id 间隙锁会放到8记录里面。</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> student;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----+--------+--------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| id | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   | class  |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----+--------+--------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | 张三    | 一班   |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | 李四    | 一班   |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | 王五    | 二班   |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | 赵六    | 二班   |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | 钱七    | 三班   |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----+--------+--------+</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>session 1</strong></th><th style="text-align:left;"><strong>session 2</strong></th></tr></thead><tbody><tr><td style="text-align:left;">select *from student where id =8 lock in share mode;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">select * from student where id = 8 for update;</td></tr></tbody></table><p>这里好会阻塞住，是前面的行锁知识点。</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>session 1</strong></th><th style="text-align:left;"><strong>session 2</strong></th></tr></thead><tbody><tr><td style="text-align:left;">select *from student where id =5 lock in share mode;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">select * from student where id =5 for update;</td></tr></tbody></table><p>这里session 2并不会被堵住。因为表里并没有id=5这个记录，因此session 1加的是间隙锁（3,8)。而session 2也是在这个间隙加的间隙锁。它们有共同的目标，即:保护这个间隙，不允许插入值。但，它们之间是不冲突的。</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>session 1</strong></th><th style="text-align:left;"><strong>session 2</strong></th></tr></thead><tbody><tr><td style="text-align:left;">select *from student where id =5 lock in share mode;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">insert into student(id, name, class) values (6, &#39;tom&#39;, &#39;三班&#39;)；</td></tr></tbody></table><p>这里就会阻塞了，以为加了间隙锁。</p><h5 id="_3-临键锁-next-key-locks" tabindex="-1">③ 临键锁（Next-Key Locks） <a class="header-anchor" href="#_3-临键锁-next-key-locks" aria-label="Permalink to “③ 临键锁（Next-Key Locks）”">​</a></h5><p>有时候我们既想<code>锁住某条记录</code>，又想<code>阻止</code>其他事务在该记录前边的<code>间隙插入新记录</code>，所以InnoDB就提出了一种称之为<code>Next-Key Locks的锁</code>，官方的类型名称为：<code>LOCK_ORDINARY</code>，我们也可以简称为next-key锁。<code>Next-Key Locks</code>是在存储引擎innodb、事务级别在<code>可重复读</code>的情况下使用的数据库锁，innodb默认的锁就是Next-Key locks。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><h5 id="_4-插入意向锁-insert-intention-locks" tabindex="-1">④ 插入意向锁（Insert Intention Locks） <a class="header-anchor" href="#_4-插入意向锁-insert-intention-locks" aria-label="Permalink to “④ 插入意向锁（Insert Intention Locks）”">​</a></h5><p>我们说一个事务在<code>插入</code>一条记录时需要判断一下插入位置是不是被别的事务加了<code>gap锁</code>（<code>next-key锁</code>也包含<code>gap锁</code>），如果有的话，插入操作需要等待，直到拥有<code>gap锁</code>的那个事务提交。但是 <strong>InnoDB规定事务在等待的时候也需要在内存中生成一个锁结构</strong> ，表明有事务想在某个<code>间隙</code>中<code>插入</code>新记录，但是现在在等待。InnoDB就把这种类型的锁命名为Insert Intention Locks，官方的类型名称为：<code>LOCK_INSERT_INTENTION</code>，我们称为插入意向锁。<code>插入意向锁</code>是一种<code>Gap锁</code>，不是意向锁，在insert操作时产生。</p><p>插入意向锁是在插入一条记录行前，由 <code>INSERT 操作产生的一种间隙锁。</code>该锁用以表示插入意向，当多个事务在同一区间（gap）插入位置不同的多条数据时，事务之间不需要互相等待。假设存在两条值分别为4和7的记录，两个不同的事务分别试图插入值为5和6的两条记录，每个事务在获取插入行上独占的（排他）锁前，都会获取（4，7）之间的间隙锁，但是因为数据行之间并不冲突，所以两个事务之间并不会产生冲突（阻塞等待）。总结来说，插入意向锁的特性可以分成两部分：</p><p>（1）插入意向锁是一种<code>特殊的间隙锁</code> ——间隙锁可以锁定开区间内的部分记录。</p><p>（2）插入意向锁之间<code>互不排斥</code>，所以即使多个事务在同一区间插入多条记录，只要记录本身（主键、唯一索引）不冲突，那么事务之间就不会出现冲突等待。</p><p>注意，虽然插入意向锁中含有意向锁三个字，但是它并不属于意向锁而属于间隙锁，因为意向锁是表锁而插入意向锁是<code>行锁</code>。</p><p>事实上 <strong>插入意向锁并不会阻止别的事务继续获取该记录上任何类型的锁。</strong></p><h4 id="_3-页锁" tabindex="-1">3. 页锁 <a class="header-anchor" href="#_3-页锁" aria-label="Permalink to “3. 页锁”">​</a></h4><p>页锁就是在<code>页的粒度</code>上进行锁定，锁定的数据资源比行锁要多，因为一个页中可以有多个行记录。当我们使用页锁的时候，会出现数据浪费的现象，但这样的浪费最多也就是一个页上的数据行。 <strong>页锁的开销介于表锁和行锁之间，会出现死锁。锁定粒度介于表锁和行锁之间，并发度一般。</strong></p><p>每个层级的锁数量是有限制的，因为锁会占用内存空间，<code>锁空间的大小是有限的</code>。当某个层级的锁数量超过了这个层级的阈值时，就会进行<code>锁升级</code>。锁升级就是用更大粒度的锁替代多个更小粒度的锁，比如InnoDB 中行锁升级为表锁，这样做的好处是占用的锁空间降低了，但同时数据的并发度也下降了。</p><h3 id="_3-3-从对待锁的态度划分-乐观锁、悲观锁" tabindex="-1">3. 3 从对待锁的态度划分:乐观锁、悲观锁 <a class="header-anchor" href="#_3-3-从对待锁的态度划分-乐观锁、悲观锁" aria-label="Permalink to “3. 3 从对待锁的态度划分:乐观锁、悲观锁”">​</a></h3><p>从对待锁的态度来看锁的话，可以将锁分成乐观锁和悲观锁，从名字中也可以看出这两种锁是两种看待<code>数据并发的思维方式</code>。需要注意的是，乐观锁和悲观锁并不是锁，而是锁的<code>设计思想</code>。</p><h4 id="_1-悲观锁-pessimistic-locking" tabindex="-1">1. 悲观锁（Pessimistic Locking） <a class="header-anchor" href="#_1-悲观锁-pessimistic-locking" aria-label="Permalink to “1. 悲观锁（Pessimistic Locking）”">​</a></h4><p>悲观锁是一种思想，顾名思义，就是很悲观，对数据被其他事务的修改持保守态度，会通过数据库自身的锁机制来实现，从而保证数据操作的排它性。</p><p>悲观锁总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会<code>阻塞</code>直到它拿到锁（ 共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程 ）。比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁，当其他线程想要访问数据时，都需要阻塞挂起。Java中<code>synchronized</code>和<code>ReentrantLock</code>等独占锁就是悲观锁思想的实现。</p><p><strong>秒杀案例1:</strong></p><p>商品秒杀过程中，库存数量的减少，避免出现超卖的情况。比如，商品表中有一个字段为quantity表示当前该商品的库存量。假设商品id为1001，quantity=100个。如果不使用锁的情况下，操作方法如下所示</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#第1步：查出商品库存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> quantity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1001</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#第2步：如果库存大于0，则根据商品信息生产订单</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> orders (item_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1001</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#第3步：修改商品的库存，num表示购买数量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> quantity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> quantity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1001</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>这样写的话，在并发量小的公司没有大的问题，但是如果在<code>高并发环境</code>下可能出现以下问题</p><table tabindex="0"><thead><tr><th></th><th>线程A</th><th>线程B</th></tr></thead><tbody><tr><td>1</td><td>step1(查询还有100部手机)</td><td>step1(查询还有100部手机)</td></tr><tr><td>2</td><td></td><td>step2(生成订单)</td></tr><tr><td>3</td><td>step2(生成订单)</td><td></td></tr><tr><td>4</td><td></td><td>step3(减库存1)</td></tr><tr><td>5</td><td>step3(减库存2)</td><td></td></tr></tbody></table><p>其中线程B此时已经下单并且减完库存，这个时候线程A依然去执行step3，就造成了超卖。</p><p>我们使用悲观锁可以解决这个问题，商品信息从查询出来到修改，中间有一个生成订单的过程，使用悲观锁的原理就是，当我们在查询items信息后就把当前的数据锁定，直到我们修改完毕后再解锁。那么整个过程中，因为数据被锁定了，就不会出现有第三者来对其进行修改了。而这样做的前提是<strong>需要将要执行的SQL语句放在同一个事务中，否则达不到锁定数据行的目的。</strong></p><p>修改如下:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#第1步：查出商品库存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> quantity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1001</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#第2步：如果库存大于Q，则根据商品信息生产订单</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> orders (item_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1001</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#第3步：修改商品的库存，num表示购买数量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> quantity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> quantity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1001</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p><code>select ... for update</code> 是MySQL中悲观锁。此时在items表中，id为1001的那条数据就被我们锁定了，其他的要执行<code>select quantity from items where id = 1001 for update;</code>语句的事务必须等本次事务提交之后才能执行。这样我们可以保证当前的数据不会被其它事务修改。</p><p>注意，当执行select quantity from items where id = 1001 for update; 语句之后，如果在其他事务中执行select quantity from items where id=1001; 语句，并不会受第一个事务的影响，仍然可以正常查询出数据。</p><p>注意：<strong>select ... for update语句执行过程中所有扫描的行都会被锁上，因此在MySQL中用悲观锁必须确定使用了索引，而不是全表扫描，否则将会把整个表锁住。</strong></p><p>悲观锁不适用的场景较多，它存在一些不足，因为悲观锁大多数情况下依靠数据库的锁机制来实现，以保证程序的并发访问性，同时这样对数据库性能开销影响也很大，特别是<code>长事务</code>而言，这样的<code>开销往往无法承受</code>，这时就需要乐观锁。</p><h4 id="_2-乐观锁-optimistic-locking" tabindex="-1">2. 乐观锁（Optimistic Locking） <a class="header-anchor" href="#_2-乐观锁-optimistic-locking" aria-label="Permalink to “2. 乐观锁（Optimistic Locking）”">​</a></h4><p>乐观锁认为对同一数据的并发操作不会总发生，属于小概率事件，不用每次都对数据上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，也就是 <strong>不采用数据库自身的锁机制，而是通过程序来实现</strong> 。在程序上，我们可以采用<code>版本号机制</code>或者<code>CAS机制</code>实现。 <strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong> 。在Java中java.util.concurrent.atomic包下的原子变量类就是使用了乐观锁的一种实现方式：CAS实现的。</p><p><strong>1.乐观锁的版本号机制</strong></p><p>在表中设计一个<code>版本字段 version</code>，第一次读的时候，会获取 version 字段的取值。然后对数据进行更新或删除操作时，会执行<code>UPDATE ... SET version=version+1 WHERE version=version</code>。此时如果已经有事务对这条数据进行了更改，修改就不会成功。</p><p><strong>2. 乐观锁的时间戳机制</strong></p><p>时间戳和版本号机制一样，也是在更新提交的时候，将当前数据的时间戳和更新之前取得的时间戳进行比较，如果两者一致则更新成功，否则就是版本冲突。</p><p>你能看到乐观锁就是程序员自己控制数据并发操作的权限，基本是通过给数据行增加一个戳（版本号或者时间戳），从而证明当前拿到的数据是否最新。</p><p><strong>秒杀案例2</strong></p><p>依然使用上面秒杀的案例，执行流程如下</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#第1步：查出商品库存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> quantity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1001</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#第2步：如果库存大于Q，则根据商品信息生产订单</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> orders (item_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1001</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#第3步：修改商品的库存，num表示购买数量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> quantity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> quantity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">num, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> version+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1001</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> and</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> #{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div><p>注意，如果数据表是<code>读写分离</code>的表，当matser表中写入的数据没有及时同步到slave表中时，会造成更新一直失败的问题。此时需要<code>强制读取master表</code>中的数据（即将select语句放到事务中即可，这时候查询的就是master主库了。）</p><p>如果我们对同一条数据进行<code>频繁的修改</code>的话，那么就会出现这么一种场景，每次修改都只有一个事务能更新成功，在业务感知上面就有大量的失败操作。我们把代码修改如下：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#第1步：查出商品库存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> quantity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1001</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#第2步：如果库存大于Q，则根据商品信息生产订单</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> orders (item_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1001</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#第3步：修改商品的库存，num表示购买数量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> quantity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> quantity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1001</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> quantity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>这样就会使每次修改都能成功，而且不会出现超卖的现象。</p><h4 id="_3-两种锁的适用场景" tabindex="-1">3. 两种锁的适用场景 <a class="header-anchor" href="#_3-两种锁的适用场景" aria-label="Permalink to “3. 两种锁的适用场景”">​</a></h4><p>从这两种锁的设计思想中，我们总结一下乐观锁和悲观锁的适用场景：</p><ol><li><code>乐观锁</code>适合<code>读操作多</code>的场景，相对来说写的操作比较少。它的优点在于程序实现，不存在死锁问题，不过适用场景也会相对乐观，因为它阻止不了除了程序以外的数据库操作。</li><li><code>悲观锁</code>适合<code>写操作多</code>的场景，因为写的操作具有<code>排它性</code>。采用悲观锁的方式，可以在数据库层面阻止其他事务对该数据的操作权限，防止<code>读 - 写</code>和<code>写 - 写</code>的冲突。</li></ol><h3 id="_3-4-按加锁的方式划分-显式锁、隐式锁" tabindex="-1">3. 4 按加锁的方式划分：显式锁、隐式锁 <a class="header-anchor" href="#_3-4-按加锁的方式划分-显式锁、隐式锁" aria-label="Permalink to “3. 4 按加锁的方式划分：显式锁、隐式锁”">​</a></h3><h4 id="_1-隐式锁" tabindex="-1">1. 隐式锁 <a class="header-anchor" href="#_1-隐式锁" aria-label="Permalink to “1. 隐式锁”">​</a></h4><p>一个事务在执行 <code>INSERT</code> 操作时，如果即将插入的<code>间隙</code>已经被其他事务加了<code>gap锁</code>，那么本次 <code>INSERT</code> 操作会阻塞，并且当前事务会在该间隙上加一个<code>插入意向锁</code>，否则一般情况下 <code>INSERT</code> 操作是不加锁的。那如果一个事务首先插入了一条记录（此时并没有在内存生产与该记录关联的锁结构），然后另一个事务：</p><ul><li><p>立即使用 <code>SELECT ... LOCK IN SHARE MODE</code> 语句读取这条记录，也就是要获取这条记录的<code>S锁</code>，或者使用 <code>SELECT ... FOR UPDATE</code> 语句读取这条记录，也就是要获取这条记录的<code>X锁</code>，怎么办？</p><p>如果允许这种情况的发生，那么可能产生脏读问题。</p></li><li><p>立即修改这条记录，也就是要获取这条记录的X锁，怎么办？</p><p>如果允许这种情况的发生，那么可能产生脏写问题。</p></li></ul><p>这时候我们前边提过的<code>事务id</code>又要起作用了。我们把聚簇索引和二级索引中的记录分开看一下：</p><ul><li>情景一： 对于聚簇索引记录来说，有一个<code>trx_id</code>隐藏列，该隐藏列记录着最后改动该记录的<code>事务id</code>。那么如果在当前事务中新插入一条聚簇索引记录后，该记录的<code>trx_id</code>隐藏列代表的的就是当前事务的<code>事务id</code>，如果其他事务此时想对该记录添加<code>S锁</code>或者<code>X锁</code>时，首先会看一下该记录的<code>trx_id</code>隐藏列代表的事务是否是当前的活跃事务，如果是的话，那么就帮助当前事务创建一个<code>X锁</code>（也就是为当前事务创建一个锁结构，is_waiting属性是false），然后自己进入等待状态（也就是为自己也创建一个锁结构，<code>is_waiting</code>属性是true）。</li><li>情景二： 对于二级索引记录来说，本身并没有<code>trx_id</code>隐藏列，但是在二级索引页面的<code>PageHeader</code>部分有一个<code>PAGE_MAX_TRX_ID</code>属性，该属性代表对该页面做改动的最大的<code>事务id</code>，如果<code>PAGE_MAX_TRX_ID</code>属性值小于当前最小的活跃<code>事务id</code>，那么说明对该页面做修改的事务都已经提交了，否则就需要在页面中定位到对应的二级索引记录，然后回表找到它对应的聚簇索引记录，然后再重复情景一的做法。</li></ul><p>即：一个事务对新插入的记录可以不显式的加锁（生成一个锁结构），但是由于<code>事务id</code>的存在，相当于加了一个<code>隐式锁</code>。别的事务在对这条记录加<code>S锁</code>或者<code> X锁</code>时，由于<code>隐式锁</code>的存在，会先帮助当前事务生成一个锁结构， 然后自己再生成一个锁结构后进入等待状态。隐式锁是一种<code>延迟加锁</code>的机制，从而来减少加锁的数量。</p><p>隐式锁在实际内存对象中并不含有这个锁信息。只有当产生锁等待时，隐式锁转化为显式锁。</p><p>InnoDB的 insert操作，对插入的记录不加锁，但是此时如果另一个线程进行当前读，类似以下的用例，session 2 会锁等待 session 1，那么这是如何实现的呢？</p><p><strong>session 1:</strong></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Query OK, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> rows</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> affected (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sec)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> insert INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">34</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;周八&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;二班&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Query OK, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> row</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> affected (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sec)</span></span></code></pre></div><p><strong>session 2:</strong></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Query OK, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> rows</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> affected (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sec)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> student lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> share mode; #执行完，当前事务被阻塞</span></span></code></pre></div><p>执行下述语句，输出结果：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FROM</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> performance_schema</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">data_lock_waits</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">\\G;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">***************************</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">. </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">row</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ***************************</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ENGINE: INNODB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">REQUESTING_ENGINE_LOCK_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">140562531358232</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">REQUESTING_ENGINE_TRANSACTION_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">422037508068888</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">REQUESTING_THREAD_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">REQUESTING_EVENT_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">REQUESTING_OBJECT_INSTANCE_BEGIN: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">140562535668584</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">BLOCKING_ENGINE_LOCK_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">140562531351768</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">BLOCKING_ENGINE_TRANSACTION_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">15902</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">BLOCKING_THREAD_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">BLOCKING_EVENT_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">BLOCKING_OBJECT_INSTANCE_BEGIN: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">140562535619104</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> row</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sec)</span></span></code></pre></div><p><strong>隐式锁的逻辑过程如下：</strong></p><p>A. InnoDB的每条记录中都一个隐含的trx_id字段，这个字段存在于聚簇索引的B+Tree中。</p><p>B. 在操作一条记录前，首先根据记录中的trx_id检查该事务是否是活动的事务(未提交或回滚)。如果是活动的事务，首先将隐式锁转换为显式锁(就是为该事务添加一个锁)。</p><p>C. 检查是否有锁冲突，如果有冲突，创建锁，并设置为waiting状态。如果没有冲突不加锁，跳到E。</p><p>D. 等待加锁成功，被唤醒，或者超时。</p><p>E. 写数据，并将自己的trx_id写入trx_id字段。</p><h4 id="_2-显式锁" tabindex="-1">2. 显式锁 <a class="header-anchor" href="#_2-显式锁" aria-label="Permalink to “2. 显式锁”">​</a></h4><p>通过特定的语句进行加锁，我们一般称之为显示加锁，例如：</p><p>显示加共享锁：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ....  lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> share mode;</span></span></code></pre></div><p>显示加排它锁：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ....  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><h3 id="_3-5-其它锁之-全局锁" tabindex="-1">3. 5 其它锁之：全局锁 <a class="header-anchor" href="#_3-5-其它锁之-全局锁" aria-label="Permalink to “3. 5 其它锁之：全局锁”">​</a></h3><p>全局锁就是对<code>整个数据库实例</code>加锁。当你需要让整个库处于<code>只读状态</code>的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。全局锁的典型使用<code>场景</code>是：做<code>全库逻辑备份</code>。</p><p>全局锁的命令：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Flush tables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">with</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> lock;</span></span></code></pre></div><h3 id="_3-6-其它锁之-死锁" tabindex="-1">3. 6 其它锁之：死锁 <a class="header-anchor" href="#_3-6-其它锁之-死锁" aria-label="Permalink to “3. 6 其它锁之：死锁”">​</a></h3><h4 id="_1-概念" tabindex="-1">1. 概念 <a class="header-anchor" href="#_1-概念" aria-label="Permalink to “1. 概念”">​</a></h4><p>两个事务都持有对方需要的锁，并且在等待对方释放，并且双方都不会释放自己的锁。</p><p><strong>举例1:</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">事务1</th><th style="text-align:left;">事务2</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">start transaction;<br>update account set money=10 where id=1;</td><td style="text-align:left;">start transaction;</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"></td><td style="text-align:left;">update account set money=10 where id=2;</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">update account set money=20 where id=2;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"></td><td style="text-align:left;">update account set money=20 where id=1;</td></tr></tbody></table><p><strong>举例2</strong></p><p>用户A给用户B转账100，在此同时，用户B也给用户A转账100。这个过程，可能导致死锁。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#事务1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;#操作1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;#操作3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#事务2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;#操作2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;#操作4</span></span></code></pre></div><p><img src="`+f+'" alt="image-20240615053921128"></p><h4 id="_2-产生死锁的必要条件" tabindex="-1">2. 产生死锁的必要条件 <a class="header-anchor" href="#_2-产生死锁的必要条件" aria-label="Permalink to “2. 产生死锁的必要条件”">​</a></h4><ol><li>两个或者两个以上事务</li><li>每个事务都已经持有锁并且申请新的锁</li><li>锁资源同时只能被同一个事务持有或者不兼容</li><li>事务之间因为持有锁和申请锁导致彼此循环等待</li></ol><blockquote><p>死锁的关键在于：两个（或以上）的Session加锁的顺序不一致。</p></blockquote><h4 id="_3-如何处理死锁" tabindex="-1">3. 如何处理死锁 <a class="header-anchor" href="#_3-如何处理死锁" aria-label="Permalink to “3. 如何处理死锁”">​</a></h4><p>**方式1：**等待，直到超时（innodb_lock_wait_timeout=50s）。</p><p>即当两个事务互相等待时，当一个事务等待时间超过设置的阈值时，就将其<code>回滚</code>，另外事务继续进行。这种方法简单有效，在innodb中，参数<code>innodb_lock_wait_timeout</code>用来设置超时时间。</p><p>缺点：对于在线服务来说，这个等待时间往往是无法接受的。</p><p>那将此值修改短一些，比如1s，0.1s是否合适？不合适，容易误伤到普通的锁等待。</p><p>**方式2：**使用死锁检测进行死锁处理</p><p>方式1检测死锁太过被动，innodb还提供了<code>wait-for graph算法</code>来主动进行死锁检测，每当加锁请求无法立即满足需要并进入等待时，wait-for graph算法都会被触发。</p><p>这是一种较为<code>主动的死锁检测机制</code>，要求数据库保存<code>锁的信息链表</code>和<code>事务等待链表</code>两部分信息。</p><p><img src="'+x+'" alt="image-20240615055924839"></p><p>基于这两个信息，可以绘制wait-for graph（等待图）</p><p><img src="'+N+`" alt="image-20240615055943835"></p><blockquote><p>死锁检测的原理是构建一个以事务为顶点、锁为边的有向图，判断有向图是否存在环，存在即有死锁。</p></blockquote><p>一旦检测到回路、有死锁，这时候InnoDB存储引擎会选择<code>回滚undo量最小的事务</code>，让其他事务继续执行 （<code>innodb_deadlock_detect=on</code>表示开启这个逻辑）。</p><p>缺点：每个新的被阻塞的线程，都要判断是不是由于自己的加入导致了死锁，这个操作时间复杂度是O(n)。如果 100个并发线程同时更新同一行，意味着要检测100*100=1万次，1万个线程就会有1千万次检测。</p><p><strong>如何解决？</strong></p><ul><li>方式1：关闭死锁检测，但意味着可能会出现大量的超时，会导致业务有损。</li><li>方式2：控制并发访问的数量。比如在中间件中实现对于相同行的更新，在进入引擎之前排队，这样在InnoDB 内部就不会有大量的死锁检测工作。</li></ul><p><strong>进一步的思路：</strong></p><p>可以考虑通过将一行改成逻辑上的多行来减少<code>锁冲突</code>。比如，连锁超市账户总额的记录，可以考虑放到多条记录上。账户总额等于这多个记录的值的总和。</p><h4 id="_4-如何避免死锁" tabindex="-1">4. 如何避免死锁 <a class="header-anchor" href="#_4-如何避免死锁" aria-label="Permalink to “4. 如何避免死锁”">​</a></h4><ul><li>合理设计索引，使业务 SQL尽可能通过索引定位更少的行，减少锁竞争。</li><li>调整业务逻辑 SQL执行顺序，避免 update/delete 长时间持有锁的 SQL 在事务前面。</li><li>避免大事务，尽量将大事务拆成多个小事务来处理，小事务缩短锁定资源的时间，发生锁冲突的几率也更小。</li><li>在并发比较高的系统中，不要显式加锁，特别是是在事务里显式加锁。如 select ... for update 语句，如果是在事务里运行了 start transaction 或设置了autocommit等于0，那么就会锁定所查找到的记录。</li><li>降低隔离级别。如果业务允许，将隔离级别调低也是较好的选择，比如将隔离级别从RR调整为RC，可以避免掉很多因为gap锁造成的死锁。</li></ul><h2 id="_4-锁的内存结构" tabindex="-1">4. 锁的内存结构 <a class="header-anchor" href="#_4-锁的内存结构" aria-label="Permalink to “4. 锁的内存结构”">​</a></h2><p>我们前边说对一条记录加锁的本质就是在内存中创建一个<code>锁结构</code>与之关联，那么是不是一个事务对多条记录加锁，就要创建多个<code>锁结构</code>呢？比如：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 事务T1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user LOCK </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">IN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SHARE MODE;</span></span></code></pre></div><p>理论上创建多个锁结构没问题，但是如果一个事务要获取10000条记录的锁，生成10000个锁结构也太崩溃了！所以决定在对不同记录加锁时，如果符合下边这些条件的记录会放到一个锁结构中。</p><ul><li>在同一个事务中进行加锁操作</li><li>被加锁的记录在同一个页面中</li><li>加锁的类型是一样的</li><li>等待状态是一样的</li></ul><p>InnoDB存储引擎中的锁结构如下：</p><p><img src="https://www.pnglog.com/443C9y.png" alt="image-20220328191907367.png"></p><p>结构解析：</p><ol><li><p>**锁所在的事务信息：**不论是<code>表锁</code>还是<code>行锁</code>，都是在事务执行过程中生成的，哪个事务生成了这个<code>锁结构</code>，这里就记录这个事务的信息。此<code>锁所在的事务信息</code>在内存结构中只是一个指针，通过指针可以找到内存中关于该事务的更多信息，比方说事务id等。</p></li><li><p>**索引信息：**对于行锁来说，需要记录一下加锁的记录是属于哪个索引的。这里也是一个指针。</p></li><li><p><strong>表锁／行锁信息：</strong><code>表锁结构</code>和<code>行锁结构</code>在这个位置的内容是不同的：</p><ul><li><p>表锁：记载着是对哪个表加的锁，还有其他的一些信息。</p></li><li><p>行锁：记载了三个重要的信息：</p><ul><li><p><code>Space ID</code>：记录所在表空间。</p></li><li><p><code>Page Number</code>：记录所在页号。</p></li><li><p><code>n_bits</code>：对于行锁来说，一条记录就对应着一个比特位，一个页面中包含很多记录，用不同的比特位来区分到底是哪一条记录加了锁。为此在行锁结构的末尾放置了一堆比特位，这个n_bits属性代表使用了多少比特位。</p><blockquote><p>n_bits的值一般都比页面中记录条数多一些。主要是为了之后在页面中插入了新记录后也不至于重新分配锁结构</p></blockquote></li></ul></li></ul></li><li><p>**type_mode：**这是一个 32 位的数，被分成了<code>lock_mode</code>、<code>lock_type</code>和<code>rec_lock_type</code>三个部分，如图所示：</p><p><img src="https://www.pnglog.com/8kPqRg.png" alt="image-20220328192308086.png"></p><ul><li><p>锁的模式（<code>lock_mode</code>），占用低 4 位，可选的值如下：</p><ul><li><p><code>LOCK_IS</code>（十进制的 0 ）：表示共享意向锁，也就是<code>IS锁</code>。</p></li><li><p><code>LOCK_IX</code>（十进制的 1 ）：表示独占意向锁，也就是<code>IX锁</code>。</p></li><li><p><code>LOCK_S</code>（十进制的 2 ）：表示共享锁，也就是<code>S锁</code>。</p></li><li><p><code>LOCK_X</code>（十进制的 3 ）：表示独占锁，也就是<code>X锁</code>。</p></li><li><p><code>LOCK_AUTO_INC</code>（十进制的 4 ）：表示<code>AUTO-INC</code>锁。</p></li></ul><p>在InnoDB存储引擎中，LOCK_IS，LOCK_IX，LOCK_AUTO_INC都算是表级锁的模式，LOCK_S和LOCK_X既可以算是表级锁的模式，也可以是行级锁的模式。</p></li></ul><ul><li>锁的类型（<code>lock_type</code>），占用第 5 ～ 8 位，不过现阶段只有第 5 位和第 6 位被使用： <ul><li><code>LOCK_TABLE</code>（十进制的 16 ），也就是当第 5 个比特位置为 1 时，表示表级锁。</li><li><code>LOCK_REC</code>（十进制的 32 ），也就是当第 6 个比特位置为 1 时，表示行级锁。</li></ul></li><li>行锁的具体类型（<code>rec_lock_type</code>），使用其余的位来表示。只有在<code>lock_type</code>的值为<code>LOCK_REC</code>时，也就是只有在该锁为行级锁时，才会被细分为更多的类型： <ul><li><code>LOCK_ORDINARY</code>（十进制的 0 ）：表示<code>next-key锁</code>。</li><li><code>LOCK_GAP</code>（十进制的 512 ）：也就是当第 10 个比特位置为 1 时，表示<code>gap锁</code>。</li><li><code>LOCK_REC_NOT_GAP</code>（十进制的 1024 ）：也就是当第 11 个比特位置为 1 时，表示正经<code>记录锁</code>。</li><li><code>LOCK_INSERT_INTENTION</code>（十进制的 2048 ）：也就是当第 12 个比特位置为 1 时，表示插入意向锁。其他的类型：还有一些不常用的类型我们就不多说了。</li></ul></li><li><code>is_waiting</code>属性呢？基于内存空间的节省，所以把<code>is_waiting</code>属性放到了<code>type_mode</code>这个 32位的数字中： <ul><li>LOCK_WAIT（十进制的 256 ） ：当第 9 个比特位置为 1 时，表示is_waiting为true，也就是当前事务尚未获取到锁，处在等待状态；当这个比特位为 0 时，表示is_waiting为false，也就是当前事务获取锁成功。</li></ul></li></ul></li><li><p>**其他信息：**为了更好的管理系统运行过程中生成的各种锁结构而设计了各种哈希表和链表。</p></li><li><p>**一堆比特位：**如果是<code>行锁结构</code>的话，在该结构末尾还放置了一堆比特位，比特位的数量是由上边提到的n_bits属性表示的。InnoDB数据页中的每条记录在记录头信息中都包含一个heap_no属性，伪记录Infimum的heap_no值为 0 ，Supremum的heap_no值为 1 ，之后每插入一条记录，heap_no值就增 1 。锁结构最后的一堆比特位就对应着一个页面中的记录，一个比特位映射一个heap_no，即一个比特位映射到页内的一条记录。</p></li></ol><h2 id="_5-锁监控" tabindex="-1">5. 锁监控 <a class="header-anchor" href="#_5-锁监控" aria-label="Permalink to “5. 锁监控”">​</a></h2><p>关于MySQL锁的监控，我们一般可以通过检查<code>InnoDB_row_lock</code>等状态变量来分析系统上的行锁的争夺情况</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> like</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;innodb_row_lock%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-------------------------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| Variable_name                 | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-------------------------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| Innodb_row_lock_current_waits |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| Innodb_row_lock_time          |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| Innodb_row_lock_time_avg      |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| Innodb_row_lock_time_max      |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| Innodb_row_lock_waits         |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-------------------------------+-------+</span></span></code></pre></div><p><strong>对各个状态量的说明如下：</strong></p><ul><li>Innodb_row_lock_current_waits：当前正在等待锁定的数量；</li><li><code>Innodb_row_lock_time：</code>从系统启动到现在锁定总时间长度；（等待总时长）</li><li><code>Innodb_row_lock_time_avg：</code>每次等待所花平均时间；（等待平均时长）</li><li>Innodb_row_lock_time_max：从系统启动到现在等待最常的一次所花的时间；</li><li><code>Innodb_row_lock_waits：</code>系统启动后到现在总共等待的次数；（等待总次数）</li></ul><p>对于这 5 个状态变量，比较重要的 3 个见上面（橙色）。</p><p>尤其是当等待次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手指定优化计划。</p><p><strong>其他监控方法：</strong></p><p>MySQL把事务和锁的信息记录在了<code>information_schema</code>库中，涉及到的三张表分别是<code>INNODB_TRX</code>、<code>INNODB_LOCKS</code>和<code>INNODB_LOCK_WAITS</code>。</p><p><code>MySQL5.7</code>及之前，可以通过information_schema.INNODB_LOCKS查看事务的锁情况，但只能看到阻塞事务的锁；如果事务并未被阻塞，则在该表中看不到该事务的锁情况。</p><p>MySQL8.0删除了information_schema.INNODB_LOCKS，添加了<code>performance_schema.data_locks</code>，可以通过performance_schema.data_locks查看事务的锁情况，和MySQL5.7及之前不同，<code>performance_schema.data_locks</code>不但可以看到阻塞该事务的锁，还可以看到该事务所持有的锁。</p><p>同时，information_schema.INNODB_LOCK_WAITS也被<code>performance_schema.data_lock_waits</code>所代替。</p><p>我们模拟一个锁等待的场景，以下是从这三张表收集的信息</p><p>锁等待场景，我们依然使用记录锁中的案例，当事务 2 进行等待时，查询情况如下：</p><p><strong>（ 1 ）查询正在被锁阻塞的sql语句。</strong></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FROM</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> information_schema</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">INNODB_TRX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">\\G;</span></span></code></pre></div><p>重要属性代表含义已在上述中标注。</p><p><strong>（ 2 ）查询锁等待情况</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM data_lock_waits\\G;</span></span>
<span class="line"><span>*************************** 1. row ***************************</span></span>
<span class="line"><span>ENGINE: INNODB</span></span>
<span class="line"><span>REQUESTING_ENGINE_LOCK_ID: 139750145405624 :7:4:7:</span></span>
<span class="line"><span>REQUESTING_ENGINE_TRANSACTION_ID: 13845 #被阻塞的事务ID</span></span>
<span class="line"><span>REQUESTING_THREAD_ID: 72</span></span>
<span class="line"><span>REQUESTING_EVENT_ID: 26</span></span>
<span class="line"><span>REQUESTING_OBJECT_INSTANCE_BEGIN: 139747028690608</span></span>
<span class="line"><span>BLOCKING_ENGINE_LOCK_ID: 139750145406432 :7:4:7:</span></span>
<span class="line"><span>BLOCKING_ENGINE_TRANSACTION_ID: 13844 #正在执行的事务ID，阻塞了 13845</span></span>
<span class="line"><span>BLOCKING_THREAD_ID: 71</span></span>
<span class="line"><span>BLOCKING_EVENT_ID: 24</span></span>
<span class="line"><span>BLOCKING_OBJECT_INSTANCE_BEGIN: 139747028813248</span></span>
<span class="line"><span>1 row in set (0.00 sec)</span></span></code></pre></div><p><strong>（ 3 ）查询锁的情况</strong></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> performance_schema</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">data_locks</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">\\G;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">***************************</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">. </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">row</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ***************************</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ENGINE: INNODB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ENGINE_LOCK_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">139750145405624</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1068</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ENGINE_TRANSACTION_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">13847</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">THREAD_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">72</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">EVENT_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">31</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">OBJECT_SCHEMA: atguigu</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">OBJECT_NAME: user</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">PARTITION_NAME: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">SUBPARTITION_NAME: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">INDEX_NAME: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">OBJECT_INSTANCE_BEGIN: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">139747028693520</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK_TYPE: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">TABLE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK_MODE: IX</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK_STATUS: GRANTED</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK_DATA: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">***************************</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">. </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">row</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ***************************</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ENGINE: INNODB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ENGINE_LOCK_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">139750145405624</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ENGINE_TRANSACTION_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">13847</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">THREAD_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">72</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">EVENT_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">31</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">OBJECT_SCHEMA: atguigu</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">OBJECT_NAME: user</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">PARTITION_NAME: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">SUBPARTITION_NAME: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">INDEX_NAME: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">PRIMARY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">OBJECT_INSTANCE_BEGIN: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">139747028690608</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK_TYPE: RECORD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK_MODE: X,REC_NOT_GAP</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK_STATUS: WAITING</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK_DATA: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">***************************</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">. </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">row</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ***************************</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ENGINE: INNODB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ENGINE_LOCK_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">139750145406432</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1068</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ENGINE_TRANSACTION_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">13846</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">THREAD_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">71</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">EVENT_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">28</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">OBJECT_SCHEMA: atguigu</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">OBJECT_NAME: user</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">PARTITION_NAME: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">SUBPARTITION_NAME: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">INDEX_NAME: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">OBJECT_INSTANCE_BEGIN: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">139747028816304</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK_TYPE: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">TABLE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK_MODE: IX</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK_STATUS: GRANTED</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK_DATA: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">***************************</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">. </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">row</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ***************************</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ENGINE: INNODB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ENGINE_LOCK_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">139750145406432</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ENGINE_TRANSACTION_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">13846</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">THREAD_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">71</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">EVENT_ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">28</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">OBJECT_SCHEMA: atguigu</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">OBJECT_NAME: user</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">PARTITION_NAME: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">SUBPARTITION_NAME: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">INDEX_NAME: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">PRIMARY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">OBJECT_INSTANCE_BEGIN: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">139747028813248</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK_TYPE: RECORD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK_MODE: X,REC_NOT_GAP</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK_STATUS: GRANTED</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LOCK_DATA: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> rows</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sec)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ERROR:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">No</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> query specified</span></span></code></pre></div><p>从锁的情况可以看出来，两个事务分别获取了IX锁，我们从意向锁章节可以知道，IX锁互相时兼容的。所以这里不会等待，但是事务 1 同样持有X锁，此时事务 2 也要去同一行记录获取X锁，他们之间不兼容，导致等待的情况发生。</p><h2 id="_6-附录" tabindex="-1">6. 附录 <a class="header-anchor" href="#_6-附录" aria-label="Permalink to “6. 附录”">​</a></h2><p><strong>间隙锁加锁规则（共 11 个案例）</strong></p><p>间隙锁是在可重复读隔离级别下才会生效的： next-key lock 实际上是由间隙锁加行锁实现的，如果切换到读提交隔离级别 (read-committed) 的话，就好理解了，过程中去掉间隙锁的部分，也就是只剩下行锁的部分。而在读提交隔离级别下间隙锁就没有了，为了解决可能出现的数据和日志不一致问题，需要把binlog 格式设置为 row 。也就是说，许多公司的配置为：读提交隔离级别加 binlog_format=row。业务不需要可重复读的保证，这样考虑到读提交下操作数据的锁范围更小（没有间隙锁），这个选择是合理的。</p><p>next-key lock的加锁规则</p><p>总结的加锁规则里面，包含了两个 “原则”、两个 “优化 ” 和一个 “bug” 。</p><ol><li>原则 1 ：加锁的基本单位是 next-key lock 。 next-key lock 是前开后闭区间。</li><li>原则 2 ：查找过程中访问到的对象才会加锁。任何辅助索引上的锁，或者非索引列上的锁，最终都要回溯到主键上，在主键上也要加一把锁。</li><li>优化 1 ：索引上的等值查询，给唯一索引加锁的时候， next-key lock 退化为行锁。也就是说如果InnoDB扫描的是一个主键、或是一个唯一索引的话，那InnoDB只会采用行锁方式来加锁</li><li>优化 2 ：索引上（不一定是唯一索引）的等值查询，向右遍历时且最后一个值不满足等值条件的时候， next-keylock 退化为间隙锁。</li><li>一个 bug ：唯一索引上的范围查询会访问到不满足条件的第一个值为止。</li></ol><p>我们以表test作为例子，建表语句和初始化语句如下：其中id为主键索引</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">\` (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`col1\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`col2\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`id\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  KEY</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`c\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`c\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">InnoDB;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><h3 id="案例一-唯一索引等值查询间隙锁" tabindex="-1">案例一：唯一索引等值查询间隙锁 <a class="header-anchor" href="#案例一-唯一索引等值查询间隙锁" aria-label="Permalink to “案例一：唯一索引等值查询间隙锁”">​</a></h3><table tabindex="0"><thead><tr><th>SessionA</th><th>SessionB</th><th>SessionC</th></tr></thead><tbody><tr><td>begin;<br>update test set col2 = col2+1 where id = 7;</td><td></td><td></td></tr><tr><td></td><td>insert into test values(8,8,8)<br>(blocked)</td><td></td></tr><tr><td></td><td></td><td>update test set col2 = col2+1 where id = 10;<br>(Query OK)</td></tr></tbody></table><p>由于表 test 中没有 id=7 的记录</p><p>根据原则 1 ，加锁单位是 next-key lock ， session A 加锁范围就是 (5,10] ； 同时根据优化 2 ，这是一个等值查询 (id=7) ，而 id=10 不满足查询条件， next-key lock 退化成间隙锁，因此最终加锁的范围是 (5,10)</p><h3 id="案例二-非唯一索引等值查询锁" tabindex="-1">案例二：非唯一索引等值查询锁 <a class="header-anchor" href="#案例二-非唯一索引等值查询锁" aria-label="Permalink to “案例二：非唯一索引等值查询锁”">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>sessionA</strong></th><th style="text-align:left;"><strong>sessionB</strong></th><th style="text-align:left;"><strong>sessionC</strong></th></tr></thead><tbody><tr><td style="text-align:left;">begin; select id from test where col1 = 5 lock in share mode;</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">update test col2 = col2+1 where id=5; <br>(Query OK)</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">insert into test values(7,7,7) <br>(blocked)</td></tr></tbody></table><p>这里 session A 要给索引 col1 上 col1=5 的这一行加上读锁。</p><ol><li>根据原则 1 ，加锁单位是 next-key lock ，左开右闭， 5 是闭上的，因此会给 (0,5] 加上 next-key lock。</li><li>要注意 c 是普通索引，因此仅访问 c=5 这一条记录是不能马上停下来的（可能有col1=5的其他记录），需要向右遍历，查到c=10 才放弃。根据原则 2 ，访问到的都要加锁，因此要给 (5,10] 加next-key lock 。</li><li>但是同时这个符合优化 2 ：等值判断，向右遍历，最后一个值不满足 col1=5 这个等值条件，因此退化成间隙锁 (5,10) 。</li><li>根据原则 2 ， 只有访问到的对象才会加锁，这个查询使用覆盖索引，并不需要访问主键索引，所以主键索引上没有加任何锁，这就是为什么 session B 的 update 语句可以执行完成。</li></ol><p>但 session C 要插入一个 (7,7,7) 的记录，就会被 session A 的间隙锁 (5,10) 锁住 这个例子说明，锁是加在索引上的。</p><p>执行 for update 时，系统会认为你接下来要更新数据，因此会顺便给主键索引上满足条件的行加上行锁。</p><p>如果你要用 lock in share mode来给行加读锁避免数据被更新的话，就必须得绕过覆盖索引的优化，因为覆盖索引不会访问主键索引，不会给主键索引上加锁</p><h3 id="案例三-主键索引范围查询锁" tabindex="-1">案例三：主键索引范围查询锁 <a class="header-anchor" href="#案例三-主键索引范围查询锁" aria-label="Permalink to “案例三：主键索引范围查询锁”">​</a></h3><p>上面两个例子是等值查询的，这个例子是关于范围查询的，也就是说下面的语句</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> update</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tets </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 11</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>这两条查语句肯定是等价的，但是它们的加锁规则不太一样</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>sessionA</strong></th><th style="text-align:left;"><strong>sessionB</strong></th><th style="text-align:left;"><strong>sessionC</strong></th></tr></thead><tbody><tr><td style="text-align:left;">begin; <br></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">select * from test where id&gt;= 10 and id&lt;11 for update;</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">insert into test values(8,8,8) (Query OK) insert into test values(13,13,13); (blocked)</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">update test set clo2=col2+1 where id=15; (blocked)</td></tr></tbody></table><ol><li>开始执行的时候，要找到第一个 id=10 的行，因此本该是 next-key lock(5,10] 。 根据优化 1 ，主键id 上的等值条件，退化成行锁，只加了 id=10 这一行的行锁。</li><li>它是范围查询， 范围查找就往后继续找，找到 id=15 这一行停下来，不满足条件，因此需要加next-key lock(10,15] 。</li></ol><p>session A 这时候锁的范围就是主键索引上，行锁 id=10 和 next-key lock(10,15] 。 <strong>首次 session A 定位查找id=10 的行的时候，是当做等值查询来判断的，而向右扫描到 id=15 的时候，用的是范围查询判断。</strong></p><h3 id="案例四-非唯一索引范围查询锁" tabindex="-1">案例四：非唯一索引范围查询锁 <a class="header-anchor" href="#案例四-非唯一索引范围查询锁" aria-label="Permalink to “案例四：非唯一索引范围查询锁”">​</a></h3><p>与案例三不同的是，案例四中查询语句的 where 部分用的是字段 c ，它是普通索引</p><p>这两条查语句肯定是等价的，但是它们的加锁规则不太一样</p><table tabindex="0"><thead><tr><th style="text-align:left;">sessionA</th><th style="text-align:left;">sessionB</th><th style="text-align:left;">sessionC</th></tr></thead><tbody><tr><td style="text-align:left;">begin; select * from test where col1&gt;= 10 and col1&lt;11 for update;</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">insert into test values(8,8,8)(blocked)</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">update test set clo2=col2+1 where id=15; (blocked)</td></tr></tbody></table><p>在第一次用 col1=10 定位记录的时候，索引 c 上加了 (5,10] 这个 next-key lock 后，由于索引 col1 是非唯一索引，没有优化规则，也就是 说不会蜕变为行锁，因此最终 sesion A 加的锁是，索引 c 上的 (5,10] 和(10,15] 这两个 next-keylock 。</p><p>这里需要扫描到 col1=15 才停止扫描，是合理的，因为 InnoDB 要扫到 col1=15 ，才知道不需要继续往后找了。</p><h3 id="案例五-唯一索引范围查询锁-bug" tabindex="-1">案例五：唯一索引范围查询锁 bug <a class="header-anchor" href="#案例五-唯一索引范围查询锁-bug" aria-label="Permalink to “案例五：唯一索引范围查询锁 bug”">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>sessionA</strong></th><th style="text-align:left;"><strong>sessionB</strong></th><th style="text-align:left;"><strong>sessionC</strong></th></tr></thead><tbody><tr><td style="text-align:left;">begin; select * from test where id&gt; 10 and id&lt;=15 for update;</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">update test set clo2=col2+1 where id=20; (blocked)</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">insert into test values(16,16,16); (blocked)</td></tr></tbody></table><p>session A 是一个范围查询，按照原则 1 的话，应该是索引 id 上只加 (10,15] 这个 next-key lock ，并且因为 id 是唯一键，所以循环判断到 id=15 这一行就应该停止了。</p><p>但是实现上， InnoDB 会往前扫描到第一个不满足条件的行为止，也就是 id=20 。而且由于这是个范围扫描，因此索引 id 上的 (15,20] 这个 next-key lock 也会被锁上。照理说，这里锁住 id=20 这一行的行为，其实是没有必要的。因为扫描到 id=15 ，就可以确定不用往后再找了。</p><h3 id="案例六-非唯一索引上存在-等值-的例子" tabindex="-1">案例六：非唯一索引上存在 &quot;等值&quot; 的例子 <a class="header-anchor" href="#案例六-非唯一索引上存在-等值-的例子" aria-label="Permalink to “案例六：非唯一索引上存在 &quot;等值&quot; 的例子”">​</a></h3><p>这里，我给表 t 插入一条新记录：insert into t values(30,10,30);也就是说，现在表里面有两个c=10的行</p><p><strong>但是它们的主键值 id 是不同的（分别是 10 和 30 ），因此这两个c=10 的记录之间，也是有间隙的。</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>sessionA</strong></th><th style="text-align:left;"><strong>sessionB</strong></th><th style="text-align:left;"><strong>sessionC</strong></th></tr></thead><tbody><tr><td style="text-align:left;">begin; delete from test where col1=10;</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">insert into test values(12,12,12); (blocked)</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">update test set col2=col2+1where c=15; (blocked)</td></tr></tbody></table><p>这次我们用 delete 语句来验证。注意， delete 语句加锁的逻辑，其实跟 select ... for update 是类似的，也就是我在文章开始总结的两个 “ 原则 ” 、两个 “ 优化 ” 和一个 “bug” 。</p><p>这时， session A 在遍历的时候，先访问第一个 col1=10 的记录。同样地，根据原则 1 ，这里加的是(col1=5,id=5) 到 (col1=10,id=10) 这个 next-key lock 。</p><p>由于c是普通索引，所以继续向右查找，直到碰到 (col1=15,id=15) 这一行循环才结束。根据优化 2 ，这是一个等值查询，向右查找到了不满足条件的行，所以会退化成 (col1=10,id=10) 到 (col1=15,id=15) 的间隙锁。</p><p><img src="`+I+'" alt="image-20220328194408224.png"></p><p>这个 delete 语句在索引 c 上的加锁范围，就是上面图中蓝色区域覆盖的部分。这个蓝色区域左右两边都是虚线，表示开区间，即 (col1=5,id=5) 和 (col1=15,id=15) 这两行上都没有锁</p><h3 id="案例七-limit-语句加锁" tabindex="-1">案例七： limit 语句加锁 <a class="header-anchor" href="#案例七-limit-语句加锁" aria-label="Permalink to “案例七： limit 语句加锁”">​</a></h3><p>例子 6 也有一个对照案例，场景如下所示：</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>sessionA</strong></th><th style="text-align:left;"><strong>sessionB</strong></th></tr></thead><tbody><tr><td style="text-align:left;">begin; delete from test where col1=10 limit 2;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">insert into test values(12,12,12); (Query OK)</td></tr></tbody></table><p>session A 的 delete 语句加了 limit 2 。你知道表 t 里 c=10 的记录其实只有两条，因此加不加 limit 2 ，删除的效果都是一样的。但是加锁效果却不一样</p><p>这是因为，案例七里的 delete 语句明确加了 limit 2 的限制，因此在遍历到 (col1=10, id=30) 这一行之后，满足条件的语句已经有两条，循环就结束了。因此，索引 col1 上的加锁范围就变成了从（ col1=5,id=5)到（ col1=10,id=30) 这个前开后闭区间，如下图所示：</p><p><img src="'+L+`" alt="image-20220328194408224.png"></p><p>这个例子对我们实践的指导意义就是， 在删除数据的时候尽量加 limit 。</p><p>这样不仅可以 <strong>控制删除数据的条数，让操作更安全，还可以减小加锁的范围。</strong></p><h3 id="案例八-一个死锁的例子" tabindex="-1">案例八：一个死锁的例子 <a class="header-anchor" href="#案例八-一个死锁的例子" aria-label="Permalink to “案例八：一个死锁的例子”">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>sessionA</strong></th><th style="text-align:left;"><strong>sessionB</strong></th></tr></thead><tbody><tr><td style="text-align:left;">begin; select id from test where col1=10 lock in share mode;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">update test set col2=col2+1 where c=10; (blocked)</td></tr><tr><td style="text-align:left;">insert into test values(8,8,8);</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">ERROR 1213(40001):Deadlock found when trying to getlock;try restarting transaction</td></tr></tbody></table><ol><li>session A 启动事务后执行查询语句加 lock in share mode ，在索引 col1 上加了 next-keylock(5,10] 和间隙锁 (10,15) （索引向右遍历退化为间隙锁）；</li><li>session B 的 update 语句也要在索引 c 上加 next-key lock(5,10] ，进入锁等待； 实际上分成了两步，先是加 (5,10) 的间隙锁，加锁成功；然后加 col1=10 的行锁，因为sessionA上已经给这行加上了读锁，此时申请死锁时会被阻塞</li><li>然后 session A 要再插入 (8,8,8) 这一行，被 session B 的间隙锁锁住。由于出现了死锁， InnoDB 让session B 回滚</li></ol><h3 id="案例九-order-by索引排序的间隙锁-1" tabindex="-1">案例九：order by索引排序的间隙锁 1 <a class="header-anchor" href="#案例九-order-by索引排序的间隙锁-1" aria-label="Permalink to “案例九：order by索引排序的间隙锁 1”">​</a></h3><p>如下面一条语句</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">9</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">12</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> order by</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">desc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>下图为这个表的索引id的示意图。</p><p><img src="https://www.pnglog.com/3Yk7Im.png" alt="image-20220328194721419.png"></p><ol><li>首先这个查询语句的语义是 order by id desc ，要拿到满足条件的所有行，优化器必须先找到 “ 第一个 id&lt;12 的值 ” 。</li><li>这个过程是通过索引树的搜索过程得到的，在引擎内部，其实是要找到 id=12 的这个值，只是最终没找到，但找到了 (10,15) 这个间隙。（ id=15 不满足条件，所以 next-key lock 退化为了间隙锁 (10,15) 。）</li><li>然后向左遍历，在遍历过程中，就不是等值查询了，会扫描到 id=5 这一行，又因为区间是左开右闭的，所以会加一个next-key lock (0,5] 。 也就是说，在执行过程中，通过树搜索的方式定位记录的时候，用的是 “ 等值查询 ” 的方法。</li></ol><h3 id="案例十-order-by索引排序的间隙锁-2" tabindex="-1">案例十：order by索引排序的间隙锁 2 <a class="header-anchor" href="#案例十-order-by索引排序的间隙锁-2" aria-label="Permalink to “案例十：order by索引排序的间隙锁 2”">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>sessionA</strong></th><th style="text-align:left;"><strong>sessionB</strong></th></tr></thead><tbody><tr><td style="text-align:left;">begin; select * from test where col1&gt;=15 and c&lt;=20 order by col1 desc lock in share mode;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">insert into test values(6,6,6); (blocked)</td></tr></tbody></table><ol><li>由于是 order by col1 desc ，第一个要定位的是索引 col1 上 “ 最右边的 ”col1=20 的行。这是一个非唯一索引的等值查询：</li></ol><p>左开右闭区间，首先加上 next-key lock (15,20] 。 向右遍历，col1=25不满足条件，退化为间隙锁 所以会加上间隙锁(20,25) 和 next-key lock (15,20] 。</p><ol start="2"><li>在索引 col1 上向左遍历，要扫描到 col1=10 才停下来。同时又因为左开右闭区间，所以 next-keylock 会加到 (5,10] ，这正是阻塞session B 的 insert 语句的原因。</li><li>在扫描过程中， col1=20 、 col1=15 、 col1=10 这三行都存在值，由于是 select * ，所以会在主键id 上加三个行锁。 因此， session A 的 select 语句锁的范围就是：</li><li>索引 col1 上 (5, 25) ；</li><li>主键索引上 id=15 、 20 两个行锁。</li></ol><h3 id="案例十一-update修改数据的例子-先插入后删除" tabindex="-1">案例十一：update修改数据的例子-先插入后删除 <a class="header-anchor" href="#案例十一-update修改数据的例子-先插入后删除" aria-label="Permalink to “案例十一：update修改数据的例子-先插入后删除”">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>sessionA</strong></th><th style="text-align:left;"><strong>sessionB</strong></th></tr></thead><tbody><tr><td style="text-align:left;">begin; select col1 from test where col1&gt;5 lock in share mode;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">update test set col1=1 where col1=5 (Query OK) update test set col1=5 where col1=1; (blocked)</td></tr></tbody></table><p>注意：根据 col1&gt;5 查到的第一个记录是 col1=10 ，因此不会加 (0,5] 这个 next-key lock 。</p><p>session A 的加锁范围是索引 col1 上的 (5,10] 、 (10,15] 、 (15,20] 、 (20,25] 和(25,supremum] 。</p><p>之后 session B 的第一个 update 语句，要把 col1=5 改成 col1=1 ，你可以理解为两步：</p><ol><li>插入 (col1=1, id=5) 这个记录；</li><li>删除 (col1=5, id=5) 这个记录。</li></ol><p>通过这个操作， session A 的加锁范围变成了图 7 所示的样子：</p><p><img src="`+S+'" alt="image-20220328194922739.png"></p><p>好，接下来 session B 要执行 update t set col1 = 5 where col1 = 1 这个语句了，一样地可以拆成两步：</p><ol><li>插入 (col1=5, id=5) 这个记录；</li><li>删除 (col1=1, id=5) 这个记录。 第一步试图在已经加了间隙锁的 (1,10) 中插入数据，所以就被堵住了。</li></ol>',434);function q(s,w,M,P,U,K){const l=e,h=k("ClientOnly");return t(),d("div",null,[O,r(h,null,{default:A(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),o(l,{key:0,article:s.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),R])}const V=p(v,[["render",q]]);export{Q as __pageData,V as default};
