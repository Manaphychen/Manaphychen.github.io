import{_ as k}from"./chunks/ArticleMetadata.H12JcJLK.js";import{_ as t,E as e,c as d,o as n,j as h,I as r,aj as A,w as g,b as y,e as D,a as c}from"./chunks/framework._AF764y6.js";const o="/assets/uc3dUC.B6YSxG1R.png",C="/assets/JJgg5G.OuGGwbQA.png",E="/assets/rzRSO8.DAM-icdQ.png",F="/assets/kxsfA6.CMR8Y0vP.png",B="/assets/aEet2P.B94DaAQS.png",_="/assets/9dJWyq.2PfZNzMS.png",m="/assets/DQ6x1M.BLqtay8I.png",u="/assets/FusqnW.BMwVhhkP.png",b="/assets/yh2AS7.__is5xsV.png",T="/assets/sQZAgV.BMVlSVV4.png",I="/assets/WVpAQK.C66dXFpP.png",N="/assets/makJTp.D9S4177G.png",L="/assets/V0h1ll.DPHqM2vN.png",R="/assets/I2ljGH.K9WuPe-8.png",x="/assets/ees0xa.Co7sedAS.png",M="/assets/Y6WvhT.DC-ABPJM.png",S="/assets/cw3IZJ.BW1znECn.png",G=JSON.parse('{"title":"索引","description":"","frontmatter":{"title":"索引","date":"2023-11-02T09:50:46.000Z","permalink":"/mysql/index/","categories":["数据库","MySQL"],"tags":["MySQL"],"author":"Manaphy"},"headers":[],"relativePath":"database/MySQL/119.索引.md","filePath":"database/MySQL/119.索引.md","lastUpdated":1744301414000}'),f={name:"database/MySQL/119.索引.md"},v=h("h1",{id:"索引",tabindex:"-1"},[c("索引 "),h("a",{class:"header-anchor",href:"#索引","aria-label":"Permalink to “索引”"},"​")],-1),U=A(`<h2 id="_1-索引的声明与使用" tabindex="-1">1. 索引的声明与使用 <a class="header-anchor" href="#_1-索引的声明与使用" aria-label="Permalink to “1. 索引的声明与使用”">​</a></h2><h3 id="_1-1-索引的分类" tabindex="-1">1.1 索引的分类 <a class="header-anchor" href="#_1-1-索引的分类" aria-label="Permalink to “1.1 索引的分类”">​</a></h3><p>MySQL的索引包括<code>普通索引</code>、<code>唯一性索引</code>、<code>主键索引</code>、<code>全文索引</code>、<code>单列索引</code>、<code>多列索引</code>和<code>空间索引</code>等。</p><ul><li>从 功能逻辑 上说，索引主要有 4 种，分别是<code>普通索引</code>、<code>唯一索引</code>、<code>主键索引</code>、<code>全文索引</code>。</li><li>按照 物理实现方式 ，索引可以分为 2 种：<code>聚簇索引</code>和<code>非聚簇索引</code>。</li><li>按照 作用字段个数 进行划分，分成<code>单列索引</code>和<code>联合索引</code>。</li></ul><p><strong>不同的存储引擎支持的索引类型也不一样</strong></p><p><strong>InnoDB：</strong> 支持 B-tree、Full-text 等索引，不支持 Hash 索引；</p><p><strong>MyISAM：</strong> 支持 B-tree、Full-text 等索引，不支持 Hash 索引；</p><p><strong>Memory：</strong> 支持 B-tree、Hash 等索引，不支持 Full-text 索引；</p><p><strong>NDB：</strong> 支持 Hash 索引，不支持 B-tree、Full-text 等索引；</p><p><strong>Archive：</strong> 不支持 B-tree、Hash、Full-text 等索引；</p><h3 id="_1-2-创建索引" tabindex="-1"><strong>1.2 创建索引</strong> <a class="header-anchor" href="#_1-2-创建索引" aria-label="Permalink to “1.2 创建索引”">​</a></h3><h4 id="_1-创建表的时候创建索引" tabindex="-1">1. 创建表的时候创建索引 <a class="header-anchor" href="#_1-创建表的时候创建索引" aria-label="Permalink to “1. 创建表的时候创建索引”">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> dept</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dept_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dept_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> emp</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">emp_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">emp_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">UNIQUE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dept_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CONSTRAINT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> emp_dept_id_fk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FOREIGN KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dept_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">REFERENCES</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dept(dept_id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>但是，如果显式创建表时创建索引的话，基本语法格式如下：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> table_name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [col_name data_type]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[UNIQUE | FULLTEXT | SPATIAL] [INDEX | KEY] [index_name] (col_name [length]) [ASC | DESC]</span></span></code></pre></div><ul><li><code>UNIQUE</code>、<code>FULLTEXT</code>和<code>SPATIAL</code>为可选参数，分别表示唯一索引、全文索引和空间索引；</li><li><code>INDEX</code>与<code>KEY </code>为同义词，两者的作用相同，用来指定创建索引；</li><li><code>index_name</code>指定索引的名称，为可选参数，如果不指定，那么MySQL默认col_name为索引名；</li><li><code>col_name</code>为需要创建索引的字段列，该列必须从数据表中定义的多个列中选择；</li><li><code>length</code>为可选参数，表示索引的长度，只有字符串类型的字段才能指定索引长度；</li><li><code>ASC</code> 或<code>DESC</code>指定升序或者降序的索引值存储。</li></ul><p><strong>相关语法</strong></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 1.普通索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> book</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  book_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  book_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  authors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  comment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  year_publication </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">YEAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(year_publication)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 2. 唯一索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  UNIQUE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> uk_idx_id(id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 3. 主键索引</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">设定为主键后数据库会自动建立索引，innodb为聚簇索引</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">注意：修改主键索引：必须先删除掉(drop)原索引，再新建(add)索引</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 4.单列索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> CHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> single_idx_name(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 5.组合索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> CHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> multi_idx(id,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,age)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 6.全文索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> CHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  FULLTEXT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> futxt_idx_info(info)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">MyISAM;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">在MySQL5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7及之后版本中可以不指定最后的ENGINE了</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">，因为在此版本中InnoDB支持全文索引。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> articles</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> UNSIGNED AUTO_INCREMENT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">TEXT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  FULLTEXT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (title, body)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ENGINE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> INNODB ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">papers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">\` (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) unsigned </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`title\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`content\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> text</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`id\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  FULLTEXT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> KEY</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`title\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`title\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`content\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">MyISAM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">utf8;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#不同于like方式的的查询：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> papers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;%查询字符串%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#全文索引用match</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">against方式查询：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> papers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> MATCH</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(title,content) AGAINST (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;查询字符串&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">注意点</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">使用全文索引前，搞清楚版本支持情况；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">全文索引比 like + % 快 N 倍，但是可能存在精度问题；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">如果需要全文索引的是大量数据，建议先添加数据，再创建索引。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 空间索引(要求空间类型的字段必须为非空)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  geo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">GEOMETRY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  SPATIAL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> spa_idx_geo(geo)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">MyISAM;</span></span></code></pre></div><h4 id="_2-在已经存在的表上创建索引" tabindex="-1">2. 在已经存在的表上创建索引 <a class="header-anchor" href="#_2-在已经存在的表上创建索引" aria-label="Permalink to “2. 在已经存在的表上创建索引”">​</a></h4><p>在已经存在的表中创建索引可以使用ALTER TABLE语句或者CREATE INDEX语句。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> table_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ADD</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [UNIQUE | FULLTEXT | SPATIAL] [INDEX | KEY]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[index_name] (col_name[length],...) [ASC | DESC]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [UNIQUE | FULLTEXT | SPATIAL] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> index_name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> table_name (col_name[length],...) [ASC | DESC]</span></span></code></pre></div><h3 id="_1-3-删除索引" tabindex="-1">1.3 删除索引 <a class="header-anchor" href="#_1-3-删除索引" aria-label="Permalink to “1.3 删除索引”">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--  使用ALTER TABLE删除索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> table_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DROP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> index_name;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 使用DROP INDEX语句删除索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DROP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> index_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> table_name;</span></span></code></pre></div><blockquote><p>提示 删除表中的列时，如果要删除的列为索引的组成部分，则该列也会从索引中删除。如果组成索引的所有列都被删除，则整个索引将被删除。</p></blockquote><h2 id="_2-mysql8-0索引新特性" tabindex="-1">2. MySQL8.0索引新特性 <a class="header-anchor" href="#_2-mysql8-0索引新特性" aria-label="Permalink to “2. MySQL8.0索引新特性”">​</a></h2><h3 id="_2-1-支持降序索引" tabindex="-1">2.1 支持降序索引 <a class="header-anchor" href="#_2-1-支持降序索引" aria-label="Permalink to “2.1 支持降序索引”">​</a></h3><p>举例：分别在MySQL 5.7版本和MySQL 8.0版本中创建数据表ts1</p><p><code>CREATE TABLE ts1(a int,b int,index idx_a_b(a,b desc));</code></p><p>在MySQL 5.7版本中查看数据表ts1的结构，结果如下：</p><p><img src="`+o+'" alt="image.png"></p><p>从结果可以看出，索引仍然是默认的升序。</p><p>在MySQL 8.0版本中查看数据表ts1的结构，结果如下：</p><p><img src="'+C+`" alt="image.png"></p><p>从结果可以看出，索引已经是降序了。下面继续测试降序索引在执行计划中的表现。</p><p>分别在MySQL 5.7版本和MySQL 8.0版本的数据表ts1中插入800条随机数据，执行语句如下：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DELIMITER </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">//</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> PROCEDURE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ts_insert()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    DECLARE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> DEFAULT</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    WHILE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 800</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    DO</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ts1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">80000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">80000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> WHILE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    commit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> //</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DELIMITER ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 调用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CALL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ts_insert();</span></span></code></pre></div><p>分别在 5.7 和 8.0 版本中查看数据表ts1的执行计划</p><p><code>EXPLAIN SELECT * FROM ts1 ORDER BY a,b DESC LIMIT 5;</code></p><p>MySQL 5.7的执行计划中扫描数为799，而且使用了Using filesort。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Using filesort是MySQL中一种速度比较慢的外部排序，能避免是最好的。多数情况下，管理员可以通过优化索引来尽量避免出现Using filesort，从而提高数据库执行速度。</p></div><p>MySQL 8.0中的执行计划中扫描数为5，而且没有使用Using filesort。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>降序索引只对查询中特定的排序顺序有效，如果使用不当，反而查询效率更低。例如，上述查询排序条件改为order by a desc, b desc，MySQL 5.7的执行计划要明显好于MySQL 8.0。</p></div><h3 id="_2-2-隐藏索引" tabindex="-1">2.2 隐藏索引 <a class="header-anchor" href="#_2-2-隐藏索引" aria-label="Permalink to “2.2 隐藏索引”">​</a></h3><p>在MySQL 5.7版本及之前，只能通过显式的方式删除索引。此时，如果发现删除索引后出现错误，又只能通过显式创建索引的方式将删除的索引创建回来。如果数据表中的数据量非常大，或者数据表本身比较大，这种操作就会消耗系统过多的资源，操作成本非常高。</p><p>从MySQL 8.x开始支持<code>隐藏索引（invisible indexes）</code>，只需要将待删除的索引设置为隐藏索引，使查询优化器不再使用这个索引（即使使用force index（强制使用索引），优化器也不会使用该索引），确认将索引设置为隐藏索引后系统不受任何响应，就可以彻底删除索引。<code>这种通过先将索引设置为隐藏索引，再删除索引的方式就是软删除。</code></p><p><strong>相关语法</strong></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 1.创建表时直接创建</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> tablename</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    propname1 type1[CONSTRAINT1],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    propname2 type2[CONSTRAINT2],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ……</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    propnamen typen,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [indexname](propname1 [(length)]) INVISIBLE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 2. 在已经存在的表上创建</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> indexname</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tablename(propname[(length)]) INVISIBLE;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 3. 通过ALTER TABLE语句创建</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tablename</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ADD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> indexname (propname [(length)]) INVISIBLE;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 4. 切换索引可见状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tablename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> index_name INVISIBLE; #切换成隐藏索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tablename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> index_name VISIBLE; #切换成非隐藏索引</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/* </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">如果将index_cname索引切换成可见状态，通过explain查看执行计划，发现优化器选择了index_cname索引。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">注意:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">当索引被隐藏时，它的内容仍然是和正常索引一样实时更新的。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">如果一个索引需要长期被隐藏，那么可以将其删除，因为索引的存在会影响插入、更新和删除的性能。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">通过设置隐藏索引的可见性可以查看索引对调优的帮助。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">*/</span></span></code></pre></div><h4 id="使隐藏索引对查询优化器可见" tabindex="-1">使隐藏索引对查询优化器可见 <a class="header-anchor" href="#使隐藏索引对查询优化器可见" aria-label="Permalink to “使隐藏索引对查询优化器可见”">​</a></h4><p>在MySQL 8.x版本中，为索引提供了一种新的测试方式，可以通过查询优化器的一个开关（use_invisible_indexes）来打开某个设置，使隐藏索引对查询优化器可见。如果 use_invisible_indexes 设置为off(默认)，优化器会忽略隐藏索引。如果设置为on，即使隐藏索引不可见，优化器在生成执行计划时仍会考虑使用隐藏索引。</p><p>（1）在MySQL命令行执行如下命令查看查询优化器的开关设置。</p><p><code>select @@optimizer_switch \\G</code></p><p>在输出的结果信息中找到如下属性配置。</p><p><code>use_invisible_indexes=off</code></p><p>此属性配置值为off，说明隐藏索引默认对查询优化器不可见。</p><p>（2）使隐藏索引对查询优化器可见，需要在MySQL命令行执行如下命令：</p><p><code>set session optimizer_switch=&quot;use_invisible_indexes=on&quot;;</code></p><p>SQL语句执行成功，再次查看查询优化器的开关设置。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> @@optimizer_switch \\G</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">***************************</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">. </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">row</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ***************************</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@@optimizer_switch: </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">index_merge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,index_merge_union</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,index_merge_sort_union</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,index_merge_</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">intersection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,engine_condition_pushdown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,index_condition_pushdown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,mrr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,mrr_co</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">st_based</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,block_nested_loop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,batched_key_access</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=off</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,materialization</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,semijoin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,loosescan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,firstmatch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,duplicateweedout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,subquery_materialization_cost_based</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,use_index_extensions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,condition_fanout_filter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,derived_merge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,use_invisible_ind</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">exes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,skip_scan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,hash_join</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=on</span></span></code></pre></div><p>此时，在输出结果中可以看到如下属性配置。</p><p><code>use_invisible_indexes=on</code></p><p>use_invisible_indexes属性的值为on，说明此时隐藏索引对查询优化器可见。</p><p>（3）使用EXPLAIN查看以字段invisible_column作为查询条件时的索引使用情况。</p><p><code>explain select * from classes where cname = &#39;高一2班&#39;;</code></p><p>查询优化器会使用隐藏索引来查询数据。</p><p>（4）如果需要使隐藏索引对查询优化器不可见，则只需要执行如下命令即可。</p><p><code>set session optimizer_switch=&quot;use_invisible_indexes=off&quot;;</code></p><p>再次查看查询优化器的开关设置</p><p><code>select @@optimizer_switch \\G</code></p><p>此时，use_invisible_indexes属性的值已经被设置为“off”。</p><h2 id="_3-索引的设计原则" tabindex="-1">3. 索引的设计原则 <a class="header-anchor" href="#_3-索引的设计原则" aria-label="Permalink to “3. 索引的设计原则”">​</a></h2><h3 id="_3-1-数据准备" tabindex="-1">3.1 数据准备 <a class="header-anchor" href="#_3-1-数据准备" aria-label="Permalink to “3.1 数据准备”">​</a></h3><p><strong>第1步：创建数据库、创建表</strong></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 第1步：创建数据库、创建表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">student_info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">\` (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`student_id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`name\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`course_id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`class_id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`create_time\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> DATETIME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CURRENT_TIMESTAMP </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CURRENT_TIMESTAMP,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`id\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">INNODB AUTO_INCREMENT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">utf8;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">course</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">\` (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`course_id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`course_name\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`id\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">INNODB AUTO_INCREMENT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">utf8;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 第2步：创建模拟数据必需的存储函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#函数1：创建随机产生字符串函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DELIMITER </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">//</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FUNCTION</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> rand_string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    RETURNS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) #该函数会返回一个字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    DECLARE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> chars_str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    DECLARE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> return_str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    DECLARE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> DEFAULT</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    WHILE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> n DO </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">       SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> return_str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">CONCAT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(return_str,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">SUBSTRING</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(chars_str,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">FLOOR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">RAND</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">52</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">       SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> WHILE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    RETURN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> return_str;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> //</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DELIMITER ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#函数2：创建随机数函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DELIMITER </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">//</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FUNCTION</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> rand_num</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (from_num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ,to_num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">RETURNS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DECLARE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> DEFAULT</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> FLOOR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(from_num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">RAND</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(to_num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> from_num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">))   ;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">RETURN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i;  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> //</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DELIMITER ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 第3步：创建插入模拟数据的存储过程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 存储过程1：创建插入课程表存储过程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DELIMITER </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">//</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> PROCEDURE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  insert_course( max_num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DECLARE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> DEFAULT</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> autocommit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;    #设置手动提交事务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> REPEAT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  #循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;  #赋值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> course (course_id, course_name ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(rand_num(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),rand_string(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> UNTIL i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> max_num  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> REPEAT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;  #提交事务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> //</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DELIMITER ;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 存储过程2：创建插入学生信息表存储过程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DELIMITER </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">//</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> PROCEDURE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  insert_stu( max_num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DECLARE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> DEFAULT</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> autocommit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;    #设置手动提交事务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> REPEAT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  #循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;  #赋值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> student_info (course_id, class_id ,student_id ,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(rand_num(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),rand_num(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),rand_num(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">200000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),rand_string(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> UNTIL i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> max_num  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> REPEAT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;  #提交事务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> //</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DELIMITER ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 第4步：调用存储过程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CALL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> insert_course(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CALL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> insert_stu(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>创建存储函数要在命令行中执行</p><p>创建函数，假如报错：</p><p><code>This function has none of DETERMINISTIC......</code></p><p>由于开启过慢查询日志bin-log, 我们就必须为我们的function指定一个参数。</p><p>主从复制，主机会将写操作记录在bin-log日志中。从机读取bin-log日志，执行语句来同步数据。如果使用函数来操作数据，会导致从机和主键操作时间不一致。所以，默认情况下，mysql不开启创建函数设置。</p><p>解决方案</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 查看mysql是否允许创建函数：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;log_bin_trust_function_creators&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 命令开启：允许创建函数设置：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> global</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> log_bin_trust_function_creators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><h3 id="_3-2-哪些情况适合创建索引" tabindex="-1">3.2 哪些情况适合创建索引 <a class="header-anchor" href="#_3-2-哪些情况适合创建索引" aria-label="Permalink to “3.2 哪些情况适合创建索引”">​</a></h3><p><strong>1. 字段的数值有唯一性的限制</strong></p><blockquote><p>业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。（来源：Alibaba）</p><p>说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的。</p></blockquote><p><strong>2. 频繁作为 WHERE 查询条件的字段</strong></p><blockquote><p>某个字段在SELECT语句的 WHERE 条件中经常被使用到，那么就需要给这个字段创建索引了。尤其是在数据量大的情况下，创建普通索引就可以大幅提升数据查询的效率。</p><p>比如student_info数据表（含100万条数据），假设我们想要查询 student_id=123110 的用户信息。</p></blockquote><p><strong>3. 经常 GROUP BY 和 ORDER BY 的列</strong></p><blockquote><p>索引就是让数据按照某种顺序进行存储或检索，因此当我们使用 GROUP BY 对数据进行分组查询，或者使用 ORDER BY 对数据进行排序的时候，就需要对分组或者排序的字段进行索引。如果待排序的列有多个，那么可以在这些列上建立组合索引。</p></blockquote><p><strong>4. UPDATE、DELETE 的 WHERE 条件列</strong></p><blockquote><p>对数据按照某个条件进行查询后再进行 UPDATE 或 DELETE 的操作，如果对 WHERE 字段创建了索引，就能大幅提升效率。原理是因为我们需要先根据 WHERE 条件列检索出来这条记录，然后再对它进行更新或删除。<strong>如果进行更新的时候，更新的字段是非索引字段，提升的效率会更明显，这是因为非索引字段更新不需要对索引进行维护。</strong></p></blockquote><p><strong>5.DISTINCT 字段需要创建索引</strong></p><p>有时候我们需要对某个字段进行去重，使用 DISTINCT，那么对这个字段创建索引，也会提升查询效率。</p><p>比如，我们想要查询课程表中不同的 student_id 都有哪些，如果我们没有对 student_id 创建索引，执行SQL 语句：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT DISTINCT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(student_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> student_info;</span></span></code></pre></div><p>运行结果（600637 条记录，运行时间 0.683s ）</p><p>如果我们对 student_id 创建索引，再执行 SQL 语句</p><p>运行结果（600637 条记录，运行时间 0.010s ）</p><p>你能看到 SQL 查询效率有了提升，同时显示出来的 student_id 还是按照递增的顺序进行展示的。这是因为索引会对数据按照某种顺序进行排序，所以在去重的时候也会快很多。</p><p><strong>6. 多表 JOIN 连接操作时，创建索引注意事项</strong></p><p>首先，<code>连接表的数量尽量不要超过 3 张</code>，因为每增加一张表就相当于增加了一次嵌套的循环，数量级增长会非常快，严重影响查询的效率。</p><p>其次，<code>对 WHERE 条件创建索引</code>，因为 WHERE 才是对数据条件的过滤。如果在数据量非常大的情况下，没有 WHERE 条件过滤是非常可怕的。</p><p>最后，<code>对用于连接的字段创建索引</code>，并且该字段在多张表中的<code>类型必须一致</code>。比如 course_id 在student_info 表和 course 表中都为 int(11) 类型，而不能一个为 int 另一个为 varchar 类型。</p><p>举个例子，如果我们只对 student_id 创建索引，执行 SQL 语句：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> course_id, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">student_info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">student_id</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, course_name </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> student_info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> course </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> student_info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">course_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> course</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">course_id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;462eed7ac6e791292a79&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>运行结果（1 条数据，运行时间 0.189s ）：</p><p>这里我们对 name 创建索引，再执行上面的 SQL 语句，运行时间为 0.002s 。</p><p><strong>7. 使用列的类型小的创建索引</strong></p><p><strong>8. 使用字符串前缀创建索引</strong></p><p>创建一张商户表，因为地址字段比较长，在地址字段上建立前缀索引</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> shop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">not null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> shop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span></code></pre></div><p>问题是，截取多少呢？截取得多了，达不到节省索引存储空间的目的；截取得少了，重复内容太多，字段的散列度(选择性)会降低。<strong>怎么计算不同的长度的选择性呢？</strong></p><p>先看一下字段在全部数据中的选择度：</p><p><code>select count(distinct address) / count(*) from shop;</code></p><p>通过不同长度去计算，与全表的选择性对比：</p><p><strong>公式：</strong></p><p><code>count(distinct left(列名, 索引长度))/count(*)</code></p><p>例如：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">distinct</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sub10, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 截取前10个字符的选择度</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">distinct</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sub11, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 截取前15个字符的选择度</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">distinct</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sub12, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 截取前20个字符的选择度</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">distinct</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sub13 </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 截取前25个字符的选择度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> shop;</span></span></code></pre></div><p>引申另一个问题：索引列前缀对排序的影响</p><p>::: note 拓展：Alibaba《Java开发手册》</p><p>【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。 说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达90% 以上，可以使用 count(distinct left(列名, 索引长度))/count(*)的区分度来确定。</p><p>:::</p><p><strong>9. 区分度高(散列性高)的列适合作为索引</strong></p><p><strong>10. 使用最频繁的列放到联合索引的左侧</strong></p><p>这样也可以较少的建立一些索引。同时，由于&quot;最左前缀原则&quot;，可以增加联合索引的使用率。</p><p><strong>11. 在多个字段都要创建索引的情况下，联合索引优于单值索引</strong></p><h3 id="_3-3-限制索引的数目" tabindex="-1">3.3 限制索引的数目 <a class="header-anchor" href="#_3-3-限制索引的数目" aria-label="Permalink to “3.3 限制索引的数目”">​</a></h3><h3 id="_3-4-哪些情况不适合创建索引" tabindex="-1">3.4 哪些情况不适合创建索引 <a class="header-anchor" href="#_3-4-哪些情况不适合创建索引" aria-label="Permalink to “3.4 哪些情况不适合创建索引”">​</a></h3><p><strong>1. 在where中使用不到的字段，不要设置索引</strong></p><p><strong>2. 数据量小的表最好不要使用索引</strong></p><p>在数据表中的数据行数比较少的情况下，比如不到 1000 行，是不需要创建索引的。</p><p><strong>3. 有大量重复数据的列上不要建立索引</strong></p><p>当数据重复度大，比如高于 10% 的时候，也不需要对这个字段使用索引。</p><p><strong>4. 避免对经常更新的表创建过多的索引</strong></p><p><strong>5. 不建议用无序的值作为索引</strong></p><p>例如身份证、UUID(在索引比较时需要转为ASCII，并且插入时可能造成页分裂)、MD5、HASH、无序长字符串等。</p><p><strong>6. 删除不再使用或者很少使用的索引</strong></p><p><strong>7. 不要定义冗余或重复的索引</strong></p><p>①冗余索引</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> person_info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> UNSIGNED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    birthday </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    phone_number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    country </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (id),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> idx_name_birthday_phone_number (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), birthday, phone_number),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> idx_name (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>我们知道，通过 <code>idx_name_birthday_phone_number</code> 索引就可以对<code>name</code>列进行快速搜索，再创建一个专门针对<code>name</code>列的索引就算是一个<code>冗余索引</code>，维护这个索引只会增加维护的成本，并不会对搜索有什么好处。</p><p>② 重复索引</p><p>另一种情况，我们可能会对某个列重复建立索引，比方说这样：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> repeat_index_demo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    col1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    col2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    UNIQUE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> uk_idx_c1 (col1),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> idx_c1 (col1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>我们看到，col1 既是主键、又给它定义为一个唯一索引，还给它定义了一个普通索引，可是主键本身就会生成聚簇索引，所以定义的唯一索引和普通索引是重复的，这种情况要避免。</p><h2 id="_4-为什么使用索引" tabindex="-1">4. 为什么使用索引 <a class="header-anchor" href="#_4-为什么使用索引" aria-label="Permalink to “4. 为什么使用索引”">​</a></h2><p><img src="`+E+'" alt="image.png"></p><p>假如给数据使用<code>二叉树</code>这样的数据结构进行存储，如下图所示</p><p><img src="'+F+`" alt="image.png"></p><h2 id="_5-索引及其优缺点" tabindex="-1">5. 索引及其优缺点 <a class="header-anchor" href="#_5-索引及其优缺点" aria-label="Permalink to “5. 索引及其优缺点”">​</a></h2><h3 id="_5-1-索引概述" tabindex="-1">5.1 索引概述 <a class="header-anchor" href="#_5-1-索引概述" aria-label="Permalink to “5.1 索引概述”">​</a></h3><p>MySQL官方对索引的定义为：<strong>索引（Index）是帮助MySQL高效获取数据的数据结构。</strong></p><p><strong>索引的本质:</strong> 索引是数据结构。你可以简单理解为“排好序的快速查找数据结构”，满足特定查找算法。这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现高级查找算法。</p><h3 id="_5-2-优点" tabindex="-1">5.2 优点 <a class="header-anchor" href="#_5-2-优点" aria-label="Permalink to “5.2 优点”">​</a></h3><ol><li>类似大学图书馆建书目索引，提高数据检索的效率，降低数据库的IO成本，这也是创建索引最主要的原因。</li><li>通过创建唯一索引，可以保证数据库表中每一行数据的唯一性。</li><li>在实现数据的参考完整性方面，可以加速表和表之间的连接。换句话说，对于有依赖关系的子表和父表联合查询时，可以提高查询速度。</li><li>在使用分组和排序子句进行数据查询时，可以显著减少查询中分组和排序的时间，降低了CPU的消耗。</li></ol><h3 id="_5-3-缺点" tabindex="-1">5.3 缺点 <a class="header-anchor" href="#_5-3-缺点" aria-label="Permalink to “5.3 缺点”">​</a></h3><p>增加索引也有许多不利的方面，主要表现在如下几个方面：</p><ol><li>创建索引和维护索引要耗费时间，并且随着数据量的增加，所耗费的时间也会增加。</li><li>索引需要占磁盘空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，存储在磁盘上，如果有大量的索引，索引文件就可能比数据文件更快达到最大文件尺寸。</li><li>虽然索引大大提高了查询速度，同时却会降低更新表的速度。当对表中的数据进行增加、删除和修改的时候，索引也要动态地维护，这样就降低了数据的维护速度。</li></ol><p>因此，选择使用索引时，需要综合考虑索引的优点和缺点。</p><h2 id="_6-innodb中索引的推演" tabindex="-1">6. InnoDB中索引的推演 <a class="header-anchor" href="#_6-innodb中索引的推演" aria-label="Permalink to “6. InnoDB中索引的推演”">​</a></h2><h3 id="_6-1-索引之前的查找" tabindex="-1">6.1 索引之前的查找 <a class="header-anchor" href="#_6-1-索引之前的查找" aria-label="Permalink to “6.1 索引之前的查找”">​</a></h3><p>先来看一个精确匹配的例子：</p><p><code>SELECT [列名列表] FROM 表名 WHERE 列名 = xxx;</code></p><h4 id="_1-在一个页中的查找" tabindex="-1">1. 在一个页中的查找 <a class="header-anchor" href="#_1-在一个页中的查找" aria-label="Permalink to “1. 在一个页中的查找”">​</a></h4><h4 id="_2-在很多页中查找" tabindex="-1">2. 在很多页中查找 <a class="header-anchor" href="#_2-在很多页中查找" aria-label="Permalink to “2. 在很多页中查找”">​</a></h4><p>在没有索引的情况下，不论是根据主键列或者其他列的值进行查找，由于我们并不能快速的定位到记录所在的页，所以只能<code>从第一个页</code>沿着<code>双向链表</code>一直往下找，在每一个页中根据我们上面的查找方式去查找指定的记录。因为要遍历所有的数据页，所以这种方式显然是<code>超级耗时</code>的。如果一个表有一亿条记录呢？此时索引应运而生。</p><h3 id="_6-2-设计索引" tabindex="-1">6.2 设计索引 <a class="header-anchor" href="#_6-2-设计索引" aria-label="Permalink to “6.2 设计索引”">​</a></h3><p>建一个表：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> index_demo(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">c1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">c2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">c3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(c1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ROW_FORMAT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Compact;</span></span></code></pre></div><p>这个新建的<code>index_demo</code>表中有2个INT类型的列，1个CHAR(1)类型的列，而且我们规定了c1列为主键，这个表使用<code>Compact</code>行格式来实际存储记录的。这里我们简化了index_demo表的行格式示意图：</p><p><img src="`+B+'" alt="image.png"></p><p>我们只在示意图里展示记录的这几个部分：</p><ul><li><code>record_type</code>：记录头信息的一项属性，表示记录的类型，0表示普通记录、2表示最小记录、3表示最大记录、1暂时还没用过，下面讲。</li><li><code>next_record</code>：记录头信息的一项属性，表示下一条地址相对于本条记录的地址偏移量，我们用箭头来表明下一条记录是谁。</li><li><code>各个列的值</code>：这里只记录在index_demo表中的三个列，分别是c1、c2和c3。</li><li><code>其他信息</code>：除了上述3种信息以外的所有信息，包括其他隐藏列的值以及记录的额外信息。</li></ul><p>将记录格式示意图的其他信息项暂时去掉并把它竖起来的效果就是这样：</p><p><img src="'+_+'" alt="image.png"></p><p>把一些记录放到页里的示意图就是：</p><p><img src="'+m+'" alt="image.png"></p><h4 id="_1-一个简单的索引设计方案" tabindex="-1">1. 一个简单的索引设计方案 <a class="header-anchor" href="#_1-一个简单的索引设计方案" aria-label="Permalink to “1. 一个简单的索引设计方案”">​</a></h4><p>我们在根据某个搜索条件查找一些记录时为什么要遍历所有的数据页呢？因为各个页中的记录并没有规律，我们并不知道我们的搜索条件匹配哪些页中的记录，所以不得不依次遍历所有的数据页。所以如果我们<code>想快速的定位到需要查找的记录在哪些数据页</code>中该咋办？我们可以为快速定位记录所在的数据页而<code>建立一个目录</code>，建这个目录必须完成下边这些事：</p><ul><li><strong>下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值。</strong></li><li><strong>给所有的页建立一个目录项。</strong></li></ul><p>所以我们为上边几个页做好的目录就像这样子：</p><p><img src="'+u+'" alt="image.png"></p><p>以页28为例，它对应目录项2，这个目录项中包含着该页的页号28以及该页中用户记录的最小主键值5。我们只需要把几个目录项在物理存储器上连续存储（比如：数组），就可以实现根据主键值快速查找某条记录的功能了。比如：查找主键值为20的记录，具体查找过程分两步：</p><ol><li>先从目录项中根据二分法快速确定出主键值为20的记录在目录项3中（因为12&lt;20&lt;209），它对应的页是页9。</li><li>再根据前边说的在页中查找记录的方式去页9中定位具体的记录。</li></ol><p>至此，针对数据页做的简易目录就搞定了。这个目录有一个别名，称为索引。</p><h4 id="_2-innodb中的索引方案" tabindex="-1">2. InnoDB中的索引方案 <a class="header-anchor" href="#_2-innodb中的索引方案" aria-label="Permalink to “2. InnoDB中的索引方案”">​</a></h4><h5 id="_1-迭代1次-目录项纪录的页" tabindex="-1">① 迭代1次：目录项纪录的页 <a class="header-anchor" href="#_1-迭代1次-目录项纪录的页" aria-label="Permalink to “① 迭代1次：目录项纪录的页”">​</a></h5><p>我们把前边使用到的目录项放到数据页中的样子就是这样：</p><p><img src="'+b+'" alt="image.png"></p><p>从图中可以看出来，我们新分配了一个编号为30的页来专门存储目录项记录。这里再次强调<code>目录项记录</code>和普通的<code>用户记录</code>的<strong>不同点</strong>：</p><ul><li><code>目录项记录</code>的<code>record_type</code>值是1，而<code>普通用户记录</code>的<code>record_type</code>值是0。</li><li>目录项记录只有<code>主键值和页的编号</code>两个列，而普通的用户记录的列是用户自己定义的，可能包含<code>很多列</code>，另外还有InnoDB自己添加的隐藏列。</li><li>了解：记录头信息里还有一个叫<code>min_rec_mask</code>的属性，只有在存储<code>目录项记录</code>的页中的主键值最小的<code>目录项记录</code>的<code>min_rec_mask</code>值为1，其他别的记录的<code>min_rec_mask</code>值都是0。</li></ul><p><strong>相同点</strong>：两者用的是一样的数据页，都会为主键值生成<code>Page Directory</code>（页目录），从而在按照主键值进行查找时可以使用<code>二分法</code>来加快查询速度。</p><p>现在以查找主键为20的记录为例，根据某个主键值去查找记录的步骤就可以大致拆分成下边两步：</p><ol><li>先到存储<code>目录项记录</code>的页，也就是页30中通过<code>二分法</code>快速定位到对应目录项，因为<code>12&lt;20&lt;209</code>，所以定位到对应的记录所在的页就是页9。</li><li>再到存储用户记录的页9中根据<code>二分法</code>快速定位到主键值为20的用户记录。</li></ol><h5 id="_2-迭代2次-多个目录项纪录的页" tabindex="-1">② 迭代2次：多个目录项纪录的页 <a class="header-anchor" href="#_2-迭代2次-多个目录项纪录的页" aria-label="Permalink to “② 迭代2次：多个目录项纪录的页”">​</a></h5><p><img src="'+T+'" alt="image.png"></p><p>从图中可以看出，我们插入了一条主键值为320的用户记录之后需要两个新的数据页：</p><ul><li>为存储该用户记录而新生成了页31。</li><li>因为原先存储目录项记录的<code>页30的容量已满</code>（我们前边假设只能存储4条目录项记录），所以不得不需要一个新的页32来存放页31对应的目录项。</li></ul><p>现在因为存储目录项记录的页不止一个，所以如果我们想根据主键值查找一条用户记录大致需要3个步骤，以查找主键值为20的记录为例：</p><ol><li>确定<code>目录项记录页</code><ul><li>我们现在的存储目录项记录的页有两个，即页30和页32，又因为页30表示的目录项的主键值的范围是[1,320)，页32表示的目录项的主键值不小于320，所以主键值为20的记录对应的目录项记录在页30中。</li></ul></li><li>通过目录项记录页<code>确定用户记录真实所在的页</code>。</li><li>在真实存储用户记录的页中定位到具体的记录。</li></ol><h5 id="_3-迭代3次-目录项记录页的目录页" tabindex="-1">③ 迭代3次：目录项记录页的目录页 <a class="header-anchor" href="#_3-迭代3次-目录项记录页的目录页" aria-label="Permalink to “③ 迭代3次：目录项记录页的目录页”">​</a></h5><p><img src="'+I+'" alt="image.png"></p><p>如图，我们生成了一个存储更高级目录项的页33，这个页中的两条记录分别代表页30和页32，如果用户记录的主键值在[1,320)之间，则到页30中查找更详细的目录项记录，如果主键值不小于320的话，就到页32中查找更详细的目录项记录。</p><p>我们可以用下边这个图来描述它：</p><p><img src="'+N+'" alt="image.png"></p><p>这个数据结构，它的名称是<code>B+树</code>。</p><h5 id="_4-b-tree" tabindex="-1">④ B+Tree <a class="header-anchor" href="#_4-b-tree" aria-label="Permalink to “④ B+Tree”">​</a></h5><p>一个B+树的节点其实可以分成好多层，规定最下边的那层，也就是存放我们用户记录的那层为第<code>0</code>层，之后依次往上加。之前我们做了一个非常极端的假设：存放用户记录的页<code>最多存放3条记录</code>，存放目录项记录的页<code>最多存放4条记录</code>。其实真实环境中一个页存放的记录数量是非常大的，假设所有存放用户记录的叶子节点代表的数据页可以存放<code>100条用户记录</code>，所有存放目录项记录的内节点代表的数据页可以存放<code>1000条目录项记录</code>，那么：</p><ul><li>如果B+树只有1层，也就是只有1个用于存放用户记录的节点，最多能存放<code>100</code>条记录。</li><li>如果B+树有2层，最多能存放<code>1000×100=10,0000</code>条记录。</li><li>如果B+树有3层，最多能存放<code>1000×1000×100=1,0000,0000</code>条记录。</li><li>如果B+树有4层，最多能存放<code>1000×1000×1000×100=1000,0000,0000</code>条记录。相当多的记录！！！</li></ul><p>你的表里能存放<code>1000,0000,0000</code>条记录吗？所以一般情况下，我们<code>用到的B+树都不会超过4层</code>，那我们通过主键值去查找某条记录最多只需要做4个页面内的查找（查找3个目录项页和一个用户记录页），又因为在每个页面内有所谓的<code>PageDirectory</code>（页目录），所以在页面内也可以通过<code>二分法</code>实现快速定位记录。</p><h3 id="_6-3-常见索引概念" tabindex="-1">6.3 常见索引概念 <a class="header-anchor" href="#_6-3-常见索引概念" aria-label="Permalink to “6.3 常见索引概念”">​</a></h3><p>索引按照物理实现方式，索引可以分为2种：聚簇（聚集）和非聚簇（非聚集）索引。我们也把非聚集索引称为二级索引或者辅助索引。</p><h4 id="_1-聚簇索引" tabindex="-1">1. 聚簇索引 <a class="header-anchor" href="#_1-聚簇索引" aria-label="Permalink to “1. 聚簇索引”">​</a></h4><p><strong>特点：</strong></p><ul><li>使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义： <ul><li><code>页内</code>的记录是按照主键的大小顺序排成一个<code>单向链表</code>。</li><li>各个存放<code>用户记录的页</code>也是根据页中用户记录的主键大小顺序排成一个<code>双向链表</code>。</li><li>存放<code>目录项记录的页</code>分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个<code>双向链表</code>。</li></ul></li><li>B+树的<code>叶子节点</code>存储的是完整的用户记录。 <ul><li>所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。</li></ul></li></ul><p><strong>优点：</strong></p><ul><li><code>数据访问更快</code>，因为聚簇索引将索引和数据保存在同一个B+树中，因此从聚簇索引中获取数据比非聚簇索引更快</li><li>聚簇索引对于主键的<code>排序查找</code>和<code>范围查找</code>速度非常快</li><li>按照聚簇索引排列顺序，查询显示一定范围数据的时候，由于数据都是紧密相连，数据库不用从多个数据块中提取数据，所以<code>节省了大量的io操作</code>。</li></ul><p><strong>缺点：</strong></p><ul><li><code>插入速度严重依赖于插入顺序</code>，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个<strong>自增的ID列为主键</strong></li><li><code>更新主键的代价很高</code>，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义<strong>主键为不可更新</strong></li><li><code>二级索引访问需要两次索引查找</code>，第一次找到主键值，第二次根据主键值找到行数据</li></ul><h4 id="_2-二级索引-辅助索引、非聚簇索引" tabindex="-1">2. 二级索引（辅助索引、非聚簇索引） <a class="header-anchor" href="#_2-二级索引-辅助索引、非聚簇索引" aria-label="Permalink to “2. 二级索引（辅助索引、非聚簇索引）”">​</a></h4><p><img src="'+L+'" alt="image.png"></p><p><strong>概念：回表</strong>我们根据这个以c2列大小排序的B+树只能确定我们要查找记录的主键值，所以如果我们想根据c2列的值查找到完整的用户记录的话，仍然需要到<code>聚簇索引</code>中再查一遍，这个过程称为<code>回表</code>。也就是根据c2列的值查询一条完整的用户记录需要使用到<code>2</code>棵B+树！</p><p><strong>问题</strong>：为什么我们还需要一次<code>回表</code>操作呢？直接把完整的用户记录放到叶子节点不OK吗？</p><p><img src="'+R+'" alt="image.png"></p><h4 id="_3-联合索引" tabindex="-1">3. 联合索引 <a class="header-anchor" href="#_3-联合索引" aria-label="Permalink to “3. 联合索引”">​</a></h4><p>我们也可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，比方说我们想让B+树按照<code>c2和c3列</code>的大小进行排序，这个包含两层含义：</p><ul><li>先把各个记录和页按照c2列进行排序。</li><li>在记录的c2列相同的情况下，采用c3列进行排序</li></ul><p>注意一点，以c2和c3列的大小为排序规则建立的B+树称为<code>联合索引</code>，本质上也是一个二级索引。它的意思与分别为c2和c3列分别建立索引的表述是不同的，不同点如下：</p><ul><li>建立<code>联合索引</code>只会建立如上图一样的1棵B+树。</li><li>为c2和c3列分别建立索引会分别以c2和c3列的大小为排序规则建立2棵B+树。</li></ul><h3 id="_6-4-innodb的b-树索引的注意事项" tabindex="-1">6.4 InnoDB的B+树索引的注意事项 <a class="header-anchor" href="#_6-4-innodb的b-树索引的注意事项" aria-label="Permalink to “6.4 InnoDB的B+树索引的注意事项”">​</a></h3><ol><li>根页面位置万年不动</li><li>内节点中目录项记录的唯一性</li><li>一个页面最少存储2条记录</li></ol><h2 id="_7-myisam中的索引方案" tabindex="-1">7. MyISAM中的索引方案 <a class="header-anchor" href="#_7-myisam中的索引方案" aria-label="Permalink to “7. MyISAM中的索引方案”">​</a></h2><p><strong>B树索引适用存储引擎如表所示：</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>索引/存储引擎</strong></th><th style="text-align:left;"><strong>MyISAM</strong></th><th style="text-align:left;"><strong>InnoDB</strong></th><th style="text-align:left;"><strong>Memory</strong></th></tr></thead><tbody><tr><td style="text-align:left;">B-Tree索引</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td></tr></tbody></table><p>即使多个存储引擎支持同一种类型的索引，但是他们的实现原理也是不同的。Innodb和MyISAM默认的索引是Btree索引；而Memory默认的索引是Hash索引。</p><p>MyISAM引擎使用<code>B+Tree</code>作为索引结构，叶子节点的data域存放的是<code>数据记录的地址</code>。</p><h3 id="_7-1-myisam索引的原理" tabindex="-1">7.1 MyISAM索引的原理 <a class="header-anchor" href="#_7-1-myisam索引的原理" aria-label="Permalink to “7.1 MyISAM索引的原理”">​</a></h3><p>下图是MyISAM索引的原理图。</p><p><img src="'+x+'" alt="image.png"></p><p>如果我们在Col2上建立一个二级索引，则此索引的结构如下图所示：</p><p><img src="'+M+'" alt="image.png"></p><h3 id="_7-2-myisam与innodb对比" tabindex="-1">7.2 MyISAM与InnoDB对比 <a class="header-anchor" href="#_7-2-myisam与innodb对比" aria-label="Permalink to “7.2 MyISAM与InnoDB对比”">​</a></h3><p><strong>MyISAM的索引方式都是“非聚簇”的，与InnoDB包含1个聚簇索引是不同的。小结两种引擎中索引的区别：</strong></p><ol><li>在InnoDB存储引擎中，我们只需要根据主键值对<code>聚簇索引</code>进行一次查找就能找到对应的记录，而在MyISAM中却需要进行一次<code>回表</code>操作，意味着MyISAM中建立的索引相当于全部都是<code>二级索引</code>。</li><li>InnoDB的数据文件本身就是索引文件，而MyISAM索引文件和数据文件是<code>分离的</code>，索引文件仅保存数据记录的地址。</li><li>InnoDB的非聚簇索引data域存储相应记录<code>主键的值</code>，而MyISAM索引记录的是<code>地址</code>。换句话说，InnoDB的所有非聚簇索引都引用主键作为data域。</li><li>MyISAM的回表操作是十分<code>快速</code>的，因为是拿着地址偏移量直接到文件中取数据的，反观InnoDB是通过获取主键之后再去聚簇索引里找记录，虽然说也不慢，但还是比不上直接用地址去访问。</li><li>InnoDB要求表<code>必须有主键</code>（<code>MyISAM</code>可以没有）。如果没有显式指定，则MySQL系统会自动选择一个可以非空且唯一标识数据记录的列作为主键。如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整型。</li></ol><p><img src="'+S+'" alt="image.png"></p><h2 id="_8-索引的代价" tabindex="-1">8. 索引的代价 <a class="header-anchor" href="#_8-索引的代价" aria-label="Permalink to “8. 索引的代价”">​</a></h2><p>索引是个好东西，可不能乱建，它在空间和时间上都会有消耗：</p><p><strong>空间上的代价</strong></p><p>每建立一个索引都要为它建立一棵B+树，每一棵B+树的每一个节点都是一个数据页，一个页默认会 占用 16KB 的存储空间，一棵很大的B+树由许多数据页组成，那就是很大的一片存储空间。</p><p><strong>时间上的代价</strong></p><p>每次对表中的数据进行增、删、改操作时，都需要去修改各个B+树索引。而且我们讲过，B+树每层节点都是按照索引列的值从小到大的顺序排序而组成了双向链表。不论是叶子节点中的记录，还是内节点中的记录（也就是不论是用户记录还是目录项记录）都是按照索引列的值从小到大的顺序而形成了一个单向链表。而增、删、改操作可能会对节点和记录的排序造成破坏，所以存储引擎需要额外的时间进行一些记录移位，页面分裂、页面回收等操作来维护好节点和记录的排序。如果我们建了许多索引，每个索引对应的B+树都要进行相关的维护操作，会给性能拖后腿。</p>',250);function P(s,O,q,H,Q,V){const l=k,p=e("ClientOnly");return n(),d("div",null,[v,r(p,null,{default:g(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),y(l,{key:0,article:s.$frontmatter},null,8,["article"])):D("",!0)]}),_:1}),U])}const W=t(f,[["render",P]]);export{G as __pageData,W as default};
