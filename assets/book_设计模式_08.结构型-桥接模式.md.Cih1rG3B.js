import{_ as s,c as i,o as a,aj as n}from"./chunks/framework._AF764y6.js";const p="/assets/1fWgy5.27-zVGgJ.png",t="/assets/LkVIVn-20240324235557445.DAx3fUWn.png",l="/assets/ACy0vf.Bk7n0Frv.png",h="/assets/eR2bxS-20240324235550479.B76PVFAC.png",F=JSON.parse('{"title":"结构型 - 桥接模式","description":"","frontmatter":{"title":"结构型 - 桥接模式","date":"2023-10-25T00:24:45.000Z","permalink":"/design_pattern/bridge/","categories":["后端","设计模式"],"tags":["设计模式"],"author":"Manaphy"},"headers":[],"relativePath":"book/设计模式/08.结构型-桥接模式.md","filePath":"book/设计模式/08.结构型-桥接模式.md","lastUpdated":1743620201000}'),k={name:"book/设计模式/08.结构型-桥接模式.md"},e=n('<h2 id="支付功能的扩展" tabindex="-1">支付功能的扩展 <a class="header-anchor" href="#支付功能的扩展" aria-label="Permalink to “支付功能的扩展”">​</a></h2><p>由于支付宝和微信的存在，现在的系统要做「在线支付」已经变得非常简单了，在对应的平台注册企业账号，拿到开发文档，引入SDK包，进行一些简单的接口调用就可以完成对接了。本篇文章就以「支付」为例子，巧用「桥接模式」来进行功能的扩展。</p><p>在对接「支付业务」时，公司领导的要求几乎都是这样的：1.支持的支付平台越多越好、2.支持的支付方式也越多越好。当然越多越好了，用户掏钱变得更方便了，领导能不高兴嘛。</p><p>要满足领导的需求，就意味着「支付功能」会存在两个维度的扩展：<strong>1.支付平台的扩展、2.支付方式的扩展。</strong></p><p>为了满足领导的要求，我决定接入微信和支付宝两大平台，后续还可以接入其他第三方，例如云闪付。另外，只要是第三方支持的支付方式，我也全部接入进来，目标就是做一个「超级支付」。</p><p>我们用代码来描述这个过程，类图设计如下：</p><p><img src="'+p+'" alt=""></p><p>超级简单的类图，声明一个<code>Pay</code>支付抽象类，定义系统支持的各种各样的付款方式，然后编写支付宝和微信两大子类，完成各自平台的对接实现。</p><p>乍一看是没啥问题，但是实际开发中却遇到问题了。</p><p><strong>1.子类被迫实现</strong> 微信不支持「刷脸支付」啊，怎么办？我们只能在<code>WeChatPay</code>中强行实现<code>facePay()</code>方法，并抛出一个<code>UnsupportedOperationException</code>异常。如果有微信支持，但是支付宝不支持的付款方式呢？我们还是要这么做。</p><p><strong>2.扩展付款方式不方便</strong><code>Pay</code>中负责定义付款方式，子类去实现，因此扩展支付平台是很方便的，但是扩展付款方式就非常麻烦了，需要修改所有的子类，违反了「开闭原则」。</p><p>OK，发现问题了就去解决问题，我们进行第一次优化，新的类图设计如下：</p><p><img src="'+t+'" alt=""></p><p>我们将类的继承关系再往上升一个等级，<code>Pay</code>将支付平台和支付方式进行分开表示，第二层负责实现平台功能，第三层负责实现各自平台对应的付款方式。可以看到，由于微信不支持刷脸支付，因此并没有<code>WeChatFacePay</code>这个类，云闪付不支持Web网站支付，因此也就没有<code>QuickWebPay</code>了，解决了第一种实现不灵活的问题。</p><p>但是你再重新审视一下现在的系统结构，有没有发现，类的数量特别多？没错，类膨胀了。假设系统要对接N个支付平台，支持M种支付方式，那么类的数量就是<code>M*N</code>，非常可怕。</p><p>能不能再优化一下呢？减少类的数量，同时还能保证支付的灵活性和扩展性呢？</p><p>答案是当然可以了，我们可以将支付方式进行抽象化，将支付方式的实现剥离出去，支付平台类只依赖支付方式的抽象，由继承改为组合的方式，提高灵活性。 新的类图设计如下：</p><p><img src="'+l+`" alt=""></p><p>类的数量明显减少了，但是功能却一点也不差，将不同的<code>Pay</code>和<code>PayType</code>组合在一起，可以支持9种支付实现。</p><p>抽象支付类<code>Pay</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Pay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	protected</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> PayMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> payMode;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//支付方式抽象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Pay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(PayMode </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">payMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">		this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.payMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> payMode;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> abstract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">platform</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//支付平台</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> pay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;使用:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> platform</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;的&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> payMode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>支付平台类：<code>AliPay</code>和<code>WeChatPay</code>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> AliPay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Pay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> AliPay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(PayMode </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">payMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">		super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(payMode);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	protected</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">platform</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;支付宝&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WeChatPay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Pay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> WeChatPay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(PayMode </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">payMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">		super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(payMode);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	protected</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">platform</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;微信&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>支付方式的抽象<code>PayMode</code>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> PayMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 支付方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>三种支付方式实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WebPayMode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> PayMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Web网站支付&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MobilePayMode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> PayMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;移动端支付&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> FacePayMode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> PayMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;刷脸支付&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>客户端这样调用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Client</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		Pay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> AliPay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FacePayMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		pay.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">pay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		pay </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> AliPay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> MobilePayMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		pay.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">pay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>支付平台和支付方式可以任意组合，在满足相同功能的前提下，将类的数量从<code>M * N</code>减少至<code>M + N</code>了。</p><p>这就是桥接模式！</p><h2 id="桥接模式的定义" tabindex="-1">桥接模式的定义 <a class="header-anchor" href="#桥接模式的定义" aria-label="Permalink to “桥接模式的定义”">​</a></h2><blockquote><p>将抽象和实现解耦，使得两者可以独立地变化。</p></blockquote><p><img src="`+h+'" alt=""></p><p><strong>桥接模式通用类图</strong></p><ul><li>Abstraction：抽象化角色，负责定义角色的行为，同时保存一个对实现化角色的引用。</li><li>RefinedAbstraction：修正抽象化角色，负责实现抽象化角色，并对抽象化角色进行修正。</li><li>Implementor：实现化角色，接口或抽象类，定义角色的属性和行为。</li><li>ConcreteImplementor：具体的实现化角色，负责行为的具体实现。</li></ul><p><strong>抽象角色引用实现角色，或者说抽象角色的部分实现是由实现角色完成的。</strong></p><p>桥接模式的重点是在&quot;解耦&quot;上，开发者主要关注的点是如何将两者解耦。</p><h2 id="桥接模式的优点" tabindex="-1">桥接模式的优点 <a class="header-anchor" href="#桥接模式的优点" aria-label="Permalink to “桥接模式的优点”">​</a></h2><ol><li>抽象和实现分离，为了解决继承的缺点而提出的。在桥接模式下，实现可以不受抽象的约束，不用再绑定在一个固定的抽象层次上。</li><li>良好的扩展性，在上述例子中，不管是支付平台的扩展，还是支付方式的扩展，都是非常方便的。</li><li>对高层模块屏蔽实现细节。</li></ol><h2 id="桥接模式的应用场景" tabindex="-1">桥接模式的应用场景 <a class="header-anchor" href="#桥接模式的应用场景" aria-label="Permalink to “桥接模式的应用场景”">​</a></h2><ol><li>当你不希望或者类的结构不适合使用「继承」时，可以考虑使用桥接模式，<strong>组合优于继承</strong>。</li><li>当系统的接口或抽象类不稳定，后续可能会频繁修改时，建议优先使用桥接模式。</li><li>一个类存在两个及以上独立变化的维度，且这些维度都需要进行扩展。</li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h2><p>桥接模式的核心是解耦，拆分抽象和实现，尽量把可能变化的因素封装到最细、最小的逻辑单元中，避免风险扩散。</p><p>「继承」是Java语言的三大特征之一，它是一个优秀的设计，存在很多优点。但是它最大的缺点就是「强侵入」，父类有的方法，子类也会被迫拥有，类与类之间形成了一种强关联关系。</p><p>桥接模式就是用来解决「继承」的缺点的，它描述的是类与类之间的弱关联关系，对于可能会发生变化的地方，将它从继承中放出去，如果子类需要这个方法，通过桥接搭过去，获得这个方法，子类如果不想要这个方法，也完全没问题。</p><p>「继承」+「桥接」，扬长避短，对于明确不会变化的功能，使用继承，对于可能会变化的，使用桥接。</p>',47),d=[e];function r(y,g,A,c,D,o){return a(),i("div",null,d)}const B=s(k,[["render",r]]);export{F as __pageData,B as default};
