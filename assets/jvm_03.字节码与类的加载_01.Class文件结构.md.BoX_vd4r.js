import{_ as d}from"./chunks/ArticleMetadata.H12JcJLK.js";import{_ as p,E as r,c as h,o as a,j as e,I as g,aj as o,w as k,b as y,e as c,a as f}from"./chunks/framework._AF764y6.js";const x="/assets/JVM1.UUhWdYS1.jpg",C="/assets/JVM2.DjGB_zF8.jpg",A="/assets/JVM3.C1NBlQcS.jpg",u="/assets/1605527709366.C4FxOI1T.png",b="/assets/1605529824899.Dd9SyL75.png",_="/assets/1605533049976.CTq4D4UZ.png",D="/assets/1605537998797.D19BC8wN.png",m="/assets/1605578864381.BLKE0YHq.png",v="/assets/1605580054442.DF3sS64K.png",B="/assets/image-20240526034450801.CfBsm_oZ.png",E="/assets/image.ClVrb2Kq.png",F="/assets/1605611596272.CQQ2Cku2.png",T="/assets/image-20240527194008831.BgVDmdy8.png",q=JSON.parse('{"title":"Class文件结构","description":"","frontmatter":{"title":"Class文件结构","date":"2024-05-17T17:12:28.000Z","permalink":"/jvm/class/","categories":["后端","JVM虚拟机","字节码与类的加载"],"tags":[null],"author":"Manaphy"},"headers":[],"relativePath":"jvm/03.字节码与类的加载/01.Class文件结构.md","filePath":"jvm/03.字节码与类的加载/01.Class文件结构.md","lastUpdated":1744301414000}'),N={name:"jvm/03.字节码与类的加载/01.Class文件结构.md"},J=e("h1",{id:"class文件结构",tabindex:"-1"},[f("Class文件结构 "),e("a",{class:"header-anchor",href:"#class文件结构","aria-label":"Permalink to “Class文件结构”"},"​")],-1),S=o('<h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to “概述”">​</a></h2><h3 id="字节码文件的跨平台性" tabindex="-1">字节码文件的跨平台性 <a class="header-anchor" href="#字节码文件的跨平台性" aria-label="Permalink to “字节码文件的跨平台性”">​</a></h3><p><strong>Java 语言: 跨平台语言</strong></p><ul><li>当Java源代码成功编译成字节码之后，如果想在不同的平台上运行，不需要再次编译。</li><li>这个优势不是很吸引人了，因为Python、PHP、Perl、Ruby、Lisp等语言都有强大的解释器</li><li>跨平台已经几乎称为一门语言的必选特性</li></ul><p><strong>Java 虚拟机: 跨语言的平台</strong></p><ul><li><span style="color:red;">Java虚拟机不和包含Java在内的任何语言进行绑定，它只和 &quot;.class&quot; 文件这种特定的二进制文件格式关联。</span>无论是哪一种语言，只要能够将源文件编译成正确的Class文件，那么这种语言就可以在虚拟机上运行。可以说，统一而强大的Class文件结构，就是Java虚拟机的基石和桥梁。</li></ul><p><img src="'+x+'" alt="JVM1"></p><p><strong>Class字节码的规范性</strong></p><ul><li>所有的JVM都遵循Java虚拟机规范，也就是说所有的JVM环境都是一样的，这样一来字节码文件可以在各种JVM中运行</li><li><strong>想要一个Java程序正确的运行在JVM中，Java源码就必须要被编译为符合JVM规范的字节码</strong></li><li><strong>前端编译器的主要任务就是负责将符合Java语法规范的Java代码编译成符合JVM规范的字节码</strong></li><li>javac是一个能够将Java源码编译为字节码的前端编译器</li><li>javac编译器将Java源代码编译为一个有效的字节码文件过程中经历了4个步骤，分别是：<strong>词法解析、语法解析、语义解析以及生成字节码</strong></li></ul><p><img src="'+C+'" alt="JVM2"></p><p>Oracle 发布的JDK软件包括2部分内容</p><ul><li>一部分是将Java源码编译成Java虚拟机的指令集的编译器</li><li>一部分是用于实现Java虚拟机的运行时环境</li></ul><h3 id="java的前端编译器" tabindex="-1">Java的前端编译器 <a class="header-anchor" href="#java的前端编译器" aria-label="Permalink to “Java的前端编译器”">​</a></h3><p><img src="'+A+`" alt="JVM3"></p><ul><li>javac 就是JDK提供的前端编译器</li><li>Hotspot VM没有强制要求前端编译器只能使用javac来实现编译字节码，其实只要编译结果符合JVM规范即可被JVM识别</li><li>在Java的前端编译器领域，除了javac之外，还有一种经常使用的前端编译器，那就是Eclipse中的<strong>ECJ（Eclipse Compiler for Java）编译器</strong> ，和javac不同的是，ECJ是一种增量编译器</li><li>在Eclipse中，当开发人员编写完代码之后，使用 “ctrl + s”，保存的时候，ECJ采用的是局部编译，也就是把没有编译的地方重编译，而非每次都全量编译</li><li>ECJ不仅仅是Eclipse的默认内置前端编译器，Tomcat中也是使用ECJ进行编译JSP文件</li><li>默认情况下，IDEA还是使用的是javac编译器</li></ul><h3 id="透过字节码指令看代码执行细节举例" tabindex="-1">透过字节码指令看代码执行细节举例 <a class="header-anchor" href="#透过字节码指令看代码执行细节举例" aria-label="Permalink to “透过字节码指令看代码执行细节举例”">​</a></h3><p><strong>BAT面试题</strong></p><ul><li>类文件结构有几个部分？</li><li>知道字节码吗？字节码都有哪些？ Integer x = 5; int y = 5; 比较 x == y 都有哪些步骤？(class 是字节码文件)</li></ul><p><strong>代码举例1</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> IntegerTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(i1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i2);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 128</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 128</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(i3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i4);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><img src="`+u+`" alt="1605527709366"></p><p><strong>代码举例2</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> StringTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;helloword&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(str2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><img src="`+b+`" alt="1605529824899"></p><p><strong>代码举例3</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 非静态成员变量的初始化过程：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 1. 默认初始化</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 2. 显示初始化 / 代码块中初始化</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 3. 构造器初始化</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 4. 有了对象之后，可以 对象.setter方法 或者 对象.属性的方式赋值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Father</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Father</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Father.x = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Son</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Father</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Son</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 40</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Son.x = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> SonTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Father</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Son</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(f.x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * Son.x = 0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * Son.x = 30</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 20</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span></code></pre></div><p><img src="`+_+`" alt="1605533049976"></p><h2 id="虚拟机的基石-class文件" tabindex="-1">虚拟机的基石: Class文件 <a class="header-anchor" href="#虚拟机的基石-class文件" aria-label="Permalink to “虚拟机的基石: Class文件”">​</a></h2><h3 id="class文件到底存储的是什么" tabindex="-1">Class文件到底存储的是什么 <a class="header-anchor" href="#class文件到底存储的是什么" aria-label="Permalink to “Class文件到底存储的是什么”">​</a></h3><ul><li>源代码经过编译器编译之后就会生成字节码文件，字节码是一种二进制的类文件。它的内容是JVM指令，而不像C、C++经由编译器直接生成机器码</li></ul><h3 id="什么是字节码指令-byte-code" tabindex="-1">什么是字节码指令（Byte Code） <a class="header-anchor" href="#什么是字节码指令-byte-code" aria-label="Permalink to “什么是字节码指令（Byte Code）”">​</a></h3><ul><li><p>Java虚拟机的指令由一个字节长度的、代表着某种特定操作含义的<b>操作码（opcode）</b>以及跟随器后的零至多个代表此操作数的所需参数的操作数（operand）所构成。虚拟机中许多指令并不包含操作数，只有一个操作码，如下：操作码+操作数</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span> 0 aload_0</span></span>
<span class="line"><span> 1 invokespecial #1 &lt;java/lang/Object.&lt;init&gt; : ()V&gt;</span></span>
<span class="line"><span> 4 aload_0</span></span>
<span class="line"><span> 5 bipush 10</span></span>
<span class="line"><span> 7 putfield #7 &lt;Father.x : I&gt;</span></span>
<span class="line"><span>10 aload_0</span></span>
<span class="line"><span>11 invokevirtual #13 &lt;Father.print : ()V&gt;</span></span>
<span class="line"><span>14 aload_0</span></span>
<span class="line"><span>15 bipush 20</span></span>
<span class="line"><span>17 putfield #7 &lt;Father.x : I&gt;</span></span>
<span class="line"><span>20 return</span></span></code></pre></div></li></ul><h2 id="class文件结构-1" tabindex="-1">Class文件结构 <a class="header-anchor" href="#class文件结构-1" aria-label="Permalink to “Class文件结构”">​</a></h2><p>官方文档地址： <a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html" target="_blank" rel="noreferrer">https://docs.oracle.com/javase/specs/jvms/se8/html/index.html</a></p><p><strong>Class类的本质</strong>：任何一个Class文件都对应着唯一一个类或者接口的定义信息，但是反过来说，Class文件实际上它并不一定以磁盘文件的形式存在，Class文件是一组8字节为基础单位的<span style="color:red;">二进制流</span></p><p><strong>Class文件的格式</strong>：Class不像XML等描述语言，由于它没有任何分隔符号。所以存在其中的数据项，无论是字节顺序还是数量，都是被严格限定的，哪个字节代表啥意思，长度是多少，先后顺序如何，都不允许改变。</p><p>Class文件格式采用类似C语言结构体的方式进行存储数据，这种结构只有两种数据类型：<span style="color:red;">无符号数</span>和<span style="color:red;">表</span></p><ul><li><strong>无符号数</strong>属于基本的数据类型，以u1、u2、u4、u8 来分别代表1个字节、2个字节、4个字节、和8个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成的字符串值</li><li><strong>表</strong>是由多个无符号数或者其他表作为数据项构成的符合数据类型，所有表都习惯性以&quot;_info&quot; 结尾，用于描述有层次关系的符合结构的数据，整个Class文件本质上就是一张表。由于表没有固定长度，所以通常会在前面加个数说明</li></ul><p>Class文件的结构并不是一成不变的，随着Java虚拟机的不断发展，总是不可避免的对Class文件做出一些调整，但是其基本结构和框架是非常稳定的</p><p><strong>Class文件的总体结构如下</strong></p><ul><li><span style="background-color:khaki;">魔数</span></li><li><span style="background-color:khaki;">Class文件版本</span></li><li><span style="background-color:khaki;">常量池</span></li><li><span style="background-color:khaki;">访问标志</span></li><li><span style="background-color:khaki;">类索引、父类索引、接口索引集合</span></li><li><span style="background-color:khaki;">字段表集合</span></li><li><span style="background-color:khaki;">方法表集合</span></li><li><span style="background-color:khaki;">属性表集合</span></li></ul><p><img src="`+D+`" alt="1605537998797"></p><table tabindex="0"><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">名称</th><th style="text-align:left;">说明</th><th style="text-align:left;">长度</th><th style="text-align:left;">数量</th></tr></thead><tbody><tr><td style="text-align:left;">u4</td><td style="text-align:left;">magic</td><td style="text-align:left;">魔数,识别Class文件格式</td><td style="text-align:left;">4个字节</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">minor_version</td><td style="text-align:left;">副版本号(小版本)</td><td style="text-align:left;">2个字节</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">major_version</td><td style="text-align:left;">主版本号(大版本)</td><td style="text-align:left;">2个字节</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">constant_pool_count</td><td style="text-align:left;">常量池计数器</td><td style="text-align:left;">2个字节</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">cp_info</td><td style="text-align:left;">constant_pool</td><td style="text-align:left;">常量池表</td><td style="text-align:left;">n个字节</td><td style="text-align:left;">constant_pool_count-1</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">access_flags</td><td style="text-align:left;">访问标识</td><td style="text-align:left;">2个字节</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">this_class</td><td style="text-align:left;">类索引</td><td style="text-align:left;">2个字节</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">super_class</td><td style="text-align:left;">父类索引</td><td style="text-align:left;">2个字节</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">interfaces_count</td><td style="text-align:left;">接口计数器</td><td style="text-align:left;">2个字节</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">interfaces</td><td style="text-align:left;">接口索引集合</td><td style="text-align:left;">2个字节</td><td style="text-align:left;">interfaces_count</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">fields_count</td><td style="text-align:left;">字段计数器</td><td style="text-align:left;">2个字节</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">field_info</td><td style="text-align:left;">fields</td><td style="text-align:left;">字段表</td><td style="text-align:left;">n个字节</td><td style="text-align:left;">fields_count</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">methods_count</td><td style="text-align:left;">方法计数器</td><td style="text-align:left;">2个字节</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">method_info</td><td style="text-align:left;">methods</td><td style="text-align:left;">方法表</td><td style="text-align:left;">n个字节</td><td style="text-align:left;">methods_count</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">attributes_count</td><td style="text-align:left;">属性计数器</td><td style="text-align:left;">2个字节</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">attribute_info</td><td style="text-align:left;">attributes</td><td style="text-align:left;">属性表</td><td style="text-align:left;">n个字节</td><td style="text-align:left;"></td></tr></tbody></table><h3 id="_01-魔数-class文件的标志" tabindex="-1">01.魔数:Class文件的标志 <a class="header-anchor" href="#_01-魔数-class文件的标志" aria-label="Permalink to “01.魔数:Class文件的标志”">​</a></h3><ul><li>每个Class文件开头4个字节的无符号整数称为魔数（Magic Number）</li><li>它的唯一作用就是确定这个文件能否作为一个被虚拟机接受的有效合法的Class文件，也就是说：魔数是Class文件的标识符</li><li>魔数值固定为：0xCAFEBABE 不会改变</li><li>如果一个Class文件不是以 0xCAFEBABE 开头，虚拟机会抛出以下错误</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> A JNI error has occurred, please check your installation and </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> again</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Exception in thread &quot;main&quot;</span></span></code></pre></div><ul><li>使用魔数而不是拓展名来进行识别主要是基于安全方面的考虑，因为拓展名可以被随便的改动</li></ul><h3 id="_02-class文件的版本号" tabindex="-1">02.Class文件的版本号 <a class="header-anchor" href="#_02-class文件的版本号" aria-label="Permalink to “02.Class文件的版本号”">​</a></h3><p>紧接着魔数的4个字节存储的是Class文件的版本号。同样也是4个字节。第5个和第6个字节所代表的含义是编译的副版本号 minor_version，而第7个和第8个字节就是编译的主版本号 major_version</p><p>它们共同构成了Class文件的格式版本号，比如某个Class文件的主版本号为M。副本版号为m，那么这个Class文件的格式版本号就确定为M.m</p><p>版本号和Java编译器的关系在下表</p><table tabindex="0"><thead><tr><th>主版本（十六进制）</th><th style="text-align:left;">主版本（十进制）</th><th style="text-align:left;">副版本（十进制）</th><th style="text-align:left;">编译器版本</th></tr></thead><tbody><tr><td>2D</td><td style="text-align:left;">45</td><td style="text-align:left;">3</td><td style="text-align:left;">1.1</td></tr><tr><td>2E</td><td style="text-align:left;">46</td><td style="text-align:left;">0</td><td style="text-align:left;">1.2</td></tr><tr><td>2F</td><td style="text-align:left;">47</td><td style="text-align:left;">0</td><td style="text-align:left;">1.3</td></tr><tr><td>30</td><td style="text-align:left;">48</td><td style="text-align:left;">0</td><td style="text-align:left;">1.4</td></tr><tr><td>31</td><td style="text-align:left;">49</td><td style="text-align:left;">0</td><td style="text-align:left;">1.5</td></tr><tr><td>32</td><td style="text-align:left;">50</td><td style="text-align:left;">0</td><td style="text-align:left;">1.6</td></tr><tr><td>33</td><td style="text-align:left;">51</td><td style="text-align:left;">0</td><td style="text-align:left;">1.7</td></tr><tr><td>34</td><td style="text-align:left;">52</td><td style="text-align:left;">0</td><td style="text-align:left;">1.8</td></tr><tr><td>35</td><td style="text-align:left;">53</td><td style="text-align:left;">0</td><td style="text-align:left;">1.9</td></tr><tr><td>36</td><td style="text-align:left;">54</td><td style="text-align:left;">0</td><td style="text-align:left;">1.10</td></tr><tr><td></td><td style="text-align:left;">55</td><td style="text-align:left;">0</td><td style="text-align:left;">1.11</td></tr></tbody></table><p>Java的版本号是从45开始的，JDK1.1之后的每个JDK大版本发布主版本号向上加1</p><p><span style="color:red;">不同版本的Java编译器的Class文件对应的版本是不一样的。目前，高版本的Java虚拟机可以执行由低版本编译器生成的Class文件，但是低版本的Java虚拟机不能执行由高版本编译器生成的Class文件，否则JVM会抛出java.lang.UnsupportedClassVersionError异常</span></p><p>在实际应用中，由于开发环境和生产环境的不同，可能会导致该问题的发生，因此，需要在开发的时候，注意统一版本号</p><p>Java虚拟机JDK版本为1.k(k&gt;=2)时，对应的Class文件格式版本号范围为 45.0 ~ 44+k.0 (包含2端)</p><h3 id="_03-常量池-存放所有常量" tabindex="-1">03.常量池:存放所有常量 <a class="header-anchor" href="#_03-常量池-存放所有常量" aria-label="Permalink to “03.常量池:存放所有常量”">​</a></h3><p>常量池是Class文件中最为丰富的区域之一。常量池对于Class文件中的字段和方法解析也有着至关重要的作用</p><p>随着Java虚拟机的不断发展，常量池的内容也日渐丰富。可以说，常量池是整个Class文件的基石</p><p><img src="`+m+'" alt="1605578864381"></p><p>在版本号之后，紧跟着的就是常量池的数量，以及若干个常量池的池表项</p><p>常量池中常量的数量是不固定的，所以在常量池的入口需要放置一项u2类型的无符号数，代表常量池的容量计数值（constant_pool_count）。与Java中语言习惯不一样的是，这个容量是从1开始而不是从0开始。</p><p><img src="'+v+'" alt="1605580054442"></p><p>由上表可知，Class文件使用了一个前置的容量计数器（constant_pool_count-1）加若干个连续的数据项（constant_pool）的形式来描述常量池的内容。我们把这一系列连续常量池称为常量池集合。</p><p>在<span style="color:red;">常量池表项</span>中，用于存放编译时期生成的各种<span style="color:blue;font-weight:bold;">字面量</span>和<span style="color:blue;font-weight:bold;">符号引用</span>，这部分内容将类加载后进入方法区的<span style="color:red;">运行时常量池</span>中进行存放</p><table tabindex="0"><thead><tr><th>类型</th><th>标志(或标识)</th><th>描述</th></tr></thead><tbody><tr><td>CONSTANT_utf8_info</td><td>1</td><td>UTF-8编码的字符串</td></tr><tr><td>CONSTANT_Integer_info</td><td>3</td><td>整型字面量</td></tr><tr><td>CONSTANT_Float_info</td><td>4</td><td>浮点型字面量</td></tr><tr><td>CONSTANT_Long_info</td><td>5</td><td>长整型字面量</td></tr><tr><td>CONSTANT_Double_info</td><td>6</td><td>双精度浮点型字面量</td></tr><tr><td>CONSTANT_Class_info</td><td>7</td><td>类或接口的符号引用</td></tr><tr><td>CONSTANT_String_info</td><td>8</td><td>字符串类型字面量</td></tr><tr><td>CONSTANT_Fieldref_info</td><td>9</td><td>字段的符号引用</td></tr><tr><td>CONSTANT_Methodref_info</td><td>10</td><td>类中方法的符号引用</td></tr><tr><td>CONSTANT_InterfaceMethodref_info</td><td>11</td><td>接口中方法的符号引用</td></tr><tr><td>CONSTANT_NameAndType_info</td><td>12</td><td>字段或方法的符号引用</td></tr><tr><td>CONSTANT_MethodHandle_info</td><td>15</td><td>表示方法句柄</td></tr><tr><td>CONSTANT_MethodType_info</td><td>16</td><td>标志方法类型</td></tr><tr><td>CONSTANT_InvokeDynamic_info</td><td>18</td><td>表示一个动态方法调用点</td></tr></tbody></table><h4 id="常量池计数器" tabindex="-1">常量池计数器 <a class="header-anchor" href="#常量池计数器" aria-label="Permalink to “常量池计数器”">​</a></h4><p>由于常量池的数量的不固定，时长时短，所以需要放置两个字节来标识常量池容量的计数值</p><p>常量池容量计数值（u2类型），<strong>从1开始</strong>，表示常量池中有多少项常量，即constant_pool_count=1 表示常量池中有0个常量项</p><p>Demo的值为：</p><p><img src="'+B+'" alt="image-20240526034450801"></p><p>其值为0x0016，也就是22</p><p>需要注意的是，这实际上只有21项常量，索引范围为1-21.为什么？</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>通常我们写代码都是从0开始的，但是这里常量池从1开始，是因为它把第0项常量池空出来了，这是为了满足后面某些指向常量池的索引值的数据在指定情况下需要表达“不引用任何一个常量池项目”的含义，这种情况下可以用索引值0来表示</p></div><h4 id="常量池表" tabindex="-1">常量池表 <a class="header-anchor" href="#常量池表" aria-label="Permalink to “常量池表”">​</a></h4><p>constant_pool 是一种表结构，以 1~constant_pool_count-1 为索引，表明了后面又多少个常量项</p><p>常量池主要存放两大类常量：<span style="color:red;">字面量（Literal）</span>和<span style="color:red;">符号引用（Symbolic Reference）</span></p><p>它包含了Class文件结构以及其子结构中引用的所有的字符串常量、类或者接口名、字段名和其他常量。常量池中的每一项都具备相同的特征。第1个字节作为类型标记，用于确定该项的格式，这个字节称为tag byte （标记字节、标签字节）</p><table tabindex="0"><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">标志(或标识)</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">CONSTANT_utf8_info</td><td style="text-align:left;">1</td><td style="text-align:left;">UTF-8编码的字符串</td></tr><tr><td style="text-align:left;">CONSTANT_Integer_info</td><td style="text-align:left;">3</td><td style="text-align:left;">整型字面量</td></tr><tr><td style="text-align:left;">CONSTANT_Float_info</td><td style="text-align:left;">4</td><td style="text-align:left;">浮点型字面量</td></tr><tr><td style="text-align:left;">CONSTANT_Long_info</td><td style="text-align:left;">5</td><td style="text-align:left;">长整型字面量</td></tr><tr><td style="text-align:left;">CONSTANT_Double_info</td><td style="text-align:left;">6</td><td style="text-align:left;">双精度浮点型字面量</td></tr><tr><td style="text-align:left;">CONSTANT_Class_info</td><td style="text-align:left;">7</td><td style="text-align:left;">类或接口的符号引用</td></tr><tr><td style="text-align:left;">CONSTANT_String_info</td><td style="text-align:left;">8</td><td style="text-align:left;">字符串类型字面量</td></tr><tr><td style="text-align:left;">CONSTANT_Fieldref_info</td><td style="text-align:left;">9</td><td style="text-align:left;">字段的符号引用</td></tr><tr><td style="text-align:left;">CONSTANT_Methodref_info</td><td style="text-align:left;">10</td><td style="text-align:left;">类中方法的符号引用</td></tr><tr><td style="text-align:left;">CONSTANT_InterfaceMethodref_info</td><td style="text-align:left;">11</td><td style="text-align:left;">接口中方法的符号引用</td></tr><tr><td style="text-align:left;">CONSTANT_NameAndType_info</td><td style="text-align:left;">12</td><td style="text-align:left;">字段或方法的符号引用</td></tr><tr><td style="text-align:left;">CONSTANT_MethodHandle_info</td><td style="text-align:left;">15</td><td style="text-align:left;">表示方法句柄</td></tr><tr><td style="text-align:left;">CONSTANT_MethodType_info</td><td style="text-align:left;">16</td><td style="text-align:left;">标志方法类型</td></tr><tr><td style="text-align:left;">CONSTANT_InvokeDynamic_info</td><td style="text-align:left;">18</td><td style="text-align:left;">表示一个动态方法调用点</td></tr></tbody></table><p>15、16、18 是JDK7出现的，表示支持动态调用</p><h5 id="字面量和符号引用" tabindex="-1">字面量和符号引用 <a class="header-anchor" href="#字面量和符号引用" aria-label="Permalink to “字面量和符号引用”">​</a></h5><p>在对常量进行解读之前，我们需要搞清楚几个概念</p><p>常量池主要存放两大类变量：字面量（Literal）和符号引用（Symbolic References）如下表</p><table tabindex="0"><thead><tr><th style="text-align:left;">常量</th><th style="text-align:left;">具体的常量</th></tr></thead><tbody><tr><td style="text-align:left;">字面量</td><td style="text-align:left;">文本字符串</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">声明为final的常量值</td></tr><tr><td style="text-align:left;">符号引用</td><td style="text-align:left;">类和接口的全限定名</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">字段的名称和描述符</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">方法的名称和描述符</td></tr></tbody></table><p><strong>全限定类名</strong> com/cgp/java/Demo 这个就是类的全限定名，仅仅是把包名的&quot;.&quot;替换为&quot;/&quot;，为了使得连续的多个全限定名之间不产生混淆，在使用时候最后一般会加一个&quot;;&quot;，表示全限定名结束</p><p><strong>简单名称</strong> 简单名称指的是没有类型和参数修饰的方法或者字段名称，上面例子中的add() 方法和 num 字段的简单名称都是add和num</p><p><strong>描述符</strong> <span style="color:red;">描述符的作用是用来描述字段的数据类型、方法的参数列表（包括数量、类型以及顺序）和返回值。 </span>根据描述符规则，基本数据类型（byte、char、double、float、int、long、short、boolean）以及代表无返回值的void类型都用一个大写字符来表示，而对象类型则用字符L加对象的全限定名来表示 （数据类型：基本数据类型、引用数据类型），详见下表：</p><table tabindex="0"><thead><tr><th style="text-align:left;">标识符</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">B</td><td style="text-align:left;">基本数据类型byte</td></tr><tr><td style="text-align:left;">C</td><td style="text-align:left;">基本数据类型char</td></tr><tr><td style="text-align:left;">D</td><td style="text-align:left;">基本数据类型double</td></tr><tr><td style="text-align:left;">F</td><td style="text-align:left;">基本数据类型float</td></tr><tr><td style="text-align:left;">I</td><td style="text-align:left;">基本数据类型int</td></tr><tr><td style="text-align:left;">J</td><td style="text-align:left;">基本数据类型long</td></tr><tr><td style="text-align:left;">S</td><td style="text-align:left;">基本数据类型short</td></tr><tr><td style="text-align:left;">Z</td><td style="text-align:left;">基本数据类型boolean</td></tr><tr><td style="text-align:left;">V</td><td style="text-align:left;">代表void类型</td></tr><tr><td style="text-align:left;">L</td><td style="text-align:left;">对象类型,比如:<code>Ljava/lang/Object;</code></td></tr><tr><td style="text-align:left;">[</td><td style="text-align:left;">数组类型,代表一维数组。比如:<code>double[][][] is [[[D</code></td></tr></tbody></table><p>用描述符描述方法的时候，按照先参数列表，后返回值的顺序描述，参数列表按照参数列表的严格顺序放在一组小括号“()”里面，如方法 java.lang.String.toString() 的描述符为 ()Ljava/lang/String; 方法int adc(int[] x ,int y) 的描述符为([II]) I。</p><p>::: note 补充说明</p><p>虚拟机在加载Class文件的才会进行动态连接，也就是说，Class文件中不会保存各个方法和字段的最终内存布局信息，因此，这些字段和方法的符号引用不经过转换时无法被虚拟机使用的。<span style="color:red;">当虚拟机运行的时候，需要从常量池中获得对应的符号引用，再在类加载的过程中的解析阶段，将其替换为直接引用，并翻译到具体的内存地址中去</span></p><p>符号引用和直接引用的区别和关联</p><ul><li>符号引用：符号引用以<span style="color:red;">一组符号</span>来描述所引用目标，符号可以时任何形式的字面量，只要使用时能无歧义的定位到目标即可，<span style="color:red;">符号引用与虚拟机的内存布局无关</span>，引用的目标不一定已经加载到了内存中。</li><li>直接引用：直接引用可以是直接<span style="color:red;">指向目标的指针、相对偏移量或者是一个能直接定位到目标的句柄，直接引用是与虚拟机实现的内存布局相关的，</span>同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那就说明引用的目标必定已经存在与内存中了。</li></ul><p>:::</p><h5 id="常量类型和结构" tabindex="-1">常量类型和结构 <a class="header-anchor" href="#常量类型和结构" aria-label="Permalink to “常量类型和结构”">​</a></h5><p><img src="'+E+`" alt="image"></p><p><strong>总结</strong></p><p>这14种表（或者常量项结构）的共同特点是：表一开始的第一位是一个u1类型的标志位（tag），代表当前这个常量项使用的是哪种结构，即哪种常量类型</p><p>在常量池列表种，CONSTANT_Utf8_info 常量项是一种改进过的UTF-8编码格式来存储诸如文字字符串、类或者接口的全限定名、字段或者方法的简单名称以及描述符等常量字符串信息</p><p>这14个常量结构还有一个特点是，其中13个常量项占用的字节固定，只有CONSTANT_Utf8_info 占用字节不固定，其大小由length决定，为什么呢？<span style="color:red;">因为常量池存储的内容可知，其存放的是字面量和符号引用，最终这些内容都是会是一个字符串，这些字符串的大小是在编写程序时才确定，</span>比如定义一个类，类名可以取长取短，所以在没有编译之前，大小不固定，编译之后，通过utf-8编码，就可以知道其长度。</p><hr><p>常量池：可以理解为Class文件之中的资源仓库，它是Class文件结构中与其他项目关联最多的数据类型（后面很多数据类型都会指向此处，也是占用Class文件空间最大的数据项目之一）</p><p><strong>常量池中为什么要包含这些内容</strong>：Java代码在进行javac编译的时候，并不像C、C++那样有&quot;连接&quot;这一步骤，而是在虚拟机加载Class文件的时候进行动态链接。也就是说，<span style="color:red;">在Class文件中不会保存各个方法，字段的最终内存信息，因此这些字段、方法的符号引用不经过运行期间转换的话无法得到真正的内存入口地址，也就无法直接被虚拟机使用。</span> 当虚拟机运行的时候，需要从常量池中获得对应的符号引用，再在类创建的时候或者运行时候解析、翻译到具体的内存地址中。关于类的创建和动态链接内容，在虚拟机类加载过程中再进行详细解释。</p><h3 id="_04-访问标识" tabindex="-1">04.访问标识 <a class="header-anchor" href="#_04-访问标识" aria-label="Permalink to “04.访问标识”">​</a></h3><blockquote><p>访问标识（access_flag、访问标记、访问标志）</p></blockquote><p>在常量池后，紧跟着访问标记，该标记使用两个字节标识，用于识别一些类或者接口层次的访问信息，包括：这个Class是类还是接口；是否定义为 public 类型；是否定义为 abstract 类型，是否声明为 fianl等，各种访问标记如下：</p><table tabindex="0"><thead><tr><th style="text-align:left;">标志名称</th><th style="text-align:left;">标志值</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">ACC_PUBLIC</td><td style="text-align:left;">0x0001</td><td style="text-align:left;">标志为public类型</td></tr><tr><td style="text-align:left;">ACC_FINAL</td><td style="text-align:left;">0x0010</td><td style="text-align:left;">标志被声明为final，只有类可以设置</td></tr><tr><td style="text-align:left;">ACC_SUPER</td><td style="text-align:left;">0x0020</td><td style="text-align:left;">标志允许使用invokespecial字节码指令的新语义，JDK1.0.2之后编译出来的类的这个标志默认为真。（使用增强的方法调用父类方法）</td></tr><tr><td style="text-align:left;">ACC_INTERFACE</td><td style="text-align:left;">0x0200</td><td style="text-align:left;">标志这是一个接口</td></tr><tr><td style="text-align:left;">ACC_ABSTRACT</td><td style="text-align:left;">0x0400</td><td style="text-align:left;">是否为abstract类型，对于接口或者抽象类来说，次标志值为真，其他类型为假</td></tr><tr><td style="text-align:left;">ACC_SYNTHETIC</td><td style="text-align:left;">0x1000</td><td style="text-align:left;">标志此类并非由用户代码产生（即：由编译器产生的类，没有源码对应）</td></tr><tr><td style="text-align:left;">ACC_ANNOTATION</td><td style="text-align:left;">0x2000</td><td style="text-align:left;">标志这是一个注解</td></tr><tr><td style="text-align:left;">ACC_ENUM</td><td style="text-align:left;">0x4000</td><td style="text-align:left;">标志这是一个枚举</td></tr></tbody></table><p>类的访问权限通常以 ACC_ 开头的常量。</p><p>每一种类型都表示通过设置访问标志的32位中的特定位来实现的，比如：如果是 public final 的类，则该标记为 ACC_PUBLIC | ACC_FINAL。</p><p>使用ACC_SUPER 可以让类更准确的定位到父类的方法 super.method()，现代编译器都会设置并且使用这个标记。</p><p>::: note 补充说明</p><ol><li><p>带有ACC_INTERFACE标志的class文件表示的是接口而不是类，反之则表示的是类而不是接口。</p><ol><li><span style="color:blue;">如果有一个class文件被设置了 ACC_INTERFACE 标志，那么同时也得设置 ACC_ABSTRACT 标志，同时它不能再设置为 ACC_FINAL、ACC_SUPER、ACC_ENUM 标志。</span></li><li><span style="color:blue;">如果没有设置ACC_INTERFACE标志，那么这个class文件可以具有上表除了ACC_ANNOTATION 外的其他所有标志，当然ACC_FINAL 和 ACC_ABSTRACT 着类互斥的标志除外，这两个标志不得同时设置。</span></li></ol></li><li><p>ACC_SUPER 标志用于确定类或者接口里面的 <em>invokespecial</em> 指令使用的是哪一种执行语义。<span style="color:red;">针对Java虚拟机指令集的编译器都应该设置这个标志。</span>对于JavaSE 8 以及后续版本来说，无论Class文件中这个类的标志的实际值是什么，也不管Class文件的版本号是多少，JVM为每个Class文件都设置了ACC_SUPER标志。</p><ol><li><span style="color:blue;">ACC_SUPER 标志是为了向后兼容的由旧的Java编译器所编译的代码而设计的。目前的ACC_SUPER标志是由JDK1.0.2 之前的编译器生成的 access_flags 中是没有确定含义的，如果设置了该标志，那么 Oracle 的Java虚拟机实现会将其忽略</span></li></ol></li><li><p>ACC_SYNTHETIC 标志意味着该类或者该接口是由编译器生成的，而不是由源代码生成的。</p></li><li><p>注解类型必须设置 ACC_ANNOTATION 标志，如果设置了ACC_ANNOTATION标志，那么也必须设置ACC_INTERFACE标志。</p></li><li><p>ACC_ENUM标志表名该类或者父类为枚举类型。</p></li><li><p>表中没有使用access_flags 标志是为未来拓展而预留的，预留的标记在编译器中设置为0，Java虚拟机实现也应该忽略他们。</p></li></ol><p>:::</p><h3 id="_05-类索引、父类索引、接口索引集合" tabindex="-1">05.类索引、父类索引、接口索引集合 <a class="header-anchor" href="#_05-类索引、父类索引、接口索引集合" aria-label="Permalink to “05.类索引、父类索引、接口索引集合”">​</a></h3><p>在访问标记后，会指定该类的类别、父类类别以及实现的接口，格式如下：</p><table tabindex="0"><thead><tr><th style="text-align:left;">长度</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">u2</td><td style="text-align:left;">this_class</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">super_class</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">interfaces_count</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">interfaces[interfaces_count]</td></tr></tbody></table><p>这三项数据来确定这个类的继承关系</p><ul><li>类索引用于确定这个类的全限定名</li><li>父类索引用于确定这个类的父类的全限定名。由于Java语言不允许多继承，所以父类索引只有一个，除了java.lang.Object之外，所有的Java类都有父类。因此除了java.lang.Object 外，所有Java类的父类索引都不能为0</li><li>接口索引集合就是用来描述这个类实现了哪些接口，这些被实现的接口将按 implements 语句（如果这个类本身就是一个接口，就应该是 extends 语句）后的接口顺序从左到右排列到接口索引集合中。</li></ul><p><span style="background-color:khaki;font-weight:bold;">1. this_class （类索引）</span></p><p>2字节无符号整数，指向常量池的索引。它提供了类的全限定名，如 com/cgp/java/Demo。this_class 的值必须是对常量池中的某项的一个有效的索引值。常量池在这个索引处的成员必须是 CONSTANT_Class_info 类结构体，该结构体表示这个class文件所定义的类或者接口。</p><p><span style="background-color:khaki;font-weight:bold;">2. super_class (父类索引)</span></p><p>2字节无符号整数，指向常量池的索引，它提供了当前类的父类全限定名。如果没有继承任何类，其默认继承的就是java/lang/Object 类，同时，由于Java不支持多继承，所以其父类只有一个。</p><p>super_class 指向的父类不能为final。</p><p><span style="background-color:khaki;font-weight:bold;">3. interfaces</span></p><p>指向常量池索引集合，它提供了一个符号引用到所有已经实现的接口</p><p>由于一个类可以实现多个接口，因此需要以数组形式保存多个接口的索引，表示接口的每个索引也是一个指向常量池的CONSTANT_Class （当然这里就必须是接口，不能是类）</p><p><strong>3.1 interfaces_count （接口计数器）</strong></p><p>interfaces_count 项的值表示当前类或者接口的直接接口的数量</p><p><strong>3.2 interfaces[interfaces_count]（接口索引集合）</strong></p><p>interfaces [] 中每个成员的值必须是常量池表中某项有效的索引值，它的长度为 interfaces_count，每个成员interfaces[i] 必须为CONSTANT_Class_info 结构，其中 0&lt;=i &lt; interfaces_count。</p><p>在interfaces[] 中，各个成员所表示的接口顺序和对应的源代码中给定的接口顺序是一致的（从左到右），也就是说 interfaces[0] 对应的是源代码中最左边的接口。</p><h3 id="_06-字段表集合" tabindex="-1">06.字段表集合 <a class="header-anchor" href="#_06-字段表集合" aria-label="Permalink to “06.字段表集合”">​</a></h3><p><strong>fields</strong></p><p>用于描述接口或者类中声明的变量。字段包括<span style="color:red;">类级别变量和实例级变量</span>，但是不包括方法内部、代码块内部声明的局部变量。</p><p>字段叫什么名字、字段定义的数据类型，这些都是无法固定的，只能引用常量池中的常量来描述。</p><p>它指向常量池索引几个，它描述了每个字段的完整信息。比如<span style="color:red;">字段的标识符、访问修饰符（public 、private、protected）、是类变量还是实例变量（static修饰符）、是否是常量（final修饰）</span>等。</p><div class="tip custom-block"><p class="custom-block-title">注意事项</p><p>字段表集合中不会列出对外部类或者实现的接口中继承而来的字段，但有可能列出原本Java代码中不存在的字段。比如在内部类中为了保持对外部类的访问性，会自动添加指向外部类实例的字段。</p><p>在Java语言中字段是无法重载的，两个字段的数据类型、修饰符不管是不是相同。都必须使用不一样的名称，但是对于字节码来说，如果两个字段的描述符不一致，那么字段重名就是合法的。</p></div><h4 id="字段计数器-fields-count" tabindex="-1">字段计数器(fields_count) <a class="header-anchor" href="#字段计数器-fields-count" aria-label="Permalink to “字段计数器(fields_count)”">​</a></h4><p>fields_count 的值表示当前class文件fields表的成员个数。使用2个字节表示</p><p>fields表中的每一个成员都是一个 field_info 结构，用于表示该类或者接口所声明的所有类或者实例字段，不包括方法内部声明的变量，也不包括从父类或者父接口继承的那些字段</p><h4 id="字段表-fields" tabindex="-1">字段表(fields[]) <a class="header-anchor" href="#字段表-fields" aria-label="Permalink to “字段表(fields[])”">​</a></h4><p>fields 表中的每个成员都必须是一个 fields_info 结构的数据项，用于表示当前类或者接口中某个字段的完整描述</p><p>一个字段的信息包括如下这些信息。在这些信息中，<span style="color:red;">各个修饰符都是布尔值，要么有，要么没有</span></p><ul><li>作用域（public、private、proteced修饰符）</li><li>是实例变量还是类变量（static修饰符）</li><li>可变性（final）</li><li>并发可见性（volatile修饰符，是否强制从主内存读写）</li><li>可否序列化（transient 修饰符）</li><li>字段数据类型（基本数据类型、对象、数组）</li><li>字段名称</li></ul><p><strong>字段表结构</strong>：字段作为一个表，有其自己的结构</p><table tabindex="0"><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">名称</th><th style="text-align:left;">含义</th><th style="text-align:left;">数量</th></tr></thead><tbody><tr><td style="text-align:left;">u2</td><td style="text-align:left;">access_flags</td><td style="text-align:left;">访问标志</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">name_index</td><td style="text-align:left;">字段名索引</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">descriptor_index</td><td style="text-align:left;">描述符索引</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">attributes_count</td><td style="text-align:left;">属性计数器</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">attribute_info</td><td style="text-align:left;">attributes</td><td style="text-align:left;">属性集合</td><td style="text-align:left;">attributes_count</td></tr></tbody></table><p><strong>字段表访问标识</strong>：一个字段可以被各种关键字去修饰，比如：作用域修饰符（public、private、protected）、static修饰符、final修饰符、volatile修饰符。因此，可以像类一样，使用一些标记来标记字段。字段的访问标记有如下这些：</p><table tabindex="0"><thead><tr><th style="text-align:left;">标志名称</th><th style="text-align:left;">标志值</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">ACC_PUBLIC</td><td style="text-align:left;">0x0001</td><td style="text-align:left;">字段是否为public</td></tr><tr><td style="text-align:left;">ACC_PRIVATE</td><td style="text-align:left;">0x0002</td><td style="text-align:left;">字段是否为private</td></tr><tr><td style="text-align:left;">ACC_PROTECTED</td><td style="text-align:left;">0x0004</td><td style="text-align:left;">字段是否为protected</td></tr><tr><td style="text-align:left;">ACC_STATIC</td><td style="text-align:left;">0x0008</td><td style="text-align:left;">字段是否为static</td></tr><tr><td style="text-align:left;">ACC_FINAL</td><td style="text-align:left;">0x0010</td><td style="text-align:left;">字段是否为final</td></tr><tr><td style="text-align:left;">ACC_VOLATILE</td><td style="text-align:left;">0x0040</td><td style="text-align:left;">字段是否为volatile</td></tr><tr><td style="text-align:left;">ACC_TRANSTENT</td><td style="text-align:left;">0x0080</td><td style="text-align:left;">字段是否为transient</td></tr><tr><td style="text-align:left;">ACC_SYNCHETIC</td><td style="text-align:left;">0x1000</td><td style="text-align:left;">字段是否为由编译器自动产生</td></tr><tr><td style="text-align:left;">ACC_ENUM</td><td style="text-align:left;">0x4000</td><td style="text-align:left;">字段是否为enum</td></tr></tbody></table><h5 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to “”">​</a></h5><p><strong>字段名索引</strong>：根据字段名索引的值，查询常量池中指定索引项即可</p><p><strong>描述符索引</strong>：描述符的作用是用来描述字段的数据类型、方法的参数列表（包括数量、类型以及顺序）和返回值。 根据描述符规则，基本数据类型（byte、char、double、float、int、long、short、boolean）以及代表无返回值的void类型都用一个大写字符来表示，而对象类型则用字符L加对象的全限定名来表示 （数据类型：基本数据类型、引用数据类型），详见下表：</p><table tabindex="0"><thead><tr><th style="text-align:left;">字符</th><th style="text-align:left;">类型</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">B</td><td style="text-align:left;">byte</td><td style="text-align:left;">有符号字节型数</td></tr><tr><td style="text-align:left;">C</td><td style="text-align:left;">char</td><td style="text-align:left;">Unicode字符,UTF-16编码</td></tr><tr><td style="text-align:left;">D</td><td style="text-align:left;">double</td><td style="text-align:left;">双精度浮点数</td></tr><tr><td style="text-align:left;">F</td><td style="text-align:left;">float</td><td style="text-align:left;">单精度浮点数</td></tr><tr><td style="text-align:left;">I</td><td style="text-align:left;">int</td><td style="text-align:left;">整形数</td></tr><tr><td style="text-align:left;">J</td><td style="text-align:left;">long</td><td style="text-align:left;">长整数</td></tr><tr><td style="text-align:left;">S</td><td style="text-align:left;">short</td><td style="text-align:left;">有符号短整数</td></tr><tr><td style="text-align:left;">Z</td><td style="text-align:left;">boolean</td><td style="text-align:left;">布尔值 true/false</td></tr><tr><td style="text-align:left;">L Classname;</td><td style="text-align:left;">reference</td><td style="text-align:left;">一个名为Classname的实例</td></tr><tr><td style="text-align:left;">[</td><td style="text-align:left;">reference</td><td style="text-align:left;">一个一维数组</td></tr></tbody></table><p><strong>属性表集合</strong>：一个字段还可能拥有一些属性，用于存储更多的额外信息。比如初始化值、一些注释信息等。属性个数存在attribute_count 中，属性具体内容存放在 attributes数组中。</p><p>以常量属性为例，结构为:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>ConstantValue_attribute{</span></span>
<span class="line"><span>  u2 attribute_name_index;</span></span>
<span class="line"><span>  u4 attribute_length;</span></span>
<span class="line"><span>  u2 constantvalue_index;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>说明: 对于常量属性而言,attribute_length值恒为2。</p><h3 id="_07-方法表集合" tabindex="-1">07.方法表集合 <a class="header-anchor" href="#_07-方法表集合" aria-label="Permalink to “07.方法表集合”">​</a></h3><blockquote><p>methods：指向常量池索引集合，它完整描述了每个方法的签名</p></blockquote><p>在字节码文件中，<span style="color:red;">每一个method_info 项都对应着一个类或者接口中的方法信息。</span>比如方法的访问修饰符（public、private、protected），方法的返回值类型以及方法的参数信息等</p><p>如果这个方法不是抽象的或者不是native的，那么字节码中会体现出来</p><p>一方面，methods表只描述当前类或接口中声明的方法，不包括从父类或者父接口继承的方法。另一方面，methods表可能会出现由编译器自动添加的方法，最典型的就是编译器产生的方法信息（比如：类(接口) 初始化方法&lt;client&gt; 和实例初始化方法 &lt;init&gt;()）</p><div class="tip custom-block"><p class="custom-block-title">使用注意事项</p><ul><li>在 Java 语言中，要重载(Overload)一个方法，除了要与原方法具有相同的简单名称之外，还要求必须拥有一个与原方法不同的特征签名，特征签名就是一个方法中各个参数在常量池中的字段符号引用的集合，也就是因为返回值不会包含在特征签名之中，因此 Java 语言里无法仅仅依靠返回值的不同来对一个已有方法进行重载。</li><li>但在 Class 文件格式中，特征签名的范围更大一些，只要描述符不是完全一致的两个方法就可以共存。也就是说，如果两个方法有相同的名称和特征签名，但返回值不同，那么也是可以合法共存于同一个 Class 文件中。</li><li>也就是说，尽管 Java 语法规范并不允许在一个类或者接口中声明多个方法签名相同的方法，但是和 Java 语法规范相反，字节码文件中却恰恰允许存放多个方法签名相同的方法，唯一的条件就是这些方法之间的返回值不能相同。</li></ul></div><h4 id="方法计数器-methods-count" tabindex="-1">方法计数器(methods_count) <a class="header-anchor" href="#方法计数器-methods-count" aria-label="Permalink to “方法计数器(methods_count)”">​</a></h4><p>methods_count 的值表示当前class文件的methods表的成员个数。使用两个字节表示</p><p>methods 表中每个成员都是一个method_info 结构</p><h4 id="方法表-methods" tabindex="-1">方法表(methods []) <a class="header-anchor" href="#方法表-methods" aria-label="Permalink to “方法表(methods [])”">​</a></h4><p>methods 表中的每个成员都必须是一个 method_info 结构，用于表示当前类或接口中某个方法的完整描述。如果某个 method_info 结构的 access_flags 项既没有设置 ACC_NATIVE 标志也没有设置 ACC_ABSTRACT 标志，那么该结构中也应包含实现这个方法所有的 Java 虚拟机指令。</p><p>method_info 结构可以表示类和接口中定义的所有方法，包括实例方法、类方法、实例初始化方法和类或接口初始化方法。</p><p><strong>方法表的结构</strong>: 实际跟字段表是一样的，方法表结构如下</p><table tabindex="0"><thead><tr><th>类型</th><th>名称</th><th>含义</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>access_flags</td><td>访问标志</td><td>1</td></tr><tr><td>u2</td><td>name_index</td><td>方法名索引</td><td>1</td></tr><tr><td>u2</td><td>descriptor_index</td><td>描述符索引</td><td>1</td></tr><tr><td>u2</td><td>attributes_count</td><td>属性计数器</td><td>1</td></tr><tr><td>attribute_info</td><td>attributes</td><td>属性集合</td><td>attributes_count</td></tr></tbody></table><p><strong>方法表访问标志</strong>： 跟字段表一样，方法表也有访问标志，而且他们的标志有部分相同，部分则不同，方法表的具体访问标志如下：</p><table tabindex="0"><thead><tr><th>标志名称</th><th>标志值</th><th>含义</th></tr></thead><tbody><tr><td>ACC_PUBLIC</td><td>0x0001</td><td>public,方法可以从包外访问</td></tr><tr><td>ACC_PRIVATE</td><td>0x0002</td><td>private,方法只能本类中访问</td></tr><tr><td>ACC_PROTECTED</td><td>0x0004</td><td>protected,方法在自身和子类可以访问</td></tr><tr><td>ACC_STATIC</td><td>0x0008</td><td>static,静态方法</td></tr></tbody></table><h3 id="_08-属性表集合-attributes" tabindex="-1">08.属性表集合(attributes) <a class="header-anchor" href="#_08-属性表集合-attributes" aria-label="Permalink to “08.属性表集合(attributes)”">​</a></h3><p>方法表集合之后的属性表集合，<span style="color:red;">指的是 Class 文件所携带的辅助信息</span>，比如该 Class 文件的源文件的名称。以及任何带有 RetentionPolicy.CLASS 或者 RetentionPolicy.RUNTIME 的注解。这类信息通常被用于 Java 虚拟机的验证和运行，以及 Java 程序的调试，<span style="color:red;">一般无需深入了解</span>。</p><p>此外，字段表、方法表都可以有自己的属性表。用于描述某些场景专有的信息</p><p>属性表集合的限制没有那么严格，不再要求各个属性表具有严格的顺序，并且只要不与已有的属性名重复，任何人实现的编译器都可以向属性表中写入自己定义的属性信息，但 Java 虚拟机运行时会忽略掉它不认识的属性</p><h4 id="属性计数器-attributes-count" tabindex="-1">属性计数器(attributes_count) <a class="header-anchor" href="#属性计数器-attributes-count" aria-label="Permalink to “属性计数器(attributes_count)”">​</a></h4><p>attributes_count 的值表示当前 Class 文件属性表的成员个数。属性表中每一项都是一个 attribute_info 结构</p><h4 id="属性表-attributes" tabindex="-1">属性表(attributes[]) <a class="header-anchor" href="#属性表-attributes" aria-label="Permalink to “属性表(attributes[])”">​</a></h4><p>属性表的每个项的值必须是 attribute_info 结构。属性表的结构比较灵活，各种不同的属性只要满足以下结构即可</p><p><strong>属性的通用格式</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">名称</th><th style="text-align:left;">数量</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">u2</td><td style="text-align:left;">attribute_name_index</td><td style="text-align:left;">1</td><td style="text-align:left;">属性名索引</td></tr><tr><td style="text-align:left;">u4</td><td style="text-align:left;">attribute_length</td><td style="text-align:left;">1</td><td style="text-align:left;">属性长度</td></tr><tr><td style="text-align:left;">u1</td><td style="text-align:left;">info</td><td style="text-align:left;">attribute_length</td><td style="text-align:left;">属性表</td></tr></tbody></table><p>即只需说明属性的名称以及占用位数的长度即可，属性表具体的结构可以去自定义</p><p><strong>属性类型</strong></p><p>属性表实际上可以有很多类型，上面看到的 Code 属性只是其中一种， Java 8 里面定义了23种属性，下面这些是虚拟机中预定义的属性：</p><table tabindex="0"><thead><tr><th style="text-align:left;">属性名称</th><th style="text-align:left;">使用位置</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">Code</td><td style="text-align:left;">方法表</td><td style="text-align:left;">Java代码编译成的字节码指令</td></tr><tr><td style="text-align:left;">ConstantValue</td><td style="text-align:left;">字段表</td><td style="text-align:left;">final关键字定义的常量池</td></tr><tr><td style="text-align:left;">Deprecated</td><td style="text-align:left;">类、方法、字段表</td><td style="text-align:left;">被声明为deprecated的方法和字段</td></tr><tr><td style="text-align:left;">Exceptions</td><td style="text-align:left;">方法表</td><td style="text-align:left;">方法抛出的异常</td></tr><tr><td style="text-align:left;">EncloseingMethod</td><td style="text-align:left;">类文件</td><td style="text-align:left;">仅当一个类为局部类或者匿名内部类时才能拥有这个属性,这个属性用于标识这个类所在的外围方法</td></tr><tr><td style="text-align:left;">InnerClass</td><td style="text-align:left;">类文件</td><td style="text-align:left;">内部类列表</td></tr><tr><td style="text-align:left;">LineNumberTable</td><td style="text-align:left;">Code属性</td><td style="text-align:left;">Java源码的行号与字节码指令的对应关系</td></tr><tr><td style="text-align:left;">LocalVariableTable</td><td style="text-align:left;">Code属性</td><td style="text-align:left;">方法的局部变量描述</td></tr><tr><td style="text-align:left;">StackMapTable</td><td style="text-align:left;">Code属性</td><td style="text-align:left;">JDK1.6中新增的属性,供新的类型检查检验器检查和处理目标方法的局部变量和操作数有所需要的类是否匹配</td></tr><tr><td style="text-align:left;">Signature</td><td style="text-align:left;">类、方法、字段表</td><td style="text-align:left;">用于执行泛型情况下的方法签名</td></tr><tr><td style="text-align:left;">SourceFile</td><td style="text-align:left;">类文件</td><td style="text-align:left;">记录源文件名称</td></tr><tr><td style="text-align:left;">SourceDebugExtension</td><td style="text-align:left;">类文件</td><td style="text-align:left;">用于存储额外的调试信息</td></tr><tr><td style="text-align:left;">Synthetic</td><td style="text-align:left;">类、方法、字段表</td><td style="text-align:left;">标志方法或字段为编译器自动生成的</td></tr><tr><td style="text-align:left;">LocalVariableTypeTable</td><td style="text-align:left;">类</td><td style="text-align:left;">使用特征签名代替描述符，是为了引入泛型语法之后能描述泛型参数化类型而添加</td></tr><tr><td style="text-align:left;">RuntimeVisibleAnnotations</td><td style="text-align:left;">类、方法、字段表</td><td style="text-align:left;">为动态注解提供支持</td></tr><tr><td style="text-align:left;">RuntimeInvisibleAnnotations</td><td style="text-align:left;">类、方法、字段表</td><td style="text-align:left;">用于指明哪些注解是运行时不可见的</td></tr><tr><td style="text-align:left;">RuntimeVisibleParameterAnnotations</td><td style="text-align:left;">方法表</td><td style="text-align:left;">作用与RuntimeVisibleAnnotations属性类似，只不过作用对象为方法</td></tr><tr><td style="text-align:left;">RuntimeInvisibleParameterAnnotations</td><td style="text-align:left;">方法表</td><td style="text-align:left;">作用与RuntimelnvisibleAnnotations属性类似，作用对象哪个为方法参数</td></tr><tr><td style="text-align:left;">AnnotationDefault</td><td style="text-align:left;">方法表</td><td style="text-align:left;">用于记录注解类元素的默认值</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><p><img src="`+F+`" alt="1605611596272"></p><h4 id="部分属性详解" tabindex="-1">部分属性详解 <a class="header-anchor" href="#部分属性详解" aria-label="Permalink to “部分属性详解”">​</a></h4><p><strong>ConstantValue 属性</strong></p><p>ConstantValue 属性表示一个常量字段的值。位于 field_info 结构的属性表中</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ConstantValue_attribute {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    u2 attribute_name_index;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    u4 attribute_length;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    u2 constantvalue_index; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//字段值在常量池中的索引，常量池在该索引处的项给出该属性表示的常量值。(例如，值是 long 型的，在常量池中便是 CONSTANT_Long)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>Deprecated 属性</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Deprecated_attribute {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    u2 attribute_name_index;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    u4 attribute_length;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>Code 属性</strong></p><p>Code 属性就是存放方法体里面的代码，但是，并非所有方法表都有 Code 属性，像接口或者抽象方法，他们没有具体的方法体，因此也就不会有 Code 属性了</p><p>Code 属性表的结构，如下：</p><table tabindex="0"><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">名称</th><th style="text-align:left;">数量</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">u2</td><td style="text-align:left;">attribute_name_index</td><td style="text-align:left;">1</td><td style="text-align:left;">属性名索引</td></tr><tr><td style="text-align:left;">u4</td><td style="text-align:left;">attribute_length</td><td style="text-align:left;">1</td><td style="text-align:left;">属性长度</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">max_stack</td><td style="text-align:left;">1</td><td style="text-align:left;">操作数栈深度的最大值</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">max_locals</td><td style="text-align:left;">1</td><td style="text-align:left;">局部变量表所需的存续空间</td></tr><tr><td style="text-align:left;">u4</td><td style="text-align:left;">code_length</td><td style="text-align:left;">1</td><td style="text-align:left;">字节码指令的长度</td></tr><tr><td style="text-align:left;">u1</td><td style="text-align:left;">code</td><td style="text-align:left;">code_length</td><td style="text-align:left;">存储字节码指令</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">exception_table_length</td><td style="text-align:left;">1</td><td style="text-align:left;">异常表长度</td></tr><tr><td style="text-align:left;">exception_info</td><td style="text-align:left;">exception_table</td><td style="text-align:left;">exception_length</td><td style="text-align:left;">异常表</td></tr><tr><td style="text-align:left;">u2</td><td style="text-align:left;">attributes_count</td><td style="text-align:left;">1</td><td style="text-align:left;">Code中的属性集合计数器</td></tr><tr><td style="text-align:left;">arrtibute_info</td><td style="text-align:left;">attributes</td><td style="text-align:left;">attributes_count</td><td style="text-align:left;">属性集合</td></tr></tbody></table><p>可以看到：Code 属性表的前两项跟属性表是一致的，即 Code 属性表遵循属性表的结构，后面那些则是他自定义的结构。</p><p><strong>InnerClasses 属性</strong></p><p>为了方便说明特别定义一个表示类或接口的 Class 格式为 C。如果 C 的常量池中包含某个 CONSTANT_Class_info 成员，且这个成员所表示的类或接口不属于任何一个包，那么 C 的 ClassFile 结构的属性表中就必须含有对应的 InnerClasses 属性。InnerClasses 属性是在 JDK 1.1 中为了支持内部类和内部接口而引入的，位于 ClassFile 结构的属性表。</p><p><strong>LineNumberTable 属性</strong></p><p>LineNumberTable 属性是可选变长属性，位于 Code 结构的属性表。</p><p>LineNumberTable 属性是<span style="color:red;">用来描述 Java 源码行号与字节码行号之间的对应关系</span>，这个属性可以用来在调试的时候定位代码执行的行数。</p><ul><li><span style="color:blue;">start_pc，即字节码行号；line_number，即 Java 源代码行号</span></li></ul><p>在 Code 属性的属性表中，LineNumberTable 属性可以按照任意顺序出现，此外，多个 LineNumberTable 属性可以共同表示一个行号在源文件中表示的内容，即 LineNumberTable 属性不需要与源文件的行一一对应。</p><p>LineNumberTable 属性表结构：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LineNumberTable_attribute {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    u2 attribute_name_index;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    u4 attribute_length;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    u2 line_number_table_length;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        u2 start_pc;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        u2 line_number;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } line_number_table[line_number_table_length];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>LocalVariableTable 属性</strong></p><p>LocalVariableTable 是可选变长属性，位于 Code 属性的属性表中。它被调试器**用于确定方法在执行过程中局部变量的信息。**在 Code 属性的属性中，LocalVariableTable 属性可以按照任意顺序出现。Code 属性中的每个局部变量最多只能有一个 LocalVariableTable 属性。</p><ul><li>start_pc + length 表示这个变量在字节码中的生命周期起始和结束的偏移位置(this 生命周期从头0到结尾10)</li><li>index 就是这个变量在局部变量表中的槽位(槽位可复用)</li><li>name 就是变量名称</li><li>Descriptor 表示局部变量类型描述</li></ul><p>LocalVariableTable 属性表结构：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LocalVariableTable_attribute {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    u2 attribute_name_index;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    u4 attribute_length;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    u2 local_variable_table_length;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        u2 start_pc;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        u2 length;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        u2 name_index;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        u2 descriptor_index;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        u2 index;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } local_variable_table[local_variable_table_length];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>Signature 属性</strong></p><p>Signature 属性是可选的定长属性，位于 ClassFile，field_info 或 method_info 结构的属性表中。在 Java 语言中，任何类、接口、初始化方法或成员的泛型签名如果包含了类型变量(Type Variables)或参数化类型(Parameterized Types)，则 Signature 属性会为它记录泛型签名信息。</p><p><strong>SourceFile 属性</strong></p><p>SourceFile 属性结构</p><table tabindex="0"><thead><tr><th>类型</th><th>名称</th><th>数量</th><th>含义</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td><td>属性名索引</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td><td>属性长度</td></tr><tr><td>u2</td><td>sourcefile_index</td><td>1</td><td>源码文件索引</td></tr></tbody></table><p>可以看到，其长度总是固定的8个字节</p><p><strong>其他属性</strong></p><p>Java 虚拟机中预定义的属性有20多个，这里就不一一介绍了，通过上面几个属性的介绍，只要领会其精髓，其他属性的解读也是易如反掌</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to “小结”">​</a></h3><p>本章主要介绍了 Class 文件的基本格式</p><p>随着 Java 平台的不断发展，在将来，Class 文件的内容也一定会做进一步的扩充，但是其基本的格式和结构不会做重大调整</p><p>从 Java 虚拟机的角度看，通过 Class 文件，可以让更多的计算机语言支持 Java 虚拟机平台。因此，Class 文件结构不仅仅是 Java 虚拟机的执行入口，更是 Java 生态圈的基础和核心</p><h2 id="使用-javap-指令解析-class-文件" tabindex="-1">使用 javap 指令解析 Class 文件 <a class="header-anchor" href="#使用-javap-指令解析-class-文件" aria-label="Permalink to “使用 javap 指令解析 Class 文件”">​</a></h2><p>自己分析类文件结构太麻烦了！Oracle 提供了 javap 工具</p><p>当然这些信息中，有些信息(如本地变量表、指令和代码行偏移量映射表、常量池中方法的参数名称等等)需要在使用 javac 编译成 Class 文件时，指定参数才能输出，比如，你直接 javac xx.java，就不会再生成对应的局部变量表等信息，如果你使用 javac -g xx.java 就可以生成所有相关信息了。如果你使用的是 Eclipse，则默认情况下，Eclipse 在编译时会帮你生成局部变量表、指令和代码行盘一辆映射表等信息</p><p>通过反编译生成的汇编代码，我们可以深入的了解 Java 代码的工作机制。比如我们看到的 i++，这行代码实际运行时是先获取变量 i 的值，然后将这个值加1，最后再将加1后的值赋值给变量 i</p><h3 id="解析字节码的作用" tabindex="-1">解析字节码的作用 <a class="header-anchor" href="#解析字节码的作用" aria-label="Permalink to “解析字节码的作用”">​</a></h3><p>通过反编译生成的字节码文件，我们可以深入的了解 Java 代码的工作机制。但是，自己分析类文件结构太麻烦了，除了使用第三方的 jclasslib 工具之外，Oracle 官方也提供了工具：javap</p><p>javap 是 JDK 自带的反解析工具。它的作用就是根据 Class 字节码文件，反解析出当前类对应的 Code 区(字节码指令)、局部变量表、异常表和代码行偏移量映射表、常量池等信息</p><p>通过局部变量表，我们可以查看局部变量的作用域范围、所在槽位等信息，甚至可以看到槽位复用等信息</p><h3 id="javac-g-操作" tabindex="-1">javac -g 操作 <a class="header-anchor" href="#javac-g-操作" aria-label="Permalink to “javac -g 操作”">​</a></h3><p>解析字节码文件得到的信息中，有些信息(如局部变量表、指令和代码行偏移量映射表、常量池中方法的参数名称等等)需要在使用 javac 编译成 Class 文件时，指定参数才能输出</p><p>比如，你直接 <code>javac xx.java</code>，就不会在生成对应的局部变量表等信息，如果你使用 <code>javac -g xx.java</code> 就可以生成所有相关信息了。如果你使用的 Eclipse 或 IDEA，则默认情况下，Eclipse、IDEA 在编译时会帮你生成局部变量表、指令和代码行偏移量映射表等信息</p><h3 id="javap-的用法" tabindex="-1">javap 的用法 <a class="header-anchor" href="#javap-的用法" aria-label="Permalink to “javap 的用法”">​</a></h3><p>javap 的用法格式：javap</p><p>其中，classes 就是你要反编译的 Class 文件</p><p>在命令行中直接输入 javap 或 javap -help 可以看到 javap 的 options 有如下选项：</p><p><img src="`+T+'" alt="image-20240527194008831"></p><p>一般常用的是 -v -l -c 三个选项</p><ul><li><p>javap -l 会输出行号和本地变量表信息</p></li><li><p>javap -c 会对当前 Class 字节码进行反编译生成汇编代码</p></li><li><p>javap -v classxx 除了包含 -c 内容外，还会输出行号、局部变量表信息、常量池等信息</p></li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h3><ol><li><p>通过 javap 命令可以查看一个 Java 类反汇编得到的 Class 文件版本号、常量池、访问标识、变量表、指令代码行号表等信息。不显式类索引、父类索引、接口索引集合、&lt;clinit&gt;()、&lt;init&gt;()等结构</p></li><li><p>通过对前面的例子代码反汇编文件的简单分析，可以发现，一个方法的执行通常会涉及下面几块内存的操作</p><ol><li>Java 栈中：局部变量表、操作数栈</li><li>Java 堆： 通过对象的地址引用去操作</li><li>常量池</li><li>其他如帧数据区、方法区的剩余部分等情况，测试中没有显示出来，这里说明一下</li></ol></li><li><p>平常，我们比较关注的是 Java 类中每个方法的反汇编中的指令操作过程，这些指令都是顺序执行的，可以参考官方文档查看每个指令含义。</p></li></ol>',244);function j(t,P,I,O,V,L){const i=d,n=r("ClientOnly");return a(),h("div",null,[J,g(n,null,{default:k(()=>{var s,l;return[(((s=t.$frontmatter)==null?void 0:s.aside)??!0)&&(((l=t.$frontmatter)==null?void 0:l.showArticleMetadata)??!0)?(a(),y(i,{key:0,article:t.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),S])}const U=p(N,[["render",j]]);export{q as __pageData,U as default};
