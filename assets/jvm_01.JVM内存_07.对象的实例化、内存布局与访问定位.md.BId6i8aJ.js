import{_ as p}from"./chunks/ArticleMetadata.H12JcJLK.js";import{_ as r,E as h,c as o,o as n,j as l,I as k,aj as c,w as d,b as g,e as A,a as m}from"./chunks/framework._AF764y6.js";const _="/assets/%E7%AC%AC10%E7%AB%A0_%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80_opY1RAOpmx.BX6SFn8W.jpg",C="/assets/%E7%AC%AC10%E7%AB%A0_%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96_5T45YQcUzG.esQWippS.jpg",u="/assets/image-20240323101504817_Rj3eF4nFTn.C9SYfHt-.png",D="/assets/image-20240323103038476_S49zpSJcW9.Dz1fZ_b8.png",y="/assets/image-20240323103258804_VSsojgqP9E.DgiW-VqA.png",B="/assets/image-20240323103742258_Kuy79BqjgW.DC3Lg3FS.png",E="/assets/image-20240323103855648_nTxMT4SoZM.CQ6WaGtq.png",w=JSON.parse('{"title":"对象的实例化、内存布局与访问定位","description":"","frontmatter":{"title":"对象的实例化、内存布局与访问定位","date":"2024-03-22T11:03:25.000Z","permalink":"/jvm/f0f933/","categories":["后端","JVM虚拟机","JVM内存"],"tags":[null],"author":"Manaphy"},"headers":[],"relativePath":"jvm/01.JVM内存/07.对象的实例化、内存布局与访问定位.md","filePath":"jvm/01.JVM内存/07.对象的实例化、内存布局与访问定位.md","lastUpdated":1743612544000}'),b={name:"jvm/01.JVM内存/07.对象的实例化、内存布局与访问定位.md"},F=l("h1",{id:"对象的实例化、内存布局与访问定位",tabindex:"-1"},[m("对象的实例化、内存布局与访问定位 "),l("a",{class:"header-anchor",href:"#对象的实例化、内存布局与访问定位","aria-label":"Permalink to “对象的实例化、内存布局与访问定位”"},"​")],-1),f=c('<img src="'+_+'" alt="第10章_对象的内存布局"><h2 id="对象的实例化" tabindex="-1">对象的实例化 <a class="header-anchor" href="#对象的实例化" aria-label="Permalink to “对象的实例化”">​</a></h2><img src="'+C+`" alt="第10章_对象的实例化"><h3 id="创建对象的方式" tabindex="-1">创建对象的方式 <a class="header-anchor" href="#创建对象的方式" aria-label="Permalink to “创建对象的方式”">​</a></h3><ul><li><p>new：最常见的方式、Xxx的静态方法，XxxBuilder/XxxFactory的静态方法</p></li><li><p>Class的newInstance方法：反射的方式，只能调用空参的构造器，权限必须是public</p></li><li><p>Constructor的newInstance(XXX)：反射的方式，可以调用空参、带参的构造器，权限没有要求</p></li><li><p>使用clone()：不调用任何的构造器，要求当前的类需要实现Cloneable接口，实现clone()</p></li><li><p>使用序列化：从文件中、从网络中获取一个对象的二进制流</p></li><li><p>第三方库 Objenesis</p></li></ul><h3 id="创建对象的步骤" tabindex="-1">创建对象的步骤 <a class="header-anchor" href="#创建对象的步骤" aria-label="Permalink to “创建对象的步骤”">​</a></h3><p><strong>1.判断对象对应的类是否加载、链接、初始化</strong></p><p>虚拟机遇到一条new指令，首先去检查这个指令的参数能否在Metaspace的常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解析和初始化。（即判断类元信息是否存在）。如果没有，那么在双亲委派模式下，使用当前类加载器以ClassLoader+包名+类名Key进行查找对应的.class文件。如果没有找到文件，则抛出ClassNotFoundException异常，如果找到，则进行类加载，并生成对应的Class类对象。</p><p><strong>2.为对象分配内存</strong></p><p>首先计算对象占用空间大小，接着在堆中划分一块内存给新对象。如果实例成员变量是引用变量，仅分配引用变量空间即可，即4个字节大小。</p><ul><li><p>如果内存规整，使用指针碰撞</p><p>如果内存是规整的，那么虚拟机将采用的是指针碰撞法（Bump The Pointer）来为对象分配内存。意思是所有用过的内存在一边，空闲的内存在另外一边，中间放着一个指针作分界点的指示器，分配内存就仅仅是把指针向空闲那边挪动一段与对象大小相等的距离罢了。如果垃圾收集器选择的是Serial、ParNew这种基于压缩算法的，虚拟机采用这种分配方式。一般使用带有compact(整理)过程的收集器时，使用指针碰撞。</p></li><li><p>如果内存不规整，虚拟机需要维护一个列表，使用空闲列表分配</p><p>如果内存不是规整的，已使用的内存和未使用的内存相互交错，那么虚拟机将采用的是空闲列表法来为对象分配内存。意思是虚拟机维护了一个列表，记录上哪些内存块是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。这种分配方式成为“空闲列表（Free List）”。</p></li></ul><p>说明：选择哪种分配方式由Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。</p><p><strong>3.处理并发安全问题</strong></p><p>在分配内存空间时，另外一个问题是及时保证new对象时候的线程安全性：创建对象是非常频繁的操作，虚拟机需要解决并发问题。虚拟机采用了两种方式解决并发问题：</p><ul><li><p>CAS(Compare And Swap)失败重试、区域加锁：保证指针更新操作的原子性；</p></li><li><p>TLAB 把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲区，(TLAB，Thread Local Allocation Buffer)虚拟机是否使用TLAB，可以通过<code>-XX:+/-UseTLAB</code>参数来设定。</p></li></ul><p><strong>4.初始化分配到的空间</strong></p><p>内存分配结束，虚拟机将分配到的内存空间都初始化为零值（不包括对象头）。这一步保证了对象的实例字段在Java代码中可以不用赋初始值就可以直接使用，程序能访问到这些字段的数据类型所对应的零值。</p><p><strong>5.设置对象的对象头</strong></p><p>将对象的所属类（即类的元数据信息）、对象的HashCode和对象的GC信息、锁信息等数据存储在对象的对象头中。这个过程的具体设置方式取决于JVM实现。</p><p><strong>6.执行init方法进行初始化</strong></p><p>在Java程序的视角看来，初始化才正式开始。初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量。</p><p>因此一般来说（由字节码中是否跟随有invokespecial指令所决定），new指令之后会接着就是执行方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全创建出来。</p><hr><p><strong>给对象属性赋值的操作</strong></p><ul><li><p>属性的默认初始化</p></li><li><p>显式初始化</p></li><li><p>代码块中初始化</p></li><li><p>构造器中初始化</p></li></ul><p><strong>对象实例化的过程总结</strong></p><ol><li>加载类元信息</li><li>为对象分配内存</li><li>处理并发问题</li><li>属性的默认初始化（零值初始化）</li><li>设置对象头信息</li><li>属性的显示初始化、代码块中初始化、构造器中初始化</li></ol><h2 id="对象的内存布局" tabindex="-1">对象的内存布局 <a class="header-anchor" href="#对象的内存布局" aria-label="Permalink to “对象的内存布局”">​</a></h2><h3 id="对象头-header" tabindex="-1"><strong>对象头(Header)</strong> <a class="header-anchor" href="#对象头-header" aria-label="Permalink to “对象头(Header)”">​</a></h3><p>对象头包含了两部分，分别是运行时元数据(Mark Word)和类型指针。如果是数组，还需要记录数组的长度</p><p><strong>运行时元数据</strong></p><ul><li>哈希值（HashCode）</li><li>GC分代年龄</li><li>锁状态标志</li><li>线程持有的锁</li><li>偏向线程ID</li><li>翩向时间戳</li></ul><p><strong>类型指针</strong></p><p>指向类元数据InstanceKlass，确定该对象所属的类型。</p><h3 id="实例数据-instance-data" tabindex="-1">实例数据(Instance Data) <a class="header-anchor" href="#实例数据-instance-data" aria-label="Permalink to “实例数据(Instance Data)”">​</a></h3><p>它是对象真正存储的有效信息，包括程序代码中定义的各种类型的字段（包括从父类继承下来的和本身拥有的字段）</p><ul><li>相同宽度的字段总是被分配在一起</li><li>父类中定义的变量会出现在子类之前</li><li>如果CompactFields参数为true(默认为true)：子类的窄变量可能插入到父类变量的空隙</li></ul><h3 id="对齐填充-padding" tabindex="-1">对齐填充(Padding) <a class="header-anchor" href="#对齐填充-padding" aria-label="Permalink to “对齐填充(Padding)”">​</a></h3><p>不是必须的，也没有特别的含义，仅仅起到占位符的作用</p><h3 id="举例" tabindex="-1">举例 <a class="header-anchor" href="#举例" aria-label="Permalink to “举例”">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1001</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Account</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> acct;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;匿名客户&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        acct </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Account</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> CustomerTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cust</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>图示</strong></p><img src="`+u+'" alt="image-20240323101504817"><p><strong>小结</strong></p><img src="'+D+'" alt="image-20240323103038476"><h2 id="对象的访问定位" tabindex="-1">对象的访问定位 <a class="header-anchor" href="#对象的访问定位" aria-label="Permalink to “对象的访问定位”">​</a></h2><div class="tip custom-block"><p class="custom-block-title">VM是如何通过栈帧中的对象引用访问到其内部的对象实例呢？</p><p>定位，通过栈上reference访问</p><img src="'+y+'" alt="image-20240323103258804"></div><p><strong>对象的主要访问方式主要有两种<span style="color:red;">句柄访问</span>和<span style="color:red;">直接指针</span>。</strong></p><h3 id="句柄访问" tabindex="-1">句柄访问 <a class="header-anchor" href="#句柄访问" aria-label="Permalink to “句柄访问”">​</a></h3><img src="'+B+'" alt="image-20240323103742258"><div class="tip custom-block"><p class="custom-block-title">好处</p><p>reference中存储稳定句柄地址，对象被移动（垃圾收集时移动对象很普遍）时只会改变句柄中实例数据指针即可，reference本身不需要被修改。</p></div><h3 id="直接引用-hotspot采用" tabindex="-1">直接引用(Hotspot采用) <a class="header-anchor" href="#直接引用-hotspot采用" aria-label="Permalink to “直接引用(Hotspot采用)”">​</a></h3><img src="'+E+'" alt="image-20240323103855648"><div class="tip custom-block"><p class="custom-block-title">好处</p><p>直接指针是局部变量表中的引用，直接指向堆中的实例，在对象实例中有类型指针，指向的是方法区中的对象类型数据。</p></div>',54);function v(s,x,P,T,S,V){const t=p,e=h("ClientOnly");return n(),o("div",null,[F,k(e,null,{default:d(()=>{var a,i;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((i=s.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(n(),g(t,{key:0,article:s.$frontmatter},null,8,["article"])):A("",!0)]}),_:1}),f])}const J=r(b,[["render",v]]);export{w as __pageData,J as default};
