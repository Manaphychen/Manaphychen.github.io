import{_ as t}from"./chunks/ArticleMetadata.H12JcJLK.js";import{_ as r,E as o,c,o as l,j as p,I as h,aj as d,w as k,b as g,e as y,a as m}from"./chunks/framework._AF764y6.js";const u="/assets/1710432012635_CwDMuuqSlY.qDqyFbHF.png",b="/assets/1710432525088_axX2mkgxBs.DzPks9yj.png",v="/assets/1710433257871_QKzrNiLoCa.BknqRpAt.png",_="/assets/1710438657530_KN5opD1jW4.DnbPUb1T.png",C="/assets/1710439614713_Ntu0dfeeYb.WlUZaJZs.png",A="/assets/1710440587234_X9TAv7zzgL.TRNKiqjJ.png",f="/assets/1710440545658_HqOFEI1Ncx.DxZ8uCtT.png",D="/assets/image-20240315022826773_46F2oF30cp.D2pMoVW8.png",J="/assets/image-20240315022926178_W5Qe8VIqwy.B0MjRlhq.png",F="/assets/image-20240315023017373_cIXBsFnC12.B7Q2CJJP.png",B="/assets/image-20240315023056912_hz5NbU1Bii.DFxNAKkQ.png",x="/assets/1710442073705_cD144SzglL.DwNQYkS0.jpg",P="/assets/1710494798369_1uhIceobdO.CfgM6Vqw.png",w=JSON.parse('{"title":"虚拟机栈","description":"","frontmatter":{"title":"虚拟机栈","date":"2024-03-14T21:53:54.000Z","permalink":"/jvm/stack/","categories":["后端","JVM虚拟机","JVM内存"],"tags":[null],"author":"Manaphy"},"headers":[],"relativePath":"jvm/01.JVM内存/03.虚拟机栈.md","filePath":"jvm/01.JVM内存/03.虚拟机栈.md","lastUpdated":1743620201000}'),E={name:"jvm/01.JVM内存/03.虚拟机栈.md"},S=p("h1",{id:"虚拟机栈",tabindex:"-1"},[m("虚拟机栈 "),p("a",{class:"header-anchor",href:"#虚拟机栈","aria-label":"Permalink to “虚拟机栈”"},"​")],-1),V=d('<h2 id="虚拟机栈概述" tabindex="-1">虚拟机栈概述 <a class="header-anchor" href="#虚拟机栈概述" aria-label="Permalink to “虚拟机栈概述”">​</a></h2><h3 id="内存中的栈和堆" tabindex="-1">内存中的栈和堆 <a class="header-anchor" href="#内存中的栈和堆" aria-label="Permalink to “内存中的栈和堆”">​</a></h3><p><span style="color:red;">栈是运行时单位，而堆是存储的单位。</span></p><p>即: 栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。堆解决的是数据存储的问题，即数据怎么放、放在哪儿。</p><h3 id="虚拟机栈基本内容" tabindex="-1">虚拟机栈基本内容 <a class="header-anchor" href="#虚拟机栈基本内容" aria-label="Permalink to “虚拟机栈基本内容”">​</a></h3><blockquote><p>Java虚拟机栈(Java Virtual Machine Stack)，早期也叫Java栈。</p><p>每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧(Stack Frame)，对应着一次次的Java方法调用。</p><p><span style="color:red;">是线程私有的。生命周期和线程一致。主管Java程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。</span></p></blockquote><p><strong>栈的特点(优点)</strong></p><ul><li><p>栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器。</p></li><li><p>JVM直接对Java栈的操作只有两个:</p><ul><li><p>每个方法执行，伴随着进栈(入栈、压栈)</p></li><li><p>执行结束后的出栈工作</p></li></ul></li><li><p>对于栈来说不存在垃圾回收问题</p></li></ul><img src="'+u+'" alt="img"><p><strong>栈中可能出现的异常</strong></p><p>Java虚拟机规范允许<span style="color:red;">Java栈的大小是动态的或者是固定不变的</span>。</p><ul><li>如果采用固定大小的Java虚拟机栈，那每一个线程的Java虛拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过Java虚拟机栈允许的最大容量，Java虚拟机将会抛出一个<code>StackOverflowError</code>异常。</li><li>如果Java虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那Java虚拟机将会抛出一个<code>OutOfMemoryError</code>异常。</li></ul><h2 id="栈的存储单位" tabindex="-1">栈的存储单位 <a class="header-anchor" href="#栈的存储单位" aria-label="Permalink to “栈的存储单位”">​</a></h2><p><strong>栈中存储什么</strong></p><p>每个线程都有自己的栈，栈中的数据都是以<span style="color:red;">栈帧(Stack Frame)的格式存在</span>。</p><p>在这个线程上正在执行的每个方法都各自对应一个栈帧(Stack Frame)。</p><p>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息。</p><p><strong>栈运行原理</strong></p><ul><li>JVM直接对Java栈的操作只有两个，就是对栈帧的<span style="color:red;">压栈</span>和<span style="color:red;">出栈</span>，<span style="color:blue;">遵循“先进后出”/“后进先出”原则</span>。</li><li>在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧(栈顶栈帧)是有效的，这个栈帧被称为<span style="color:red;">当前栈帧(Current Frame)</span>，与当前栈帧相对应的方法就是<span style="color:red;">当前方法(CurrentMethod)</span>，定义这个方法的类就是<span style="color:red;">当前类(Current Class)</span> 。</li><li>执行引擎运行的所有字节码指令只针对当前栈帧进行操作。</li><li>如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前帧。</li></ul><img src="'+b+'"><ul><li>不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧之中引用另外一个线程的栈帧。</li><li>如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧。</li><li>Java方法有两种返回函数的方式，<span style="color:red;">一种是正常的函数返回，使用return指令;另外一种是抛出异常。不管使用哪种方式，都会导致栈帧被弹出</span>。</li></ul><p><strong>栈帧的内部结构</strong></p><p>每个栈帧中存储着:</p><ul><li><a href="#局部变量表"><span style="color:red;">局部变量表(Local variables)</span></a></li><li><a href="#操作数栈"><span style="color:red;">操作数栈(operand Stack) </span></a></li><li><a href="#动态链接">动态链接(Dynamic Linking)</a></li><li><a href="#方法返回地址">方法返回地址(Return Address)</a></li><li><a href="#一些附加信息">一些附加信息</a></li></ul><img src="'+v+'"><h2 id="局部变量表" tabindex="-1">局部变量表 <a class="header-anchor" href="#局部变量表" aria-label="Permalink to “局部变量表”">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to “概述”">​</a></h3><p>局部变量表也被称之为局部变量数组或本地变量表。</p><p><span style="color:red;">定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量</span>，这些数据类型包括各类基本数据类型、对象引用(reference) ，以及returnAddress类型。</p><p>由于局部变量表是建立在线程的栈上，是线程的私有数据，因此<span style="color:red;">不存在数据安全问题</span>。</p><p><span style="color:red;">局部变量表所需的容量大小是在编译期确定下来的</span>，并保存在方法的Code属性的maximum local variables数据项中。在方法运行期间是不会改变局部变量表的大小的。</p><p><span style="color:red;">方法嵌套调用的次数由栈的大小决定</span>。一般来说，<span style="color:red;">栈越大，方法嵌套调用次数越多</span>。对一个函数而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增大的需求。进而函数调用就会占用更多的栈空间，导致其嵌套调用次数就会减少。</p><p><span style="color:red;">局部变量表中的变量只在当前方法调用中有效</span>。在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。<span style="color:red;">当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁</span>。</p><h3 id="关于slot的理解" tabindex="-1"><strong>关于Slot的理解</strong> <a class="header-anchor" href="#关于slot的理解" aria-label="Permalink to “关于Slot的理解”">​</a></h3><p>参数值的存放总是在局部变量数组的index0开始，到数组长度-1的索引结束。</p><p>局部变量表<span style="color:red;">最基本的存储单元是Slot(变量槽)</span></p><p>局部变量表中存放编译期可知的各种基本数据类型(8种)，引用类型(reference)，returnAddress类型的变量。</p><p>在局部变量表里，<span style="color:red;">32位以内的类型只占用一个slot(包括returnAddress类型)，64位的类型(long和double)占用两个slot</span>。</p><ul><li>byte、short、char 在存储前被转换为int, boolean也被转换为int, 0表示false，非0表示true。 <ul><li>long和double 则占据两个slot。</li></ul></li></ul><p>JVM会为局部变量表中的每一个slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值。</p><p>当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会<span style="color:red;">按照顺序被复制</span>到局部变量表中的每一个slot上。</p><p><span style="color:red;">如果需要访问局部变量表中一个64bit的局部变量值时，只需要使用前一个索引即可</span>。(比如:访问long或double类型变量)</p><p>如果当前帧是由构造方法或者实例方法创建的，那么<span style="color:red;">该对象引用this将会存放在index为0的slot处</span>，其余的参数按照参数表顺序继续排列。</p><img src="'+_+`"><p><strong>Slot的重复利用</strong></p><p><span style="color:red;">栈帧中的局部变量表中的槽位是可以重用的</span>，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变量就很有可能会复用过期局部变量的槽位，从而<span style="color:red;">达到节省资源的目的</span>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> SlotTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> localVar1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> localVar2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 此时的b就会复用a的槽位</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><img src="`+C+'"><h3 id="静态变量与局部变量的对比" tabindex="-1">静态变量与局部变量的对比 <a class="header-anchor" href="#静态变量与局部变量的对比" aria-label="Permalink to “静态变量与局部变量的对比”">​</a></h3><p>参数表分配完毕之后，再根据方法体内定义的变量的顺序和作用域分配。</p><p>我们知道类变量表有两次初始化的机会，第一次是在“<span style="color:red;">准备阶段</span>”，执行系统初始化，对类变量设置零值，另一次则是在“<span style="color:red;">初始化</span>”阶段，赋予程序员在代码中定义的初始值。</p><p>和类变量初始化不同的是，局部变量表不存在系统初始化的过程，这意味着一旦定义了局部变量则必须人为的初始化，否则无法使用。</p><p><strong>变量的分类</strong></p><p>按照数据类型分: 1:基本数据类型 2:引用数据类型</p><p>按照在类中声明的位置分:</p><ol><li>成员变量: 在使用前，都经历过默认初始化复制 <ol><li>类变量: linking的prepare阶段: 给类变量默认赋值 --&gt; initial阶段:给类变量显式赋值即静态代码块赋值</li><li>实例变量: 随着对象的创建，会在堆空间中分配实例变量空间，并进行默认赋值</li></ol></li><li>局部变量:在使用前，必须进行显式赋值的! 否则，编译不通过。</li></ol><h3 id="补充说明" tabindex="-1">补充说明 <a class="header-anchor" href="#补充说明" aria-label="Permalink to “补充说明”">​</a></h3><p>在栈帧中，与性能调优关系最为密切的部分就是前面提到的局部变量表。在方法执行时，虚拟机使用局部变量表完成方法的传递。</p><p><span style="color:red;">局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收。</span></p><h2 id="操作数栈" tabindex="-1">操作数栈 <a class="header-anchor" href="#操作数栈" aria-label="Permalink to “操作数栈”">​</a></h2><h3 id="概述-1" tabindex="-1">概述 <a class="header-anchor" href="#概述-1" aria-label="Permalink to “概述”">​</a></h3><p>每一个独立的栈帧中除了包含局部变量表以外，还包含一个后进先出(Last-In-First-Out)的操作数栈，也可以称之为表达式栈(Expression Stack)。</p><p><span style="color:red;">操作数栈，在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈(push)和出栈(pop)。</span></p><ul><li><p>某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈。使用它们后再把结果压入栈。</p></li><li><p>比如：执行复制、交换、求和等操作</p></li></ul><img src="'+A+'"><img src="'+f+'"><p>操作数栈，<span style="color:red;">主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间</span>。</p><p>操作数栈就是JVM执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，<span style="color:red;">这个方法的操作数栈是空的</span>。</p><p>每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译期就定义好了，保存在方法的Code属性中，为max_stack的值。</p><p>栈中的任何一个元素都是可以任意的Java数据类型。</p><ul><li>32bit的类型占用一个栈单位深度</li><li>64bit的类型占用两个栈单位深度</li></ul><p>操作数栈<span style="color:red;">并非采用访问索引的方式来进行数据访问</span>的，而是只能通过标准的入栈(push)和出栈(pop) 操作来完成一次数据访问。</p><p><span style="color:red;">如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中</span>，并更新PC寄存器中下一条需要执行的字节码指令。</p><p>操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译器期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证。</p><p>另外，我们说Java虚拟机的<span style="color:red;">解释引擎是基于栈的执行引擎</span>，其中的栈指的就是操作数栈。</p><h3 id="代码追踪" tabindex="-1">代码追踪 <a class="header-anchor" href="#代码追踪" aria-label="Permalink to “代码追踪”">​</a></h3><p>:::: tabs cache-lifetime=&quot;5&quot; :options=&quot;{ useUrlFragment: false }&quot; ::: tab Step1 <img src="'+D+'" alt="image-20240315022826773"> ::: ::: tab Step2 <img src="'+J+'" alt="image-20240315022926178"></p><p>::: ::: tab Step3 <img src="'+F+'" alt="image-20240315023017373"> ::: ::: tab Step4 <img src="'+B+'" alt="image-20240315023056912"> ::: ::::</p><h3 id="栈顶缓存-top-of-stack-cashing-技术" tabindex="-1">栈顶缓存(Top-of-Stack Cashing)技术 <a class="header-anchor" href="#栈顶缓存-top-of-stack-cashing-技术" aria-label="Permalink to “栈顶缓存(Top-of-Stack Cashing)技术”">​</a></h3><p>前面提过，基于栈式架构的虚拟机所使用的零地址指令更加紧凑，但完成一项操作的时候必然需要使用更多的入栈和出栈指令，这同时也就意味着将需要更多的指令分派(instruction dispatch)次数和内存读/写次数。</p><p>由于操作数是存储在内存中的，因此频繁地执行内存读/写操作必然会影响执行速度。为了解决这个问题，Hotspot JVM的设计者们提出了栈顶缓存(ToS, Top-of-stack Cashing)技术，<strong>将栈顶元素全部缓存在物理CPU的寄存器中，以此降低对内存的读/写次数，提升执行引擎的执行效率。</strong></p><h2 id="动态链接" tabindex="-1">动态链接 <a class="header-anchor" href="#动态链接" aria-label="Permalink to “动态链接”">​</a></h2><blockquote><p>或指向运行时常量池的方法引用</p></blockquote><p>每一个栈帧内部都包含一个指向<span style="color:blue;">运行时常量池</span>中<span style="color:red;">该栈帧所属方法的引用</span>。包含这个引用的目的就是为了支持当前方法的代码能够实现<span style="color:red;">动态链接(Dynamic Linking)</span>。比如: invokedynamic指令</p><p>在Java源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用(Symbolic Reference) 保存在class文件的常量池里。比如:描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么<span style="color:red;">动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</span>。</p><img src="'+x+'"><h2 id="方法的调用" tabindex="-1">方法的调用 <a class="header-anchor" href="#方法的调用" aria-label="Permalink to “方法的调用”">​</a></h2><p>在JVM中，将符号引用转换为调用方法的直接引用与方法的绑定机制相关。</p><p>::: note 静态链接</p><p>当一个字节码文件被装载进JVM内部时，如果被调用的<span style="color:blue;">目标方法在编译期可知</span>，且运行期保持不变时。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接。</p><p>:::</p><p>::: note 动态链接</p><p>如果<span style="color:blue;">被调用的方法在编译期无法被确定下来</span>，也就是说，只能够在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也就被称之力动态链接。</p><p>:::</p><p>对应的方法的绑定机制为：早期绑定(Early Binding)和晚期绑定(Late Binding)。<span style="color:blue;">绑定是一个字段、方法或者类在符号引用被替换直接引用的过程，这仅仅发生一次</span>。</p><p>::: note 早期绑定</p><p>早期绑定就是指被调用的<span style="color:blue;">目标方法如果在编译期可知，且运行期保持不变</span>时，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换光直接引用。</p><p>:::</p><p>::: note 晚期绑定</p><p>如果<span style="color:blue;">被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法</span>，这种绑定方式也就被称之为晚期绑定。</p><p>:::</p><p>随着高级语言的横空出世，类似于Java一样的基于面向对象的编程语言如今越来越多，尽管这类编程语言在语法风格上存在一定的差别，但是它们彼此之间始终保持着一个共性，那就是都支持封装、继承和多态等面向对象特性，既然<span style="color:red;">这一类的编程语言具备多态特性，那么自然也就具备早期绑定和晚期绑定两种绑定方式</span>。</p><p>Java中任何一个普通的方法其实都具备虚函数的特征，它们相当于C++语言中的虚函数(C++中则需要使用关键字virtual来显式定义)。如果在Java程序中不希望某个方法拥有虚函数的特征时，则可以使用关键字final来标记这个方法。</p><h3 id="虚方法和非虚方法" tabindex="-1">虚方法和非虚方法 <a class="header-anchor" href="#虚方法和非虚方法" aria-label="Permalink to “虚方法和非虚方法”">​</a></h3><div class="tip custom-block"><p class="custom-block-title">非虚方法</p><p>如果方法在编译期就确定了具体的调用版本，这个版本在运行时是不可变的。这样的方法称为非虚方法。</p><p>静态方法、私有方法、final方法、实例构造器、父类方法都是非虚方法。</p><p>其他方法称内虚方法。</p></div><p>虚拟机中提供了以下几条方法调用指令：</p><p><strong>普通调用指令：</strong></p><ol><li><span style="color:blue;">invokestatic： 调用静态方法，解析阶段确定唯一方法版本</span></li><li><span style="color:blue;">invokespecial：调用&lt;init&gt;方法、私有及父类方法，解析阶段确定唯一方法版本</span></li><li>invokevirtual：调用所有虚方法</li><li>invokeinterface： 调用接口方法</li></ol><p><strong>动态调用指令</strong>：</p><ol start="5"><li>invokedynamic：动态解析出需要调用的方法，然后执行</li></ol><p>前四条指令固化在虚拟机内部，方法的调用执行不可人为干预，而invokedynamic指令则支持由用户确定方法版本。<span style="color:red;">其中invokestatic指令和invokespecial指令调用的方法称为非虚方法，其余的（final修饰的除外）称为虚方法。</span></p><h3 id="关于invokedynamic指令" tabindex="-1">关于invokedynamic指令 <a class="header-anchor" href="#关于invokedynamic指令" aria-label="Permalink to “关于invokedynamic指令”">​</a></h3><p>JVM字节码指令集一直比较稳定，一直到Java7中才增加了一个invokedynamic指令，这是<span style="color:red;">Java为了实现『动态类型语言』支持而做的一种改进。</span></p><p>但是在Java7中并没有提供直接生成invokedynamic指令的方法，需要借助ASM这种底层字节码工具来产生invokedynamic指令。<span style="color:blue;">直到Java8的Lambda表达式的出现，invokedynamic指令的生成，在Java中才有了直接的生成方式。</span></p><p>Java7中增加的动态语言类型支持的本质是对Java虚拟机规范的修改，而不是对Java语言规则的修改，这一块相对来讲比较复杂，增加了虚拟机中的方法调用，最直接的受益者就是运行在Java平台的动态语言的编译器。</p><div class="tip custom-block"><p class="custom-block-title">动态类型语言与静态类型语言</p><p>动态类型语言和静态类型语言两者的区别就在于对类型的检查是在编译期还是在运行期，满足前者就是静态类型语言，反之是动态类型语言。</p><p>说的再直白一点就是，<span style="color:blue;">静态类型语言是判断变量自身的类型信息；动态类型语言是判断变量值的类型信息，变量没有类型信息，变量值才有类型信息</span>，这是动态语言的一个重要特征。</p></div><h3 id="方法重写的本质" tabindex="-1">方法重写的本质 <a class="header-anchor" href="#方法重写的本质" aria-label="Permalink to “方法重写的本质”">​</a></h3><p><strong>Java 语言中方法重写的本质：</strong></p><ol><li><p>找到操作数栈项的第一个元素所执行的对象的实际类型，记作C。</p></li><li><p>如果在类型 C 中找到与常量中的描述符合简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过，则返回 <code>java.lang.IllegalAccessError</code> 异常。</p></li><li><p>否则，按照继承关系从下往上依次对 C 的各个父类进行第 2 步的搜索和验证过程。</p></li><li><p>如果始终没有找到合适的方法，则抛出 <code>java.lang.AbstractMethodError</code> 异常。</p></li></ol><div class="tip custom-block"><p class="custom-block-title">IllegalAccessError介绍</p><p>程序试图访问或修改一个属性或调用一个方法，这个属性或方法，你没有权限访问。一般的，这个会引起编译器异常。这个错误如果发生在运行时，就说明一个类发生了不兼容的改变。</p></div><h3 id="虚方法表" tabindex="-1">虚方法表 <a class="header-anchor" href="#虚方法表" aria-label="Permalink to “虚方法表”">​</a></h3><p>在面向对象的编程中，会很频繁的使用到动态分派，如果在每次动态分派的过程中都要重新在类的方法元数据中搜索合适的目标的话就可能影响到执行效率。因此，<span style="color:blue;">为了提高性能</span>，JVM采用在类的方法区建立一个<span style="color:red;">虚方法表(virtual method table)</span>（非虚方法不会出现在表中）来实现。<span style="color:red;">使用索引表来代替查找</span>。</p><p>每个类中都有一个虚方法表，表中存放着各个方法的实际入口。</p><div class="tip custom-block"><p class="custom-block-title">那么虚方法表什么时候被创建？</p><p>虚方法表会在类加载的链接阶段被创建并开始初始化，类的变量初始值准备完成之后，JVM会把该类的方法表也初始化完毕。</p></div><img src="'+P+'"><h2 id="方法返回地址" tabindex="-1">方法返回地址 <a class="header-anchor" href="#方法返回地址" aria-label="Permalink to “方法返回地址”">​</a></h2><blockquote><p>存放调用该方法的pc寄存器的值。</p></blockquote><p>一个方法的结束，有两种方式：</p><ol><li><p>正常执行完成</p></li><li><p>出现未处理的异常，非正常退出</p></li></ol><p>无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置。方法正常退出时，<span style="color:red;">调用者的pc计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址</span>。而通过异常退出的，返回地址是要通过异常表来确定，栈帧中一般不会保存这部分信息。</p><p>当一个方法开始执行后，只有两种方式可以退出这个方法：</p><p>1、执行引擎遇到任意一个方法返回的字节码指令(return)，会有返回值传递给上层的方法调用者，简称正常完成出口；</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>一个方法在正常调用完成之后究竞需要使用哪一个返回指令还需要根据方法返回值的实际数据类型而定。</p><p>在字节码指令中，返回指令包含ireturn(当返回值是boolean、byte、char、 short和int类型时使用)、lreturn、freturn、dreturn以及areturn，另外还有一个return指令供声明为void的方法、实例初始化方法、类和接口的初始化方法使用。</p></div><p>2、在方法执行的过程中遇到了异常(Exception)，并且这个异常没有在方法内进行处理，也就是只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出。简称<span style="color:red;">异常完成出口</span>。</p><p>方法执行过程中抛出异常时的异常处理，存储在一个异常处理表，方便在发生异常的时候找到处理异常的代码。</p><p>本质上，方法的退出就是当前栈帧出栈的过程。此时，需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置PC寄存器值等，让调用者方法继续执行下去。</p><p><span style="color:red;">正常完成出口和异常完成出口的区别在于: 通过异常完成出口退出的不会给他的上层调用者产生任何的返回值。</span></p><h2 id="一些附加信息" tabindex="-1">一些附加信息 <a class="header-anchor" href="#一些附加信息" aria-label="Permalink to “一些附加信息”">​</a></h2><p>栈帧中还允许携带与Java虚拟机实现相关的一些附加信息。例如，对程序调试提供支持的信息。</p>',139);function M(a,q,T,j,N,I){const e=t,n=o("ClientOnly");return l(),c("div",null,[S,h(n,null,{default:k(()=>{var s,i;return[(((s=a.$frontmatter)==null?void 0:s.aside)??!0)&&(((i=a.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(l(),g(e,{key:0,article:a.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),V])}const $=r(E,[["render",M]]);export{w as __pageData,$ as default};
