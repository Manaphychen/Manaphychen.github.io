import{_ as h}from"./chunks/ArticleMetadata.H12JcJLK.js";import{_ as p,E as k,c as d,o as t,j as l,I as r,aj as o,w as g,b as y,e as c,a as A}from"./chunks/framework._AF764y6.js";const F="/assets/P2xzWT.BI5gSHA2.png",D="/assets/BSLGVH.CrucgKbL.png",C="/assets/OQpA2l.DBeHdikt.png",_="/assets/qHPmrH.RBCYm41q.png",I=JSON.parse('{"title":"数据库的设计规范及调优策略","description":"","frontmatter":{"title":"数据库的设计规范及调优策略","date":"2023-11-02T09:48:34.000Z","permalink":"/mysql/des_spec/","categories":["数据库","MySQL"],"tags":["MySQL"],"author":"Manaphy"},"headers":[],"relativePath":"database/MySQL/122.数据库的设计规范及调优策略.md","filePath":"database/MySQL/122.数据库的设计规范及调优策略.md","lastUpdated":1743620201000}'),E={name:"database/MySQL/122.数据库的设计规范及调优策略.md"},B=l("h1",{id:"数据库的设计规范及调优策略",tabindex:"-1"},[A("数据库的设计规范及调优策略 "),l("a",{class:"header-anchor",href:"#数据库的设计规范及调优策略","aria-label":"Permalink to “数据库的设计规范及调优策略”"},"​")],-1),m=o('<h2 id="_1-范-式" tabindex="-1">1. 范 式 <a class="header-anchor" href="#_1-范-式" aria-label="Permalink to “1. 范 式”">​</a></h2><blockquote><p><strong>在关系型数据库中，关于数据表设计的基本原则、规则就称为范式。</strong> 可以理解为，一张数据表的设计结构需要满足的某种设计标准的级别。要想设计一个结构合理的关系型数据库，必须满足一定的范式。</p></blockquote><p>目前关系型数据库有六种常见范式，按照范式级别，从低到高分别是：<strong>第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）</strong>。</p><p><img src="'+F+'" alt="image.png"></p><h3 id="键和相关属性的概念" tabindex="-1">键和相关属性的概念 <a class="header-anchor" href="#键和相关属性的概念" aria-label="Permalink to “键和相关属性的概念”">​</a></h3><p>范式的定义会使用到主键和候选键，数据库中的键(Key) 由一个或者多个属性组成。数据表中常用的几种键和属性的定义:</p><ul><li><code>超键</code>：能唯一标识元组的属性集叫做超键。</li><li><code>候选键</code>：如果超键不包括多余的属性，那么这个超键就是候选键。</li><li><code>主键</code>：用户可以从候选键中选择一 个作为主键。</li><li><code>外键</code>：如果数据表R1中的某属性集不是R1的主键，而是另一个数据表R2的主键，那么这个属性集就是数据表R1的外键。</li><li><code>主属性</code>：包含在任- -候选键中的属性称为主属性。</li><li><code>非主属性</code>：与主属性相对，指的是不包含在任何一一个候选键中的属性。</li></ul><p>通常，我们也将候选键称之为“<code>码</code>”，把主键也称为“<code>主码</code>”。因为键可能是由多个属性组成的，针对单个属性，我</p><p>们还可以用主属性和非主属性来进行区分。</p><p><strong>举例：</strong></p><p>这里有两个表：</p><p><code>球员表(player)</code>：球员编号 | 姓名 | 身份证号 | 年龄 | 球队编号</p><p><code>球队表(team)</code>：球队编号 | 主教练 | 球队所在地</p><ul><li><code>超键</code>：对于球员表来说，超键就是包括球员编号或者身份证号的任意组合，比如（球员编号）（球员编号，姓名）（身份证号，年龄）等。</li><li><code>候选键</code>：就是最小的超键，对于球员表来说，候选键就是（球员编号）或者（身份证号）。</li><li><code>主键</code>：我们自己选定，也就是从候选键中选择一个，比如（球员编号）。</li><li><code>外键</code>：球员表中的球队编号。</li><li><code>主属性、非主属性</code>：在球员表中，主属性是（球员编号）（身份证号），其他的属性（姓名）（年龄）（球队编号）都是非主属性。</li></ul><h3 id="第一范式-1st-nf" tabindex="-1">第一范式(1st NF) <a class="header-anchor" href="#第一范式-1st-nf" aria-label="Permalink to “第一范式(1st NF)”">​</a></h3><p>第一范式主要是确保数据表中每个字段的值必须具有<code>原子性</code>，也就是说数据表中每个字段的值为<code>不可再次拆分</code>的最小数据单元。</p><p>我们在设计某个字段的时候，对于字段X来说，不能把字段X拆分成字段X-1和字段X-2。事实上,任何的DBMS都会满足第一范式的要求， 不会将字段进行拆分。</p><p><strong>举例1：</strong></p><p>假设一家公司要存储员工的姓名和联系方式。它创建一个如下表：</p><p><img src="'+D+'" alt="image.png"></p><p>该表不符合 1NF ，因为规则说“表的每个属性必须具有原子（单个）值”，lisi和zhaoliu员工的emp_mobile 值违反了该规则。为了使表符合 1NF ，我们应该有如下表数据：</p><p><img src="'+C+'" alt="image.png"></p><p><strong>举例2：</strong></p><p>user 表的设计不符合第一范式</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>字段名称</strong></th><th style="text-align:left;"><strong>字段类型</strong></th><th style="text-align:left;"><strong>是否是主键</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">id</td><td style="text-align:left;">INT</td><td style="text-align:left;">是</td><td style="text-align:left;">主键id</td></tr><tr><td style="text-align:left;">username</td><td style="text-align:left;">VARCHAR(30)</td><td style="text-align:left;">否</td><td style="text-align:left;">用户名</td></tr><tr><td style="text-align:left;">password</td><td style="text-align:left;">VARCHAR(50)</td><td style="text-align:left;">否</td><td style="text-align:left;">密码</td></tr><tr><td style="text-align:left;">user_info</td><td style="text-align:left;">VARCHAR(255)</td><td style="text-align:left;">否</td><td style="text-align:left;">用户信息</td></tr></tbody></table><p>其中，user_info字段为用户信息，可以进一步拆分成更小粒度的字段，不符合数据库设计对第一范式的要求。将user_info拆分后如下：</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>字段名称</strong></th><th style="text-align:left;"><strong>字段类型</strong></th><th style="text-align:left;"><strong>是否是主键</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">id</td><td style="text-align:left;">INT</td><td style="text-align:left;">是</td><td style="text-align:left;">主键id</td></tr><tr><td style="text-align:left;">username</td><td style="text-align:left;">VARCHAR(30)</td><td style="text-align:left;">否</td><td style="text-align:left;">用户名</td></tr><tr><td style="text-align:left;">password</td><td style="text-align:left;">VARCHAR(50)</td><td style="text-align:left;">否</td><td style="text-align:left;">密码</td></tr><tr><td style="text-align:left;">real_name</td><td style="text-align:left;">VARCHAR(30)</td><td style="text-align:left;">否</td><td style="text-align:left;">真实姓名</td></tr><tr><td style="text-align:left;">phone</td><td style="text-align:left;">VARCHAR(12)</td><td style="text-align:left;">否</td><td style="text-align:left;">联系电话</td></tr><tr><td style="text-align:left;">address</td><td style="text-align:left;">VARCHAR(100)</td><td style="text-align:left;">否</td><td style="text-align:left;">家庭住址</td></tr></tbody></table><p>举例3：</p><p>属性的原子性是<code>主观的</code>。例如，employee关系中雇员姓名应当使用1个（fullname）、2个（firstname和lastname）还是3个（firstname、middlename和lastname）属性表示呢？答案取决于应用程序。如果应用程序需要分别处理雇员的姓名部分（如：用于搜索目的），则有必要把它们分开。否则，不需要。</p><p>表1</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>姓名</strong></th><th style="text-align:left;"><strong>年龄</strong></th><th style="text-align:left;"><strong>地址</strong></th></tr></thead><tbody><tr><td style="text-align:left;">张三</td><td style="text-align:left;">20</td><td style="text-align:left;">广东省广州市三元里78号</td></tr><tr><td style="text-align:left;">李四</td><td style="text-align:left;">24</td><td style="text-align:left;">广东省深圳市龙华新区</td></tr></tbody></table><p>表2</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>姓名</strong></th><th style="text-align:left;"><strong>年龄</strong></th><th style="text-align:left;"><strong>省</strong></th><th style="text-align:left;"><strong>市</strong></th><th style="text-align:left;"><strong>地址</strong></th></tr></thead><tbody><tr><td style="text-align:left;">张三</td><td style="text-align:left;">20</td><td style="text-align:left;">广东</td><td style="text-align:left;">广州</td><td style="text-align:left;">三元里78号</td></tr><tr><td style="text-align:left;">李四</td><td style="text-align:left;">24</td><td style="text-align:left;">广东</td><td style="text-align:left;">深圳</td><td style="text-align:left;">龙华新区</td></tr></tbody></table><h3 id="第二范式-2nd-nf" tabindex="-1">第二范式(2nd NF) <a class="header-anchor" href="#第二范式-2nd-nf" aria-label="Permalink to “第二范式(2nd NF)”">​</a></h3><p>第二范式要求，在满足第一范式的基础上，还要<strong>满足数据表里的每一条数据记录，都是可唯一-标识的。而且所有非主键字段，都必须完全依赖主键，不能只依赖主键的一部分</strong>。如果知道主键的所有属性的值，就可以检索到任何元组(行)的任何属性的任何值。(要求中的主键， 其实可以拓展替换为候选键)。</p><p><strong>举例1：</strong></p><p><code>成绩表</code>（学号，课程号，成绩）关系中，（学号，课程号）可以决定成绩，但是学号不能决定成绩，课程号也不能决定成绩，所以“（学号，课程号）→成绩”就是<code>完全依赖关系</code>。</p><p><strong>举例2：</strong></p><p><code>比赛表 player_game</code> ，里面包含球员编号、姓名、年龄、比赛编号、比赛时间和比赛场地等属性，这里候选键和主键都为（球员编号，比赛编号），我们可以通过候选键（或主键）来决定如下的关系：</p><p><code>(球员编号, 比赛编号) → (姓名, 年龄, 比赛时间, 比赛场地，得分)</code></p><p>但是这个数据表不满足第二范式，因为数据表中的字段之间还存在着如下的对应关系：</p><p><code>(球员编号) → (姓名，年龄)</code></p><p><code>(比赛编号) → (比赛时间, 比赛场地)</code></p><p>对于非主属性来说，并非完全依赖候选键。这样会产生怎样的问题呢？</p><ol><li><code>数据冗余</code>：如果一个球员可以参加 m 场比赛，那么球员的姓名和年龄就重复了 m-1 次。一个比赛也可能会有 n 个球员参加，比赛的时间和地点就重复了 n-1 次。</li><li><code>插入异常</code>：如果我们想要添加一场新的比赛，但是这时还没有确定参加的球员都有谁，那么就没法插入。</li><li><code>删除异常</code>：如果我要删除某个球员编号，如果没有单独保存比赛表的话，就会同时把比赛信息删除掉。</li><li><code>更新异常</code>：如果我们调整了某个比赛的时间，那么数据表中所有这个比赛的时间都需要进行调整，否则就会出现一场比赛时间不同的情况。</li></ol><p>为了避免出现上述的情况，我们可以把球员比赛表设计为下面的三张表。</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>表名</strong></th><th style="text-align:left;"><strong>属性（字段）</strong></th></tr></thead><tbody><tr><td style="text-align:left;">球员 player 表</td><td style="text-align:left;">球员编号、姓名和年龄等属性</td></tr><tr><td style="text-align:left;">比赛 game 表</td><td style="text-align:left;">比赛编号、比赛时间和比赛场地等属性</td></tr><tr><td style="text-align:left;">球员比赛关系 player_game 表</td><td style="text-align:left;">球员编号、比赛编号和得分等属性</td></tr></tbody></table><p>这样的话，每张数据表都符合第二范式，也就避免了异常情况的发生。</p><blockquote><p>1NF 告诉我们字段属性需要是原子性的，而 2NF 告诉我们一张表就是一个独立的对象，一张表只表达一个意思。</p></blockquote><h3 id="第三范式-3rd-nf" tabindex="-1">第三范式(3rd NF) <a class="header-anchor" href="#第三范式-3rd-nf" aria-label="Permalink to “第三范式(3rd NF)”">​</a></h3><p>第三范式是在第二范式的基础_上,确保数据表中的每-个非主键字段都和主键字段直接相关,也就是说，<strong>要求数据表中的所有非主键字段不能依赖于其他非主键学段</strong>。 (即， 不能存在非主属性A依赖于非主属性B,非主属性B依赖于主键C的情况，即存在“A-→B-→C”的决定关系)通俗地讲，该规则的意思是所有<code>非主键属性</code>之间不能有依赖关系，必须<code>相互独立</code>。</p><p>这里的主键可以拓展为候选键。</p><p><strong>举例1：</strong></p><p><code>部门信息表</code>：每个部门有部门编号（dept_id）、部门名称、部门简介等信息。</p><p><code>员工信息表</code>：每个员工有员工编号、姓名、部门编号。列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。</p><p>如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。</p><p><strong>举例2：</strong></p><p><code>球员player表</code>：球员编号、姓名、球队名称和球队主教练。现在，我们把属性之间的依赖关系画出来，如下图所示：</p><p><img src="'+_+`" alt="image.png"></p><p>你能看到球员编号决定了球队名称，同时球队名称决定了球队主教练，非主属性球队主教练就会传递依赖于球员编号，因此不符合 3NF 的要求。</p><p>如果要达到 3NF 的要求，需要把数据表拆成下面这样：</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>表名</strong></th><th style="text-align:left;"><strong>属性（字段）</strong></th></tr></thead><tbody><tr><td style="text-align:left;">球员表</td><td style="text-align:left;">球员编号、姓名和球队名称</td></tr><tr><td style="text-align:left;">球队表</td><td style="text-align:left;">球队名称、球队主教练</td></tr></tbody></table><blockquote><p>符合3NF后的数据模型通俗地讲，2NF和3NF通常以这句话概括：“每个非键属性依赖于键，依赖于整个键，并且除了键别无他物”。</p></blockquote><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to “小结”">​</a></h3><p>关于数据表的设计，有三个范式要遵循。</p><p>(1)第一范式(1NF) ，确保每列保持<code>原子性</code></p><p>数据库的每一列都是不可分割的原子数据项，不可再分的最小数据单元，而不能是集合、数组、记录等非原子数据项。</p><p>(2) 第二范式(2NF) ，确保每列都和主键<code>完全依赖</code></p><p>尤其在复合主键的情况下，非主键部分不应该依赖于部分主键。</p><p>(3) 第三范式(3NF) 确保每列都和主键列<code>直接相关</code>，而不是间接相关</p><p><strong>范式的优点</strong>：数据的标准化有助于消除数据库中的<code>数据冗余</code>，第三范式(3NF) 通常被认为在性能、扩展性和数据完整性方面达到了最好的平衡。</p><p><strong>范式的缺点</strong>：范式的使用，可能<code>降低查询的效率</code>。因为范式等级越高，设计出来的数据表就越多、越精细，数据的冗余度就越低，进行数据查询的时候就可能需要<code>关联多张表</code>，这不但代价昂贵，也可能使一些<code>索引策略无效</code>。</p><p>范式只是提出了设计的标准，实际上设计数据表时，未必一定要符合这些标准。开发中，我们会出现为了性能和读取效率违反范式化的原则，通过<code>增加少量的冗余</code>或重复的数据来提高数据库的<code>读性能</code>，减少关联查询，join 表的次数，实现<code>空间换取时间</code>的目的。因此在实际的设计过程中要理论结合实际，灵活运用。</p><blockquote><p>范式本身没有优劣之分，只有适用场景不同。没有完美的设计，只有合适的设计，我们在数据表的设计中，还需要根据需求将范式和反范式混合使用。</p></blockquote><h2 id="_2-反范式化" tabindex="-1">2. 反范式化 <a class="header-anchor" href="#_2-反范式化" aria-label="Permalink to “2. 反范式化”">​</a></h2><p>有的时候不能简单按照规范要求设计数据表，因为有的数据看似冗余，其实对业务来说十分重要。这个时候，我们就要遵循<code>业务优先</code>的原则，首先满足业务需求，再尽量减少冗余。</p><p>如果数据库中的数据量比较大，系统的UV和PV访问频次比较高,则完全按照MySQL的三大范式设计数据表,读数据时会产生大量的关联查询，在-定程度上会影响数据库的读性能。如果我们想对查询效率进行优化，<code>反范式优化</code>也是一种优化思路。此时，可以通过在数据表中<code>增加冗余字段</code>来提高数据库的读性能。</p><p><strong>举例1：</strong></p><p>员工的信息存储在 employee 表中，部门信息存储在 departments 表中。通过 employee 表中的department_id字段与 departments 表建立关联关系。如果要查询一个员工所在部门的名称：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> employee_id,department_name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> employee e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> departments d</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">department_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">department_id</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>果经常需要进行这个操作，连接查询就会浪费很多时间。可以在 employee 表中增加一个冗余字段department_name，这样就不用每次都进行连接操作了。</p><h3 id="反范式的新问题" tabindex="-1">反范式的新问题 <a class="header-anchor" href="#反范式的新问题" aria-label="Permalink to “反范式的新问题”">​</a></h3><ul><li>存储<code>空间变大</code>了</li><li>一个表中字段做了修改，另一个表中冗余的字段也需要做同步修改，否则<code>数据不一致</code></li><li>若采用存储过程来支持数据的更新、删除等额外操作，如果更新频繁，会非常<code>消耗系统资源</code></li><li>在<code>数据量小</code>的情况下，反范式不能体现性能的优势，可能还会让数据库的设计更加复杂</li></ul><h3 id="反范式的适用场景" tabindex="-1">反范式的适用场景 <a class="header-anchor" href="#反范式的适用场景" aria-label="Permalink to “反范式的适用场景”">​</a></h3><p>当冗余信息有价值或者能<code>大幅度提高查询效率</code>的时候，我们才会采取反范式的优化。</p><h4 id="_1-增加冗余字段的建议" tabindex="-1">1. 增加冗余字段的建议 <a class="header-anchor" href="#_1-增加冗余字段的建议" aria-label="Permalink to “1. 增加冗余字段的建议”">​</a></h4><p>增加冗余字段一定要符合如下两个条件。 只有满足这两个条件，才可以考虑增加冗余字段。</p><ol><li>这个冗余字段<code>不需要经常进行修改</code>;</li><li>这个冗余字段<code>查询的时候不可或缺</code>。</li></ol><h4 id="_2-历史快照、历史数据的需要" tabindex="-1">2. 历史快照、历史数据的需要 <a class="header-anchor" href="#_2-历史快照、历史数据的需要" aria-label="Permalink to “2. 历史快照、历史数据的需要”">​</a></h4><p>在现实生活中，我们经常需要一些冗余信息，比如订单中的收货人信息，包括姓名、电话和地址等。每次发生的<code>订单收货信息</code>都属于<code>历史快照</code>，需要进行保存，但用户可以随时修改自己的信息，这时保存这些冗余信息是非常有必要的。</p><p>反范式优化也常用在<code>数据仓库</code>的设计中，因为数据仓库通常<code>存储历史数据</code>，对增删改的实时性要求不强，对历史数据的分析需求强。这时适当允许数据的冗余度，更方便进行数据分析。</p><p>简单总结下数据仓库和数据库在使用上的区别：</p><ol><li>数据库设计的目的在于<code>捕获数据</code>，而数据仓库设计的目的在于<code>分析数据</code></li><li>数据库对数据的<code>增删改实时性</code>要求强，需要存储在线的用户数据，而数据仓库存储的一般是<code>历史数据</code></li><li>数据库设计需要<code>尽量避免冗余</code>，但为了提高查询效率也允许一定的<code>冗余度</code>，而数据仓库在设计上更偏向采用反范式设计。</li></ol><h2 id="_3-bcnf-巴斯范式" tabindex="-1">3. BCNF(巴斯范式) <a class="header-anchor" href="#_3-bcnf-巴斯范式" aria-label="Permalink to “3. BCNF(巴斯范式)”">​</a></h2><p>人们在3NF的基础上进行了改进，提出了<strong>巴斯范式(BCNF)</strong> ，也叫做<strong>巴斯-科德范式(Boyce-Codd Normal Form)</strong>。BCNF被认为没有新的设计规范加入，只是对第三范式中设计规范要求更强，使得数据库冗余度更小。</p><p>所以，称为是<code>修正的第三范式</code>，或<code>扩充的第三范式</code>，BCNF不被称为第四范式。</p><p>若一个关系达到了第三范式,并且它只有一个候选键，或者它的每个候选键都是单属性,则该关系自然达到BC范式。</p><p>一般来说， 一个数据库设计符合3NF或BCNF就可以了。</p><h2 id="_4-数据表的设计原则" tabindex="-1">4. 数据表的设计原则 <a class="header-anchor" href="#_4-数据表的设计原则" aria-label="Permalink to “4. 数据表的设计原则”">​</a></h2><p>综合以上内容，总结出数据表设计的一般原则：&quot;三少一多&quot;</p><ol><li><strong>数据表的个数越少越好</strong></li><li><strong>数据表中的字段个数越少越好</strong></li><li><strong>数据表中联合主键的字段个数越少越好</strong></li><li><strong>使用主键和外键越多越好</strong></li></ol><h2 id="_5-数据库对象编写建议" tabindex="-1">5. 数据库对象编写建议 <a class="header-anchor" href="#_5-数据库对象编写建议" aria-label="Permalink to “5. 数据库对象编写建议”">​</a></h2><h3 id="_5-1-关于库" tabindex="-1">5.1 关于库 <a class="header-anchor" href="#_5-1-关于库" aria-label="Permalink to “5.1 关于库”">​</a></h3><ol><li>【强制】库的名称必须控制在32个字符以内，只能使用英文字母、数字和下划线，建议以英文字母开头。</li><li>【强制】库名中英文 一律小写 ，不同单词采用 下划线 分割。须见名知意。</li><li>【强制】库的名称格式：业务系统名称_子系统名。</li><li>【强制】库名禁止使用关键字（如type,order等）。</li><li>【强制】创建数据库时必须 显式指定字符集 ，并且字符集只能是utf8或者utf8mb4。 创建数据库SQL举例：CREATE DATABASE crm_fund DEFAULT CHARACTER SET &#39;utf8&#39; ;</li><li>【建议】对于程序连接数据库账号，遵循 权限最小原则 使用数据库账号只能在一个DB下使用，不准跨库。程序使用的账号 原则上不准有drop权限 。</li><li>【建议】临时库以 tmp_ 为前缀，并以日期为后缀； 备份库以 bak_ 为前缀，并以日期为后缀。</li></ol><h3 id="_5-2-关于表、列" tabindex="-1">5.2 关于表、列 <a class="header-anchor" href="#_5-2-关于表、列" aria-label="Permalink to “5.2 关于表、列”">​</a></h3><ol><li>【强制】表和列的名称必须控制在32个字符以内，表名只能使用英文字母、数字和下划线，建议以 英文字母开头 。</li><li>【强制】 表名、列名一律小写 ，不同单词采用下划线分割。须见名知意。</li><li>【强制】表名要求有模块名强相关，同一模块的表名尽量使用 统一前缀 。比如：crm_fund_item</li><li>【强制】创建表时必须 显式指定字符集 为utf8或utf8mb4。</li><li>【强制】表名、列名禁止使用关键字（如type,order等）。</li><li>【强制】创建表时必须 显式指定表存储引擎 类型。如无特殊需求，一律为InnoDB。</li><li>【强制】建表必须有comment。</li><li>【强制】字段命名应尽可能使用表达实际含义的英文单词或 缩写 。如：公司 ID，不要使用 corporation_id, 而用corp_id 即可。</li><li>【强制】布尔值类型的字段命名为 is_描述 。如member表上表示是否为enabled的会员的字段命名为 is_enabled。</li><li>【强制】禁止在数据库中存储图片、文件等大的二进制数据通常文件很大，短时间内造成数据量快速增长，数据库进行数据库读取时，通常会进行大量的随机IO操作，文件很大时，IO操作很耗时。通常存储于文件服务器，数据库只存储文件地址信息。</li><li>【建议】建表时关于主键： 表必须有主键 (1)强制要求主键为id，类型为int或bigint，且为auto_increment 建议使用unsigned无符号型。 (2)标识表里每一行主体的字段不要设为主键，建议设为其他字段如user_id，order_id等，并建立unique key索引。因为如果设为主键且主键值为随机插入，则会导致innodb内部页分裂和大量随机I/O，性能下降。</li><li>【建议】核心表（如用户表）必须有行数据的 创建时间字段 （create_time）和 最后更新时间字段（update_time），便于查问题。</li><li>【建议】表中所有字段尽量都是 NOT NULL 属性，业务可以根据需要定义 DEFAULT值 。 因为使用NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问题。</li><li>【建议】所有存储相同数据的 列名和列类型必须一致 （一般作为关联列，如果查询时关联列类型不一致会自动进行数据类型隐式转换，会造成列上的索引失效，导致查询效率降低）。</li><li>【建议】中间表（或临时表）用于保留中间结果集，名称以 tmp_ 开头。备份表用于备份或抓取源表快照，名称以 bak_ 开头。中间表和备份表定期清理。</li><li>【示范】一个较为规范的建表语句：</li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> user_info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ( </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> unsigned </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AUTO_INCREMENT COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;自增主键&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`user_id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> bigint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;用户id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`username\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;真实姓名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`email\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;用户邮箱&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`nickname\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;昵称&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`birthday\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;生日&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`sex\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> tinyint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;性别&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`short_introduce\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;一句话介绍自己，最多50个汉字&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`user_resume\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;用户提交的简历存放地址&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`user_register_ip\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;用户注册时的源ip&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`create_time\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> timestamp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CURRENT_TIMESTAMP COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;创建时间&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`update_time\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> timestamp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CURRENT_TIMESTAMP </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CURRENT_TIMESTAMP COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;修改时间&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  \`user_review_status\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> tinyint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;用户资料审核状态，1为通过，2为审核中，3为未 通过，4为还未提交审核&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`id\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  UNIQUE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> KEY</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`uniq_user_id\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`user_id\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  KEY</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`idx_username\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`username\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  KEY</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`idx_create_time_status\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`create_time\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`user_review_status\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">InnoDB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">utf8 COMMENT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;网站用户基本信息&#39;</span></span></code></pre></div><h3 id="_5-3-关于索引" tabindex="-1">5.3 关于索引 <a class="header-anchor" href="#_5-3-关于索引" aria-label="Permalink to “5.3 关于索引”">​</a></h3><ol><li>【强制】InnoDB表必须主键为id int/bigint auto_increment，且主键值 禁止被更新 。</li><li>【强制】InnoDB和MyISAM存储引擎表，索引类型必须为 BTREE 。</li><li>【建议】主键的名称以 pk_ 开头，唯一键以 uni_ 或 uk_ 开头，普通索引以 idx_ 开头，一律使用小写格式，以字段的名称或缩写作为后缀。</li><li>【建议】多单词组成的columnname，取前几个单词首字母，加末单词组成column_name。如: sample 表 member_id 上的索引：idx_sample_mid。</li><li>【建议】单个表上的索引个数 不能超过6个 。</li><li>【建议】在建立索引时，多考虑建立 联合索引 ，并把区分度最高的字段放在最前面。</li><li>【建议】在多表 JOIN 的SQL里，保证被驱动表的连接列上有索引，这样JOIN 执行效率最高。</li><li>【建议】建表或加索引时，保证表里互相不存在 冗余索引 。 比如：如果表里已经存在key(a,b)，则key(a)为冗余索引，需要删除。</li></ol><h3 id="_5-4-sql编写" tabindex="-1">5.4 SQL编写 <a class="header-anchor" href="#_5-4-sql编写" aria-label="Permalink to “5.4 SQL编写”">​</a></h3><ol><li>【强制】程序端SELECT语句必须指定具体字段名称，禁止写成 *。</li><li>【建议】程序端insert语句指定具体字段名称，不要写成INSERT INTO t1 VALUES(…)。</li><li>【建议】除静态表或小表（100行以内），DML语句必须有WHERE条件，且使用索引查找。</li><li>【建议】INSERT INTO…VALUES(XX),(XX),(XX).. 这里XX的值不要超过5000个。 值过多虽然上线很快，但会引起主从同步延迟。</li><li>【建议】SELECT语句不要使用UNION，推荐使用UNION ALL，并且UNION子句个数限制在5个以内。</li><li>【建议】线上环境，多表 JOIN 不要超过5个表。</li><li>【建议】减少使用ORDER BY，和业务沟通能不排序就不排序，或将排序放到程序端去做。ORDER BY、GROUP BY、DISTINCT 这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。</li><li>【建议】包含了ORDER BY、GROUP BY、DISTINCT 这些查询的语句，WHERE 条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。</li><li>【建议】对单表的多次alter操作必须合并为一次对于超过100W行的大表进行alter table，必须经过DBA审核，并在业务低峰期执行，多个alter需整合在一起。 因为alter table会产生 表锁 ，期间阻塞对于该表的所有写入，对于业务可能会产生极大影响。</li><li>【建议】批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep。</li><li>【建议】事务里包含SQL不超过5个。因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等问题。</li><li>【建议】事务里更新语句尽量基于主键或UNIQUE KEY，如UPDATE… WHERE id=XX;</li></ol><h2 id="_6-数据库调优的措施" tabindex="-1">6. 数据库调优的措施 <a class="header-anchor" href="#_6-数据库调优的措施" aria-label="Permalink to “6. 数据库调优的措施”">​</a></h2><p><strong>调优的目标</strong></p><ul><li>尽可能 节省系统资源 ，以便系统可以提供更大负荷的服务。（吞吐量更大）</li><li>合理的结构设计和参数调整，以提高用户操作 响应的速度 。（响应速度更快）</li><li>减少系统的瓶颈，提高MySQL数据库整体的性能。</li></ul><p><strong>如何定位调优问题</strong></p><p>如何确定呢？一般情况下，有如下几种方式：</p><ul><li>**用户的反馈（主要） **</li><li>**日志分析（主要） **</li><li>**服务器资源使用监控 **</li><li>**数据库内部状况监控 **</li><li><strong>其它</strong></li></ul><p>除了活动会话监控以外，我们也可以对 事务 、 锁等待 等进行监控，这些都可以帮助我们对数据库的运行状态有更全面的认识。</p><p><strong>调优的维度和步骤</strong></p><p>我们需要调优的对象是整个数据库管理系统，它不仅包括 SQL 查询，还包括数据库的部署配置、架构等。从这个角度来说，我们思考的维度就不仅仅局限在 SQL 优化上了。通过如下的步骤我们进行梳理：</p><p>**第1步：选择适合的 DBMS **</p><p>**第2步：优化表设计 **</p><p><strong>第3步：优化逻辑查询</strong></p><p><strong>第4步：优化物理查询</strong></p><p>物理查询优化是在确定了逻辑查询优化之后，采用物理优化技术（比如索引等），通过计算代价模型对各种可能的访问路径进行估算，从而找到执行方式中代价最小的作为执行计划。在这个部分中，我们需要掌握的重点是对索引的创建和使用。</p><p><strong>第5步：使用 Redis 或 Memcached 作为缓存</strong></p><p>除了可以对 SQL 本身进行优化以外，我们还可以请外援提升查询的效率。</p><p>因为数据都是存放到数据库中，我们需要从数据库层中取出数据放到内存中进行业务逻辑的操作，当用户量增大的时候，如果频繁地进行数据查询，会消耗数据库的很多资源。如果我们将常用的数据直接放到内存中，就会大幅提升查询的效率。</p><p>键值存储数据库可以帮我们解决这个问题。</p><p>常用的键值存储数据库有 Redis 和 Memcached，它们都可以将数据存放到内存中。</p><p><strong>第6步：库级优化</strong></p><p><strong>1、读写分离</strong></p><p><strong>2、数据分片</strong></p><blockquote><p>但需要注意的是，分拆在提升数据库性能的同时，也会增加维护和使用成本。</p></blockquote><h2 id="_7-优化mysql服务器" tabindex="-1">7. 优化MySQL服务器 <a class="header-anchor" href="#_7-优化mysql服务器" aria-label="Permalink to “7. 优化MySQL服务器”">​</a></h2><h3 id="_7-1-优化服务器硬件" tabindex="-1">7.1 优化服务器硬件 <a class="header-anchor" href="#_7-1-优化服务器硬件" aria-label="Permalink to “7.1 优化服务器硬件”">​</a></h3><p>**服务器的硬件性能直接决定着MySQL数据库的性能。**硬件的性能瓶颈直接决定MySQL数据库的运行速度和效率。针对性能瓶颈提高硬件配置，可以提高MySQL数据库查询、更新的速度。</p><ol><li>配置较大的内存</li><li>配置高速磁盘系统</li><li>合理分布磁盘I/O</li><li>配置多处理器</li></ol><h3 id="_7-2-优化mysql的参数" tabindex="-1">7.2 优化MySQL的参数 <a class="header-anchor" href="#_7-2-优化mysql的参数" aria-label="Permalink to “7.2 优化MySQL的参数”">​</a></h3><ul><li><code>innodb_buffer_pool_size</code> ：这个参数是Mysql数据库最重要的参数之一，表示InnoDB类型的表和索引的最大缓存 。它不仅仅缓存索引数据 ，还会缓存表的数据 。这个值越大，查询的速度就会越快。但是这个值太大会影响操作系统的性能。</li><li><code>key_buffer_size</code> ：表示 索引缓冲区的大小 。索引缓冲区是所有的 线程共享 。增加索引缓冲区可以得到更好处理的索引（对所有读和多重写）。当然，这个值不是越大越好，它的大小取决于内存的大小。如果这个值太大，就会导致操作系统频繁换页，也会降低系统性能。对于内存在 4GB 左右的服务器该参数可设置为 256M 或 384M 。</li><li><code>table_cache</code> ：表示 同时打开的表的个数 。这个值越大，能够同时打开的表的个数越多。物理内存越大，设置就越大。默认为2402，调到512-1024最佳。这个值不是越大越好，因为同时打开的表太多会影响操作系统的性能。</li><li><code>query_cache_size</code> ：表示 查询缓冲区的大小 。可以通过在MySQL控制台观察，如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况，就要增加Query_cache_size的值；如果Qcache_hits的值非常大，则表明查询缓冲使用非常频繁，如果该值较小反而会影响效率，那么可以考虑不用查询缓存；Qcache_free_blocks，如果该值非常大，则表明缓冲区中碎片很多。MySQL8.0之后失效。该参数需要和query_cache_type配合使用。</li><li>query_cache_type 的值是0时，所有的查询都不使用查询缓存区。但是query_cache_type=0并不会导致MySQL释放query_cache_size所配置的缓存区内存。 <ul><li>当query_cache_type=1时，所有的查询都将使用查询缓存区，除非在查询语句中指定SQL_NO_CACHE ，如<code>SELECT SQL_NO_CACHE * FROM tbl_name</code>。</li><li>当query_cache_type=2时，只有在查询语句中使用 SQL_CACHE 关键字，查询才会使用查询缓存区。使用查询缓存区可以提高查询的速度，这种方式只适用于修改操作少且经常执行相同的查询操作的情况。</li></ul></li><li><code>sort_buffer_size</code> ：表示每个 需要进行排序的线程分配的缓冲区的大小 。增加这个参数的值可以提高 ORDER BY 或 GROUP BY 操作的速度。默认数值是2 097 144字节（约2MB）。对于内存在4GB左右的服务器推荐设置为6-8M，如果有100个连接，那么实际分配的总共排序缓冲区大小为100 × 6 ＝ 600MB。</li><li><code>join_buffer_size = 8M</code> ：表示 联合查询操作所能使用的缓冲区大小 ，和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。</li><li><code>read_buffer_size</code>：表示 每个线程连续扫描时为扫描的每个表分配的缓冲区的大小（字节） 。当线程从表中连续读取记录时需要用到这个缓冲区。SET SESSION read_buffer_size=n可以临时设置该参数的值。默认为64K，可以设置为4M。</li><li><code>innodb_flush_log_at_trx_commit</code> ：表示 何时将缓冲区的数据写入日志文件 ，并且将日志文件写入磁盘中。该参数对于innoDB引擎非常重要。该参数有3个值，分别为0、1和2。该参数的默认值为1。 <ul><li>值为 <code>0</code> 时，表示 每秒1次 的频率将数据写入日志文件并将日志文件写入磁盘。每个事务的commit并不会触发前面的任何操作。该模式速度最快，但不太安全，mysqld进程的崩溃会导致上一秒钟所有事务数据的丢失。</li><li>值为 <code>1</code> 时，表示 每次提交事务时 将数据写入日志文件并将日志文件写入磁盘进行同步。该模式是最安全的，但也是最慢的一种方式。因为每次事务提交或事务外的指令都需要把日志写入（flush）硬盘。</li><li>值为 <code>2</code> 时，表示 每次提交事务时 将数据写入日志文件， 每隔1秒 将日志文件写入磁盘。该模式速度较快，也比0安全，只有在操作系统崩溃或者系统断电的情况下，上一秒钟所有事务数据才可能丢失。</li></ul></li><li><code>innodb_log_buffer_size</code> ：这是 InnoDB 存储引擎的 事务日志所使用的缓冲区 。为了提高性能，也是先将信息写入 Innodb Log Buffer 中，当满足 innodb_flush_log_trx_commit 参数所设置的相应条件（或者日志缓冲区写满）之后，才会将日志写到文件（或者同步到磁盘）中。</li><li><code>max_connections</code>：表示 允许连接到MySQL数据库的最大数量 ，默认值是 151 。如果状态变量connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败，这是可以考虑增大max_connections 的值。在Linux 平台下，性能好的服务器，支持 500-1000 个连接不是难事，需要根据服务器性能进行评估设定。这个连接数 不是越大越好 ，因为这些连接会浪费内存的资源。过多的连接可能会导致MySQL服务器僵死。</li><li><code>back_log</code>：用于 控制MySQL监听TCP端口时设置的积压请求栈大小 。如果MySql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。5.6.6 版本之前默认值为 50 ， 之后的版本默认为 50 + （max_connections / 5）， 对于Linux系统推荐设置为小于512的整数，但最大不超过900。</li></ul><p>如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大back_log 的值。</p><ul><li><code>thread_cache_size</code> ： 线程池缓存线程数量的大小 ，当客户端断开连接后将当前线程缓存起来，当在接到新的连接请求时快速响应无需创建新的线程 。这尤其对那些使用短连接的应用程序来说可以极大的提高创建连接的效率。那么为了提高性能可以增大该参数的值。默认为60，可以设置为120。</li></ul><p>可以通过如下几个MySQL状态值来适当调整线程池的大小：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> like</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;Thread%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-------------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| Variable_name     | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-------------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| Threads_cached    | </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">     | </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| Threads_connected | </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">     | </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| Threads_created   | </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">     | </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| Threads_running   | </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">     | </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-------------------+-------+</span></span></code></pre></div><p>当 Threads_cached 越来越少，但 Threads_connected 始终不降，且 Threads_created 持续升高，可适当增加 thread_cache_size 的大小。</p><ul><li><code>wait_timeout</code> ：指定 一个请求的最大连接时间 ，对于4GB左右内存的服务器可以设置为5-10。</li><li><code>interactive_timeout</code> ：表示服务器在关闭连接前等待行动的秒数。</li></ul><p>这里给出一份my.cnf的参考配置：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[mysqld] </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">port</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3306</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">serverid</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">socket</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /tmp/mysql.sock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">skip-locking</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#避免MySQL的外部锁定，减少出错几率增强稳定性。 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">skip-name-resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#禁止MySQL对外部连接进行DNS解析，使用这一项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求！ </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">back_log</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 384</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">key_buffer_size</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 256M</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">max_allowed_packet</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 4M</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">thread_stack</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 256K</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">table_cache</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 128K</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sort_buffer_size</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 6M</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">read_buffer_size</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 4M</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">read_rnd_buffer_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">16M</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">join_buffer_size</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 8M</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">myisam_sort_buffer_size</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 64M</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">table_cache</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 512</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">thread_cache_size</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 64</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">query_cache_size</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 64M</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">tmp_table_size</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 256M</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">max_connections</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 768</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">max_connect_errors</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10000000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">wait_timeout</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">thread_concurrency</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#该参数取值为服务器逻辑CPU数量*2，在本例中，服务器有2颗物理CPU，而每颗物理CPU又支持H.T超线程，所以实际取值为4*2=8 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">skip-networking</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#开启该选项可以彻底关闭MySQL的TCP/IP连接方式，如果WEB服务器是以远程连接的方式访问MySQL数据库服务器则不要开启该选项！否则将无法正常连接！ </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">table_cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">innodb_additional_mem_pool_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">4M</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#默认为2M </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">innodb_flush_log_at_trx_commit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">innodb_log_buffer_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">2M</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#默认为1M </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">innodb_thread_concurrency</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#你的服务器CPU有几个就设置为几。建议用默认一般为8 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">tmp_table_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">64M</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#默认为16M，调到64-256最挂</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">thread_cache_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">query_cache_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">32M</span></span></code></pre></div><h2 id="_8-优化数据库结构" tabindex="-1">8. 优化数据库结构 <a class="header-anchor" href="#_8-优化数据库结构" aria-label="Permalink to “8. 优化数据库结构”">​</a></h2><h3 id="_8-1-拆分表-冷热数据分离" tabindex="-1">8.1 拆分表：冷热数据分离 <a class="header-anchor" href="#_8-1-拆分表-冷热数据分离" aria-label="Permalink to “8.1 拆分表：冷热数据分离”">​</a></h3><h3 id="_8-2-增加中间表" tabindex="-1">8.2 增加中间表 <a class="header-anchor" href="#_8-2-增加中间表" aria-label="Permalink to “8.2 增加中间表”">​</a></h3><h3 id="_8-3-增加冗余字段" tabindex="-1">8.3 增加冗余字段 <a class="header-anchor" href="#_8-3-增加冗余字段" aria-label="Permalink to “8.3 增加冗余字段”">​</a></h3><p>设计数据库表时应尽量遵循范式理论的规约，尽可能减少冗余字段，让数据库设计看起来精致、优雅。</p><p>但是，合理地加入冗余字段可以提高查询速度。</p><p>表的规范化程度越高，表与表之间的关系就越多，需要连接查询的情况也就越多。尤其在数据量大，而且需要频繁进行连接的时候，为了提升效率，我们也可以考虑增加冗余字段来减少连接。</p><h3 id="_8-4-优化数据类型" tabindex="-1">8.4 优化数据类型 <a class="header-anchor" href="#_8-4-优化数据类型" aria-label="Permalink to “8.4 优化数据类型”">​</a></h3><p>**情况1：对整数类型数据进行优化。 **</p><p>遇到整数类型的字段可以用 INT 型 。这样做的理由是，INT 型数据有足够大的取值范围，不用担心数据超出取值范围的问题。刚开始做项目的时候，首先要保证系统的稳定性，这样设计字段类型是可以的。但在数据量很大的时候，数据类型的定义，在很大程度上会影响到系统整体的执行效率。</p><p>对于 非负型 的数据（如自增ID、整型IP）来说，要优先使用无符号整型 UNSIGNED 来存储。因为无符号相对于有符号，同样的字节数，存储的数值范围更大。如tinyint有符号为-128-127，无符号为0-255，多出一倍的存储空间。</p><p><strong>情况2：既可以使用文本类型也可以使用整数类型的字段，要选择使用整数类型</strong>。</p><p>跟文本类型数据相比，大整数往往占用 更少的存储空间 ，因此，在存取和比对的时候，可以占用更少的内存空间。所以，在二者皆可用的情况下，尽量使用整数类型，这样可以提高查询的效率。如：将IP地址转换成整型数据。</p><p><strong>情况3：避免使用TEXT、BLOB数据类型</strong></p><p>**情况4：避免使用ENUM类型 **</p><p>**情况5：使用TIMESTAMP存储时间 **</p><p>**情况6：用DECIMAL代替FLOAT和DOUBLE存储精确浮点数 **</p><p><strong>总之，遇到数据量大的项目时，一定要在充分了解业务需求的前提下，合理优化数据类型，这样才能充分发挥资源的效率，使系统达到最优</strong>。</p><h3 id="_8-5-优化插入记录的速度" tabindex="-1">8.5 优化插入记录的速度 <a class="header-anchor" href="#_8-5-优化插入记录的速度" aria-label="Permalink to “8.5 优化插入记录的速度”">​</a></h3><h3 id="_8-6-使用非空约束" tabindex="-1">8.6 使用非空约束 <a class="header-anchor" href="#_8-6-使用非空约束" aria-label="Permalink to “8.6 使用非空约束”">​</a></h3><p><strong>在设计字段的时候，如果业务允许，建议尽量使用非空约束</strong></p><h3 id="_8-7-分析表、检查表与优化表" tabindex="-1">8.7 分析表、检查表与优化表 <a class="header-anchor" href="#_8-7-分析表、检查表与优化表" aria-label="Permalink to “8.7 分析表、检查表与优化表”">​</a></h3><h4 id="_1-分析表" tabindex="-1">1. 分析表 <a class="header-anchor" href="#_1-分析表" aria-label="Permalink to “1. 分析表”">​</a></h4><p>MySQL中提供了ANALYZE TABLE语句分析表，ANALYZE TABLE语句的基本语法如下：</p><p><code>ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name[,tbl_name]…</code></p><p>默认的，MySQL服务会将 ANALYZE TABLE语句写到binlog中，以便在主从架构中，从服务能够同步数据。 可以添加参数LOCAL 或者 NO_WRITE_TO_BINLOG取消将语句写到binlog中。</p><p>使用 ANALYZE TABLE 分析表的过程中，数据库系统会自动对表加一个 只读锁 。在分析期间，只能读取表中的记录，不能更新和插入记录。ANALYZE TABLE语句能够分析InnoDB和MyISAM类型的表，但是不能作用于视图。</p><p>ANALYZE TABLE分析后的统计结果会反应到 cardinality 的值，该值统计了表中某一键所在的列不重复的值的个数。**该值越接近表中的总行数，则在表连接查询或者索引查询时，就越优先被优化器选择使用。**也就是索引列的cardinality的值与表中数据的总条数差距越大，即使查询的时候使用了该索引作为查询条件，存储引擎实际查询的时候使用的概率就越小。下面通过例子来验证下。cardinality可以通过SHOW INDEX FROM 表名查看。</p><h4 id="_2-检查表" tabindex="-1">2. 检查表 <a class="header-anchor" href="#_2-检查表" aria-label="Permalink to “2. 检查表”">​</a></h4><p>MySQL中可以使用 CHECK TABLE 语句来检查表。CHECK TABLE语句能够检查InnoDB和MyISAM类型的表是否存在错误。CHECK TABLE语句在执行过程中也会给表加上 只读锁 。</p><p>对于MyISAM类型的表，CHECK TABLE语句还会更新关键字统计数据。而且，CHECK TABLE也可以检查视图是否有错误，比如在视图定义中被引用的表已不存在。该语句的基本语法如下：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CHECK</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tbl_name [, tbl_name] ... [option] ... </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">option</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {QUICK | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FAST</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | MEDIUM | EXTENDED | CHANGED}</span></span></code></pre></div><p>其中，tbl_name是表名；option参数有5个取值，分别是QUICK、FAST、MEDIUM、EXTENDED和CHANGED。各个选项的意义分别是：</p><ul><li><code>QUICK</code>：不扫描行，不检查错误的连接。</li><li><code>FAST</code>：只检查没有被正确关闭的表。</li><li><code>CHANGED</code>：只检查上次检查后被更改的表和没有被正确关闭的表。</li><li><code>MEDIUM</code>：扫描行，以验证被删除的连接是有效的。也可以计算各行的关键字校验和，并使用计算出的校验和验证这一点。</li><li><code>EXTENDED</code>：对每行的所有关键字进行一个全面的关键字查找。这可以确保表是100%一致的，但是花的时间较长。</li></ul><p>option只对MyISAM类型的表有效，对InnoDB类型的表无效。</p><h4 id="_3-优化表" tabindex="-1">3. 优化表 <a class="header-anchor" href="#_3-优化表" aria-label="Permalink to “3. 优化表”">​</a></h4><p><strong>方式1：OPTIMIZE TABLE</strong></p><p>MySQL中使用 OPTIMIZE TABLE 语句来优化表。但是，OPTILMIZE TABLE语句只能优化表中的VARCHAR 、 BLOB 或 TEXT 类型的字段。一个表使用了这些字段的数据类型，若已经 删除 了表的一大部分数据，或者已经对含有可变长度行的表（含有VARCHAR、BLOB或TEXT列的表）进行了很多 更新 ，则应使用OPTIMIZE TABLE来重新利用未使用的空间，并整理数据文件的 碎片 。</p><p>OPTIMIZE TABLE 语句对InnoDB和MyISAM类型的表都有效。该语句在执行过程中也会给表加上 只读锁 。</p><p>OPTILMIZE TABLE语句的基本语法如下：</p><p><code>OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</code></p><p>LOCAL | NO_WRITE_TO_BINLOG关键字的意义和分析表相同，都是指定不写入二进制日志。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> optimize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> student_info;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----------------------+----------+----------+-------------------------------------------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Table</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                | Op       | Msg_type | Msg_text                                                          |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----------------------+----------+----------+-------------------------------------------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">learndb</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">student_info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | optimize | note     | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Table</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> does </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">not</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> support optimize, doing recreate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> analyze </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instead</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">learndb</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">student_info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | optimize | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   | OK                                                                |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">----------------------+----------+----------+-------------------------------------------------------------------+</span></span></code></pre></div><p>执行完毕，Msg_text显示 <code>Table does not support optimize, doing recreate + analyze instead</code></p><p>原因是我服务器上的MySQL是InnoDB存储引擎。</p><p>到底优化了没有呢？看官网！</p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/optimize-table.html" target="_blank" rel="noreferrer">https://dev.mysql.com/doc/refman/8.0/en/optimize-table.html</a></p><p>在MyISAM中，是先分析这张表，然后会整理相关的MySQL datafile，之后回收未使用的空间；在InnoDB 中，回收空间是简单通过Alter table进行整理空间。在优化期间，MySQL会创建一个临时表，优化完成之后会删除原始表，然后会将临时表rename成为原始表。</p><blockquote><p>说明： 在多数的设置中，根本不需要运行OPTIMIZE TABLE。即使对可变长度的行进行了大量的更新，也不需要经常运行， 每周一次 或 每月一次 即可，并且只需要对 特定的表 运行。</p></blockquote><h3 id="_8-8-小结" tabindex="-1">8.8 小结 <a class="header-anchor" href="#_8-8-小结" aria-label="Permalink to “8.8 小结”">​</a></h3><p>上述这些方法都是有利有弊的。比如：</p><ul><li>修改数据类型，节省存储空间的同时，你要考虑到数据不能超过取值范围；</li><li>增加冗余字段的时候，不要忘了确保数据一致性；</li><li>把大表拆分，也意味着你的查询会增加新的连接，从而增加额外的开销和运维的成本。</li></ul><p>因此，你一定要结合实际的业务需求进行权衡。</p>`,201);function b(s,f,u,x,T,L){const e=h,n=k("ClientOnly");return t(),d("div",null,[B,r(n,null,{default:g(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),y(e,{key:0,article:s.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),m])}const S=p(E,[["render",b]]);export{I as __pageData,S as default};
