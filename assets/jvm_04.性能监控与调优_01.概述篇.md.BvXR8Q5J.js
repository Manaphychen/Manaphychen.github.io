import{_ as p}from"./chunks/ArticleMetadata.H12JcJLK.js";import{_ as r,E as o,c as d,o as e,j as n,I as c,aj as g,w as h,b as u,e as _,a as f}from"./chunks/framework._AF764y6.js";const O=JSON.parse('{"title":"概述篇","description":"","frontmatter":{"title":"概述篇","date":"2024-05-31T00:39:20.000Z","permalink":"/jvm/fbc026/","categories":["后端","JVM虚拟机","性能监控与调优"],"tags":[null],"author":"Manaphy"},"headers":[],"relativePath":"jvm/04.性能监控与调优/01.概述篇.md","filePath":"jvm/04.性能监控与调优/01.概述篇.md","lastUpdated":1743612544000}'),m={name:"jvm/04.性能监控与调优/01.概述篇.md"},b=n("h1",{id:"概述篇",tabindex:"-1"},[f("概述篇 "),n("a",{class:"header-anchor",href:"#概述篇","aria-label":"Permalink to “概述篇”"},"​")],-1),x=g(`<h2 id="_1-1-面试题" tabindex="-1">1.1 面试题 <a class="header-anchor" href="#_1-1-面试题" aria-label="Permalink to “1.1 面试题”">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>JVM性能调优都做了什么？</span></span>
<span class="line"><span>有做过JVM内存优化吗？</span></span>
<span class="line"><span>从SQL、JVM、架构、数据库四个方面讲讲优化思路</span></span>
<span class="line"><span>JVM的编译优化</span></span>
<span class="line"><span>jvm性能调优都做了什么</span></span>
<span class="line"><span>JVM诊断调优工具用过哪些？</span></span>
<span class="line"><span>jvm怎样调优，堆内存、栈空间设置多少合适</span></span>
<span class="line"><span>JVM相关的分析工具使用过的有哪些？具体的性能调优步骤如何</span></span>
<span class="line"><span>如何进行JVM调优？有哪些方法？</span></span>
<span class="line"><span>如何理解内存泄漏问题？有哪些情况会导致内存泄漏？如何解决？</span></span>
<span class="line"><span>JVM如何调优、参数怎么调？</span></span>
<span class="line"><span>从SQL、JVM、架构、数据库四个方面讲讲优化思路</span></span>
<span class="line"><span>JVM诊断调优工具用过哪些？</span></span>
<span class="line"><span>每秒几十万并发的秒杀系统为什么会频繁发生GC？</span></span>
<span class="line"><span>日均百万级交易系统如何优化JVM？</span></span>
<span class="line"><span>线上生产系统OOM如何监控及定位与解决？</span></span>
<span class="line"><span>高并发系统如何基于G1垃圾回收器优化性能？</span></span></code></pre></div><h2 id="_1-2-背景说明" tabindex="-1">1.2 背景说明 <a class="header-anchor" href="#_1-2-背景说明" aria-label="Permalink to “1.2 背景说明”">​</a></h2><p><strong>生产环境中的问题</strong></p><ul><li>生产环境发生了内存溢出该如何处理？</li><li>生产环境应该给服务器分配多少内存合适？</li><li>如何对垃圾回收器的性能进行调优？</li><li>生产环境CPU负载飙高该如何处理？</li><li>生产环境应该给应用分配多少线程合适？</li><li>不加log，如何确定请求是否执行了某一行代码？</li><li>不加log，如何实时查看某个方法的入参与返回值？</li></ul><p><strong>为什么要调优</strong></p><ul><li>防止出现OOM</li><li>解决OOM</li><li>减少Full GC出现的频率</li></ul><p><strong>不同阶段的考虑</strong></p><ul><li>上线前</li><li>项目运行阶段</li><li>线上出现OOM</li></ul><h2 id="_1-3-调优概述" tabindex="-1">1.3 调优概述 <a class="header-anchor" href="#_1-3-调优概述" aria-label="Permalink to “1.3 调优概述”">​</a></h2><p><strong>监控的依据</strong></p><ul><li>运行日志</li><li>异常堆栈</li><li>GC日志</li><li>线程快照</li><li>堆转储快照</li></ul><p><strong>调优的大方向</strong></p><ul><li>合理地编写代码</li><li>充分并合理的使用硬件资源</li><li>合理地进行JVM调优</li></ul><h2 id="_1-4-性能优化的步骤" tabindex="-1">1.4 性能优化的步骤 <a class="header-anchor" href="#_1-4-性能优化的步骤" aria-label="Permalink to “1.4 性能优化的步骤”">​</a></h2><p><strong>第1步：性能监控(发现问题)</strong></p><blockquote><p>一种以非强行或者入侵方式<strong>收集或查看</strong>应用运营性能数据的活动。</p><p>监控通常是指一种在生产、质量评估或者开发坏境下实施的带有<strong>预防或主动性</strong>的活动。</p><p>当应用相关干系人提出性能问题却<strong>没有提供足够多的线索</strong>时，首先我们需要进行性能监控，随后是性能分析。</p></blockquote><ul><li>GC频繁</li><li>cpu load过高</li><li>OOM</li><li>内存泄露</li><li>死锁</li><li>程序响应时间较长</li></ul><p><strong>第2步：性能分析(排查问题)</strong></p><blockquote><p>一种以<strong>侵入方式</strong>收集运行性能数据的活动，它会影响应用的吞吐量或响应性。</p><p>性能分析是针对性能问题的答复结果，关注的范围通常比性能监控更加集中。</p><p>性能分析很少在生产环境下进行，通常是在质量评估、<strong>系统测试或者开发环境下进行</strong>，是性能监控之后的步骤。</p></blockquote><ul><li>打印GC日志，通过GCviewer或者 <a href="http://gceasy.io" target="_blank" rel="noreferrer">http://gceasy.io</a> 来分析异常信息</li><li>灵活运用命令行工具、jstack、jmap、jinfo等</li><li>dump出堆文件，使用内存分析工具分析文件</li><li>使用阿里Arthas、jconsole、JVisualVM来实时查看JVM状态</li><li>jstack查看堆栈信息</li></ul><p><strong>第3步：性能调优(解决问题)</strong></p><blockquote><p>一种为改善应用响应性或吞吐量而更改参数、源代码、属性配置的活动，性能调优是在性能监控、性能分析之后的活动。</p></blockquote><ul><li>适当增加内存，根据业务背景选择垃圾回收器</li><li>优化代码，控制内存使用</li><li>增加机器，分散节点压力</li><li>合理设置线程池线程数量</li><li>使用中间件提高程序效率，比如缓存、消息队列等</li><li>其他……</li></ul><h2 id="_1-5-性能评价-测试指标" tabindex="-1">1.5 性能评价/测试指标 <a class="header-anchor" href="#_1-5-性能评价-测试指标" aria-label="Permalink to “1.5 性能评价/测试指标”">​</a></h2><p><span style="background-color:red;font-weight:bold;">1. 停顿时间（或响应时间）</span></p><p>提交请求和返回该请求的响应之间使用的时间，一般比较关注平均响应时间。常用操作的响应时间列表：</p><table tabindex="0"><thead><tr><th style="text-align:left;">操作</th><th style="text-align:left;">响应时间</th></tr></thead><tbody><tr><td style="text-align:left;">打开一个站点</td><td style="text-align:left;">几秒</td></tr><tr><td style="text-align:left;">数据库查询一条记录（有索引）</td><td style="text-align:left;">十几毫秒</td></tr><tr><td style="text-align:left;">机械磁盘一次寻址定位</td><td style="text-align:left;">4毫秒</td></tr><tr><td style="text-align:left;">从机械磁盘顺序读取1M数据</td><td style="text-align:left;">2毫秒</td></tr><tr><td style="text-align:left;">从SSD磁盘顺序读取1M数据</td><td style="text-align:left;">0.3毫秒</td></tr><tr><td style="text-align:left;">从远程分布式换成Redis 读取一个数据</td><td style="text-align:left;">0.5毫秒</td></tr><tr><td style="text-align:left;">从内存读取 1M数据</td><td style="text-align:left;">十几微妙</td></tr><tr><td style="text-align:left;">Java程序本地方法调用</td><td style="text-align:left;">几微妙</td></tr><tr><td style="text-align:left;">网络传输2Kb数据</td><td style="text-align:left;">1 微妙</td></tr></tbody></table><p>在垃圾回收环节中：</p><ul><li>暂停时间：<span style="color:red;">执行垃圾收集时，程序的工作线程被暂停的时间。</span></li><li>-XX:MaxGCPauseMillis</li></ul><p><span style="background-color:red;font-weight:bold;">2. 吞吐量</span></p><p>对单位时间内完成的工作量（请求）的量度</p><p>在GC中：运行用户代码的事件占总运行时间的比例（总运行时间：程序的运行时间+内存回收的时间）</p><p>吞吐量为1-1/(1+n)，其中-XX:GCTimeRatio=n</p><p><strong>3. 并发数</strong></p><p>同一时刻，对服务器有实际交互的请求数</p><p><strong>4. 内存占用</strong></p><p>Java堆区所占的内存大小</p><p><strong>5. 相互间的关系</strong></p><p>以高速公路通行状况为例</p><ul><li>吞吐量：每天通过高速公路收费站的车辆的数据</li><li>并发数：高速公路上正在行驶的车辆的数目</li><li>响应时间：车速</li></ul>`,41);function y(t,M,k,V,C,J){const s=p,i=o("ClientOnly");return e(),d("div",null,[b,c(i,null,{default:h(()=>{var l,a;return[(((l=t.$frontmatter)==null?void 0:l.aside)??!0)&&(((a=t.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(e(),u(s,{key:0,article:t.$frontmatter},null,8,["article"])):_("",!0)]}),_:1}),x])}const P=r(m,[["render",y]]);export{O as __pageData,P as default};
