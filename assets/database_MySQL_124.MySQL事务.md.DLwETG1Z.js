import{_ as A}from"./chunks/ArticleMetadata.H12JcJLK.js";import{_ as o,E as g,c,o as n,j as r,I as h,aj as d,w as t,b as e,e as k,a as y}from"./chunks/framework._AF764y6.js";const D="/assets/GQG7t4.ClJRZ-Va.png",E="/assets/7841e25151b645bbbbe7d00fb47df3e4png.C36d1OBn.png",C="/assets/FTsAmL.DVZVHGLQ.png",F="/assets/nFjsvh.BUZ07gzY.png",B="/assets/8Yi70k.cgo2CuJK.png",m="/assets/Fj3BzZ.CYyyskrm.png",S="/assets/jjn5Ee.QRH8-qFh.png",T="/assets/jdWdE2.rk0aLERR.png",u="/assets/Idsmp4.DEq2V1jl.png",L="/assets/ctV6tw.aIJawklM.png",b="/assets/Gb50fo.CNyWgAmz.png",I="/assets/QyAQst.BUMrjwHz.png",N="/assets/xzl3GZ.BepBjOIi.png",_="/assets/nhZtZj.DYsGoNdd.png",K=JSON.parse('{"title":"MySQL事务","description":"","frontmatter":{"title":"MySQL事务","date":"2023-11-02T09:38:40.000Z","permalink":"/mysql/transaction/","categories":["数据库","MySQL"],"tags":["MySQL"],"author":"Manaphy"},"headers":[],"relativePath":"database/MySQL/124.MySQL事务.md","filePath":"database/MySQL/124.MySQL事务.md","lastUpdated":1743620201000}'),R={name:"database/MySQL/124.MySQL事务.md"},O=r("h1",{id:"_1-数据库事务概述",tabindex:"-1"},[y("1. 数据库事务概述 "),r("a",{class:"header-anchor",href:"#_1-数据库事务概述","aria-label":"Permalink to “1. 数据库事务概述”"},"​")],-1),v=d(`<p>事务是数据库区别于文件系统的重要特性之一，当我们有了事务就会让数据库始终保持<code>一致性</code>，同时我们还能通过事务的机制<code>恢复到某个时间点</code>，这样可以保证已提交到数据库的修改不会因为系统崩溃而丢失。</p><h2 id="_1-1-存储引擎支持情况" tabindex="-1">1.1 存储引擎支持情况 <a class="header-anchor" href="#_1-1-存储引擎支持情况" aria-label="Permalink to “1.1 存储引擎支持情况”">​</a></h2><p><code>SHOW ENGINES</code> 命令来查看当前 MySQL 支持的存储引擎都有哪些，以及这些存储引擎是否支持事务。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> show engines;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| ndbcluster         | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Clustered</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, fault</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">tolerant tables                               | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">         | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">       |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| CSV                | YES     | CSV storage engine                                             | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">           | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">         |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| ARCHIVE            | YES     | Archive storage engine                                         | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">           | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">         |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| BLACKHOLE          | YES     | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dev</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> storage engine (anything you write </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> it disappears) | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">           | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">         |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| ndbinfo            | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      | MySQL Cluster </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">system</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> information storage engine                | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">         | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">       |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| MRG_MYISAM         | YES     | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Collection</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> of identical MyISAM tables                          | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">           | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">         |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| FEDERATED          | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      | Federated MySQL storage engine                                 | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">         | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">       |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| MyISAM             | YES     | MyISAM storage engine                                          | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">           | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">         |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| PERFORMANCE_SCHEMA | YES     | Performance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Schema</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                                             | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">           | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">         |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| InnoDB             | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> | Supports transactions, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">row-level</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> locking, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> foreign keys     | YES          | YES  | YES        |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| MEMORY             | YES     | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> based, stored </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> memory, useful </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> temporary tables      | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">           | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">         |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span></code></pre></div><p>能看出在 MySQL 中，只有InnoDB 是支持事务的。</p><h2 id="_1-2-基本概念" tabindex="-1">1.2 基本概念 <a class="header-anchor" href="#_1-2-基本概念" aria-label="Permalink to “1.2 基本概念”">​</a></h2><p><strong>事务</strong>：一组逻辑操作单元，使数据从一种状态变换到另一种状态。</p><p><strong>事务处理的原则</strong>：保证所有事务都作为<code>一个工作单元</code>来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都被提交( <code>commit</code> )，那么这些修改就永久地保存下来；要么数据库管理系统将<code>放弃</code>所作的所有<code>修改</code>，整个事务回滚(<code>rollback</code>)到最初状态。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 案例: AA用户给BB用户转账100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;AA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 服务器宕机</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;BB&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><h2 id="_1-3-事务的acid特性" tabindex="-1">1.3 事务的ACID特性 <a class="header-anchor" href="#_1-3-事务的acid特性" aria-label="Permalink to “1.3 事务的ACID特性”">​</a></h2><p><strong>原子性(atomicity)</strong></p><p>原子性是指事务是一个不可分割的工作单位，要么全部提交，要么全部失败回滚。即要么转账成功，要么转账失败，是不存在中间的状态。如果无法保证原子性会怎么样？就会出现数据不一致的情形，A账户减去100元，而B 账户增加100元操作失败，系统将无故丢失100元。</p><p><strong>一致性(consistency)</strong></p><p>根据定义，一致性是指事务执行前后，数据从一个<code>合法性状态</code>变换到另外一个<code>合法性状态</code>。这种状态是<code>语义上</code>的而不是语法上的，跟具体的业务有关。</p><p>那什么是合法的数据状态呢？满足<code>预定的约束</code>的状态就叫做合法的状态。通俗一点，这状态是由你自己来定义的（比如满足现实世界中的约束）。满足这个状态，数据就是一致的，不满足这个状态，数据就是不一致的！如果事务中的某个操作失败了，系统就会自动撤销当前正在执行的事务，返回到事务操作之前的状态。</p><p><strong>举例1</strong>: A账户有200元，转账300元出去，此时A账户余额为-100元。 你自然就发现了此时数据是不一致的, 为什么呢?因为你定义了一个状态，余额这列必须&gt;= 0。</p><p><strong>举例2</strong>: A账户200元，转账50元给B账户，A账户的钱扣了，但是B账户因为各种意外,余额并没有增加。你也知道此时数据是不一致的，为什么呢?因为你定义了一个状态，要求A+B的总余额必须不变。</p><p><strong>举例3</strong>:在数据表中我们将<code>姓名</code>字段设置为<code>唯一性约束</code> ，这时当事务进行提交或者事务发生回滚的时候，如果数据表中的姓名不唯一，就破坏了事务的一致性要求。</p><p><strong>隔离型(isolation)</strong></p><p>事务的隔离性是指一个事务的执行<code>不能被其他事务干扰</code>，即一个事务内部的操作及使用的数据对<code>并发</code>的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p><p>如果无法保证隔离性会怎么样？假设A账户有200元，B账户0元。A账户往B账户转账两次，每次金额为50元，分别在两个事务中执行。如果无法保证隔离性，会出现下面的情形：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> accounts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;AA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> accounts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;BB&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p><img src="`+D+`" alt="image.png"></p><p><strong>持久性(durability)</strong></p><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是<code>永久性</code>的，接下来的其他操作和数据库故障不应该对其有任何影响。</p><p>持久性是通过<code>事务日志</code>来保证的。日志包括了<code>重做日志</code>和<code>回滚日志</code>。当我们通过事务对数据进行修改的时候，首先会将数据库的变化信息记录到重做日志中，然后再对数据库中对应的行进行修改。这样做的好处是，即使数据库系统崩溃，数据库重启后也能找到没有更新到数据库系统中的重做日志，重新执行，从而使事务具有持久性。</p><p>::: note 总结</p><p>ACID是事务的四大特性，在这四个特性中，原子性是基础，隔离性是手段，一致性是约束条件，而持久性是我们的目的。</p><p>数据库事务，其实就是数据库设计者为了方便起见，把需要保证<code>原子性</code>、<code>隔离性</code>、<code>一致性</code>和<code>持久性</code>的一个或多个数据库操作称为一个事务。</p><p>:::</p><h2 id="_1-4-事务的状态" tabindex="-1">1.4 事务的状态 <a class="header-anchor" href="#_1-4-事务的状态" aria-label="Permalink to “1.4 事务的状态”">​</a></h2><p>我们现在知道<code>事务</code>是一个抽象的概念，它其实对应着一个或多个数据库操作，MySQL根据这些操作所执行的不同阶段把<code>事务</code>大致划分成几个状态：</p><ul><li><p><strong>活动的（active）</strong></p><p>事务对应的数据库操作正在执行过程中时，我们就说该事务处在<code>活动的</code>状态。</p></li><li><p><strong>部分提交的（partially committed）</strong></p><p>当事务中的最后一个操作执行完成，但由于操作都在内存中执行，所造成的影响并<code>没有刷新到磁盘</code>时，我们就说该事务处在<code>部分提交的</code>状态。</p></li><li><p><strong>失败的（failed）</strong></p><p>当事务处在<code>活动的</code>或者<code>部分提交的</code>状态时，可能遇到了某些错误（数据库自身的错误、操作系统错误或者直接断电等）而无法继续执行，或者人为的停止当前事务的执行，我们就说该事务处在<code>失败的</code>状态。</p></li><li><p><strong>中止的（aborted）</strong></p><p>如果事务执行了一部分而变为<code>失败的</code>状态，那么就需要把已经修改的事务中的操作还原到事务执行前的状态。换句话说，就是要撤销失败事务对当前数据库造成的影响。我们把这个撤销的过程称之为<code>回滚</code>。当<code>回滚</code>操作执行完毕时，也就是数据库恢复到了执行事务之前的状态，我们就说该事务处在了<code>中止的</code>状态。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> accounts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;AA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> accounts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;BB&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div></li><li><p><strong>提交的（committed）</strong></p><p>当一个处在部分提交的状态的事务将修改过的数据都<code>同步到磁盘</code>上之后，我们就可以说该事务处在了提交的状态。</p></li></ul><p>一个基本的状态转换图如下所示：</p><p><img src="`+E+'" alt="image.png"></p><p>图中可见，只有当事务处于<code>提交的</code>或者<code>中止的</code>状态时，一个事务的生命周期才算是结束了。对于已经提交的事务来说，该事务对数据库所做的修改将永久生效，对于处于中止状态的事务，该事务对数据库所做的所有修改都会被回滚到没执行该事务之前的状态。</p><h1 id="_2-如何使用事务" tabindex="-1">2. 如何使用事务 <a class="header-anchor" href="#_2-如何使用事务" aria-label="Permalink to “2. 如何使用事务”">​</a></h1>',37),M=d(`<p>使用事务有两种方式，分别为<code>显式事务</code>和<code>隐式事务</code>。</p><h2 id="_2-1-显式事务" tabindex="-1">2.1 显式事务 <a class="header-anchor" href="#_2-1-显式事务" aria-label="Permalink to “2.1 显式事务”">​</a></h2><p><strong>步骤1</strong>： <code>START TRANSACTION</code> 或者 <code>BEGIN</code> ，作用是显式开启一个事务。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 或者</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> START TRANSACTION</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p><code>START TRANSACTION</code> 语句相较于<code>BEGIN</code> 特别之处在于，后边能跟随几个<code>修饰符</code>：</p><p>① <code>READ ONLY</code>：标识当前事务是一个<code>只读事务</code>，也就是属于该事务的数据库操作只能读取数据，而不能修改数据。</p><div class="tip custom-block"><p class="custom-block-title">补充</p><p>只读事务中只是不允许修改那些其他事务也能访问到的表中的数据，对于临时表来说（我们使用 CREATE TMEPORARY TABLE创建的表），由于它们只能在当前会话中可见，所以只读事务其实也是可以对临时表进行增、删、改操作的。</p></div><p>② <code>READ WRITE</code> ：标识当前事务是一个<code>读写事务</code>，也就是属于该事务的数据库操作既可以读取数据，也可以修改数据。</p><p>③ <code>WITH CONSISTENT SNAPSHOT</code> ：启动一致性读。</p><p><strong>步骤2</strong>：一系列事务中的操作（主要是DML，不含DDL）</p><p><strong>步骤3</strong>：提交事务 或 中止事务（即回滚事务）</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 提交事务。当提交事务后，对数据库的修改是永久性的。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 回滚事务。即撤销正在进行的所有没有提交的修改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ROLLBACK</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 将事务回滚到某个保存点。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ROLLBACK</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [SAVEPOINT]</span></span></code></pre></div><p>其中关于SAVEPOINT相关操作有：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 在事务中创建保存点，方便后续针对保存点进行回滚。一个事务中可以存在多个保存点。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">SAVEPOINT 保存点名称；</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 删除某个保存点。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">RELEASE SAVEPOINT 保存点名称：</span></span></code></pre></div><h2 id="_2-2-隐式事务" tabindex="-1">2.2 隐式事务 <a class="header-anchor" href="#_2-2-隐式事务" aria-label="Permalink to “2.2 隐式事务”">​</a></h2><p>MySQL中有一个系统变量<code>autocommit</code>：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SHOW VARIABLES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;autocommit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">---------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| Variable_name | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">---------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| autocommit    | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">---------------+-------+</span></span></code></pre></div><p>当然，如果我们想关闭这种<code>自动提交</code>的功能，可以使用下边两种方法之一：</p><p>显式的的使用<code>START TRANSACTION</code> 或者<code>BEGIN</code> 语句开启一个事务。这样在本次事务提交或者回滚前会暂时关闭掉自动提交的功能。</p><p>把系统变量<code>autocommit</code>的值设置为<code>OFF</code>，就像这样：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> autocommit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> OFF</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#或</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> autocommit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>这样的话，我们写入的多条语句就算是属于同一个事务了，直到我们显式的写出COMMIT 语句来把这个事务提交掉，或者显式的写出 ROLLBACK语句来把这个事务回滚掉。</p><blockquote><p>补充：Oracle 默认不自动提交，需要手写COMMIT 命令，而 MySQL默认自动提交。</p></blockquote><h2 id="_2-3-隐式提交数据的情况" tabindex="-1">2.3 隐式提交数据的情况 <a class="header-anchor" href="#_2-3-隐式提交数据的情况" aria-label="Permalink to “2.3 隐式提交数据的情况”">​</a></h2><p><strong>数据定义语言（Data definition language，缩写为：DDL）</strong></p><p>数据库对象，指的就是<code>数据库</code>、<code>表</code>、<code> 视图</code>、<code>存储过程</code>等结构。当我们使用<code>CREATE</code>、<code>ALTER</code>、 <code>DROP</code> 等语句去修改数据库对象时，就会隐式的提交前边语句所属于的事务。即:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ... #事务中的一条语句</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ... #事务中的一条语句</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">... #事务中的其它语句</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ... # 此语句会隐式的提交前边语句所属于的事务</span></span></code></pre></div><p><strong>隐式使用或修改mysql数据库中的表</strong></p><p>当我们使用 <code>ALTER USER</code>、<code>CREATE USER</code>、<code>DROP USER</code>、<code>GRANT</code>、<code>RENAME USER</code>、<code>REVOKE</code>、<code>SET PASSWORD</code>等语句时也会隐式的提交前边语句所属于的事务。</p><p><strong>事务控制或关于锁定的语句</strong></p><ol><li>当我们在一个事务还没提交或者回滚时就又使用<code>START TRANSACTION</code> 或者<code>BEGIN</code> 语句开启了另一个事务时，会隐式的提交上一个事务。即：</li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ... #事务中的一条语句</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ... #事务中的一条语句</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">... #事务中的其它语句</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; #此语句会隐式的提交前边语句所属的事务</span></span></code></pre></div><ol start="2"><li>当前的<code>autocommit</code>系统变量的值为<code>OFF</code>，我们手动把它调为<code>ON</code>时，也会隐式的提交前边语句所属的事务。</li><li>使用<code>LOCK TABLES</code>、<code>UNLOCK TABLES</code>等关于锁定的语句也会隐式的提交前边语句所属的事务。</li></ol><p><strong>加载数据的语句</strong></p><p>使用<code>LOAD DATA</code> 语句来批量往数据库中导入数据时，也会<code>隐式的提交</code>前边语句所属的事务。</p><p><strong>关于MySQL复制的一些语句</strong></p><p>使用<code>START SLAVE</code>、<code>STOP SLAVE</code>、<code>RESET SLAVE</code> 、<code>CHANGE MASTER TO</code> 等语句时会<code>隐式的提交</code>前边语句所属的事务。</p><p><strong>其它的一些语句</strong></p><p>使用<code>ANALYZE TABLE</code>、<code>CACHE INDEX</code>、<code>CHECK TABLE、FLUSH</code>、 <code>LOAD INDEX INTO CACHE</code> 、<code>OPTIMIZE TABLE</code>、<code>REPAIR TABLE</code> 、<code>RESET</code> 等语句也会隐式的提交前边语句所属的事务。</p><h2 id="_2-4-使用举例1-提交与回滚" tabindex="-1">2.4 使用举例1：提交与回滚 <a class="header-anchor" href="#_2-4-使用举例1-提交与回滚" aria-label="Permalink to “2.4 使用举例1：提交与回滚”">​</a></h2><p>我们看下在 MySQL 的默认状态下，下面这个事务最后的处理结果是什么。</p><p><strong>情况1：</strong></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> user</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">InnoDB;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;李四&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;李四&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; #Duplicate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">entry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;李四&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;user.PRIMARY&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ROLLBACK</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| 张三    |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--------+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p><strong>情况2：</strong></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">TRUNCATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#跟情况1不同的是,这里没有BEGIN;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;李四&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;李四&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;#Duplicate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">entry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;李四&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;user.PRIMARY&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| 张三    |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| 李四    |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--------+</span></span></code></pre></div><p><strong>情况3：</strong></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">TRUNCATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> @@completion_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;李四&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;李四&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ROLLBACK</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| 张三    |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--------+</span></span></code></pre></div><p>你能看到相同的SQL代码，只是在事务开始之前设置了<code>SET @@completion _type = 1</code>; 结果就和我们第一次处理的一样，只有一个“张三”。这是为什么呢?</p><p>这里讲解下MySQL中completion_ type 参数的作用，实际上这个参数有3种可能：</p><ol><li><code>completion=0</code>， 这是<code>默认情况</code>。当我们执行COMMIT的时候会提交事务，在执行下一个事务时，还需要使用<code>START TRANSACTION</code> 或者<code>BEGIN</code>来开启。</li><li><code>completion=1</code>，这种情况下，当我们提交事务后，相当于执行了<code>COMMIT AND CHAIN</code>, 也就是开启一个链式事务，即当我们提交事务之后会开启一个相同隔离级别的事务。</li><li><code>completion=2</code>，这种情况下<code>COMMIT=COMMIT AND RELEASE</code>，也就是当我们提交后，会自动与服务器断开连接。</li></ol><blockquote><p>当我们设置 autocommit=0 时，不论是否采用 START TRANSACTION 或者 BEGIN 的方式来开启事务，都需要用 COMMIT 进行提交，让事务生效，使用 ROLLBACK 对事务进行回滚。</p><p>当我们设置 autocommit=1 时，每条 SQL 语句都会自动进行提交。</p><p>不过这时，如果你采用 STARTTRANSACTION 或者 BEGIN 的方式来显式地开启事务，那么这个事务只有在 COMMIT 时才会生效，在 ROLLBACK 时才会回滚。</p></blockquote><h1 id="_3-事务隔离级别" tabindex="-1">3. 事务隔离级别 <a class="header-anchor" href="#_3-事务隔离级别" aria-label="Permalink to “3. 事务隔离级别”">​</a></h1>`,52),P=d(`<p>MySQL是一个<code>客户端／服务器</code>架构的软件，对于同一个服务器来说，可以有若干个客户端与之连接，每个客户端与服务器连接上之后，就可以称为一个会话（<code>Session</code>）。每个客户端都可以在自己的会话中向服务器发出请求语句，一个请求语句可能是某个事务的一部分，也就是对于服务器来说可能同时处理多个事务。事务有<code>隔离性</code>的特性，理论上在某个事务<code>对某个数据进行访问</code>时，其他事务应该进行<code>排队</code>，当该事务提交之后，其他事务才可以继续访问这个数据。但是这样对<code>性能影响太大</code>，我们既想保持事务的隔离性，又想让服务器在处理访问同一数据的多个事务时<code>性能尽量高些</code>，那就看二者如何权衡取舍了。</p><h2 id="_3-1-数据准备" tabindex="-1">3.1 数据准备 <a class="header-anchor" href="#_3-1-数据准备" aria-label="Permalink to “3.1 数据准备”">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    studentno </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    class </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (studentno)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) Engine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">InnoDB CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">utf8;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;小谷&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;1班&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><h2 id="_3-2-数据并发问题" tabindex="-1">3.2 数据并发问题 <a class="header-anchor" href="#_3-2-数据并发问题" aria-label="Permalink to “3.2 数据并发问题”">​</a></h2><p>针对事务的隔离性和并发性，我们怎么做取舍呢？先看一下访问相同数据的事务在<code>不保证串行执行</code>（也就是执行完一个再执行另一个）的情况下可能会出现哪些问题：</p><h3 id="脏写-dirty-write" tabindex="-1">脏写（Dirty Write ） <a class="header-anchor" href="#脏写-dirty-write" aria-label="Permalink to “脏写（Dirty Write ）”">​</a></h3><p>对于两个事务 Session A、Session B，如果事务Session A <code>修改</code>了另一个<code>未提交</code>事务Session B<code> 修改过</code>的数据，那就意味着发生了<code>脏写</code></p><p><img src="`+C+'" alt="image.png"></p><h3 id="脏读-dirty-read" tabindex="-1">脏读（Dirty Read ） <a class="header-anchor" href="#脏读-dirty-read" aria-label="Permalink to “脏读（Dirty Read ）”">​</a></h3><p>对于两个事务 Session A、Session B，Session A <code>读取</code>了已经被 Session B <code>更新</code>但还<code>没有被提交</code>的字段。之后若 Session B <code>回滚</code>，Session A <code>读取</code>的内容就是<code>临时且无效</code>的。</p><p><img src="'+F+'" alt="image.png"></p><p>Session A和Session B各开启了一个事务，Session B中的事务先将studentno列为1的记录的name列更新为&#39;张三&#39;，然后Session A中的事务再去查询这条studentno为1的记录，如果读到列name的值为&#39;张三&#39;，而Session B中的事务稍后进行了回滚，那么Session A中的事务相当于读到了一个不存在的数据，这种现象就称之为<code>脏读</code>。</p><h3 id="不可重复读-non-repeatable-read" tabindex="-1">不可重复读（Non-Repeatable Read ） <a class="header-anchor" href="#不可重复读-non-repeatable-read" aria-label="Permalink to “不可重复读（Non-Repeatable Read ）”">​</a></h3><p>对于两个事务Session A、Session B，Session A <code>读取</code>了一个字段，然后 Session B <code>更新</code>了该字段。 之后Session A <code>再次读取</code>同一个字段，<code>值就不同</code>了。那就意味着发生了不可重复读。</p><p><img src="'+B+'" alt="image.png"></p><p>我们在Session B中提交了几个<code>隐式事务</code>（注意是隐式事务，意味着语句结束事务就提交了），这些事务都修改了studentno列为1的记录的列name的值，每次事务提交之后，如果Session A中的事务都可以查看到最新的值，这种现象也被称之为<code>不可重复读</code>。</p><h3 id="幻读-phantom" tabindex="-1">幻读（Phantom） <a class="header-anchor" href="#幻读-phantom" aria-label="Permalink to “幻读（Phantom）”">​</a></h3><p>对于两个事务Session A、Session B, Session A 从一个表中<code>读取</code>了一个字段, 然后 Session B 在该表中<code>插入</code>了一些新的行。 之后, 如果 Session A <code>再次读取</code>同一个表, 就会多出几行。那就意味着发生了幻读。</p><p><img src="'+m+'" alt="image.png"></p><p>Session A中的事务先根据条件 studentno &gt; 0这个条件查询表student，得到了name列值为&#39;张三&#39;的记录；之后Session B中提交了一个<code>隐式事务</code>，该事务向表student中插入了一条新记录；之后Session A中的事务再根据相同的条件 studentno &gt; 0查询表student，得到的结果集中包含Session B中的事务新插入的那条记录，这种现象也被称之为<code>幻读</code>。我们把新插入的那些记录称之为<code>幻影记录</code>。</p><p><strong>注意1:</strong></p><p>如果SessionB中<code>删除了</code>一些符合<code>studentno &gt; 0</code> 的记录而不是插入新记录，那Session A之后再根据<code>studentno &gt; 0</code>的条件读取的<code>记录变少了</code>，这种现象算不算<code>幻读</code>呢?这种现象<code>不属于幻读</code>，幻读强调的是一个事务按照某个<code>相同条件多次读取记录</code>时，后读取时读到了之前<code>没有读到的记录</code>。</p><p><strong>注意2:</strong></p><p>那对于先前已经读到的记录，之后又读取不到这种情况，算啥呢?这相当于对每一条记录都发生了<code>不可重复读</code>的现象。幻读只是重点强调了读取到了之前读取没有获取到的记录。</p><h2 id="_3-3-sql中的四种隔离级别" tabindex="-1">3.3 SQL中的四种隔离级别 <a class="header-anchor" href="#_3-3-sql中的四种隔离级别" aria-label="Permalink to “3.3 SQL中的四种隔离级别”">​</a></h2><p>上面介绍了几种并发事务执行过程中可能遇到的一些问题，这些问题有轻重缓急之分，我们给这些问题按照严重性来排一下序：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>脏写 &gt; 脏读 &gt; 不可重复读 &gt; 幻读</span></span></code></pre></div><p>我们愿意舍弃一部分隔离性来换取一部分性能在这里就体现在：设立一些隔离级别，隔离级别越低，并发问题发生的就越多。<code>SQL标准</code>中设立了4个<code>隔离级别</code>：</p><ul><li><code>READ UNCOMMITTED</code>：读未提交，在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。不能避免脏读、不可重复读、幻读。</li><li><code>READ COMMITTED</code>：读已提交，它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。可以避免脏读，但不可重复读、幻读问题仍然存在。</li><li><code>REPEATABLE READ</code>：可重复读，事务A在读到一条数据之后，此时事务B对该数据进行了修改并提交，那么事务A再读该数据，读到的还是原来的内容。可以避免脏读、不可重复读，但幻读问题仍然存在。这是MySQL的默认隔离级别。</li><li><code>SERIALIZABLE</code>：可串行化，确保事务可以从一个表中读取相同的行。在这个事务持续期间，禁止其他事务对该表执行插入、更新和删除操作。所有的并发问题都可以避免，但性能十分低下。能避免脏读、不可重复读和幻读。</li></ul><p><code>SQL标准</code>中规定，针对不同的隔离级别，并发事务可以发生不同严重程度的问题，具体情况如下：</p><p><img src="'+S+'" alt="image.png"></p><p><code>脏写</code>怎么没涉及到？因为脏写这个问题太严重了，不论是哪种隔离级别，都不允许脏写的情况发生。</p><p>不同的隔离级别有不同的现象，并有不同的锁和并发机制，隔离级别越高，数据库的并发性能就越差，4种事务隔离级别与并发性能的关系如下：</p><p><img src="'+T+`" alt="image.png"></p><h2 id="_3-4-mysql支持的四种隔离级别" tabindex="-1">3.4 MySQL支持的四种隔离级别 <a class="header-anchor" href="#_3-4-mysql支持的四种隔离级别" aria-label="Permalink to “3.4 MySQL支持的四种隔离级别”">​</a></h2><p>不同的数据库厂商对SQL标准中规定的四种隔离级别支持不一样。比如，Oracle就只支持 <code>READ COMMITTED</code>（默认隔离级别）和 <code>SERIALIZABLE隔离级别</code>。MySQL虽然支持4种隔离级别，但与SQL标准中所规定的各级隔离级别允许发生的问题却有些出入，MySQL在REPEATABLE READ隔离级别下，是可以禁止幻读问题的发生的。</p><p>MySQL的默认隔离级别为REPEATABLE READ，我们可以手动修改一下事务的隔离级别。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 查看隔离级别，MySQL </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.20的版本之前：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SHOW VARIABLES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;tx_isolation&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">---------------+-----------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| Variable_name | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">           |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">---------------+-----------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| tx_isolation  | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">REPEATABLE-READ</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">---------------+-----------------+</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># MySQL </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.20版本之后，引入transaction_isolation来替换tx_isolation</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 查看隔离级别，MySQL </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.20的版本及之后：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SHOW VARIABLES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;transaction_isolation&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-----------------------+-----------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| Variable_name         | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">           |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-----------------------+-----------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">| transaction_isolation | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">REPEATABLE-READ</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-----------------------+-----------------+</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 或者不同MySQL版本中都可以使用的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> @@transaction_isolation;</span></span></code></pre></div><h2 id="_3-5-如何设置事务的隔离级别" tabindex="-1">3.5 如何设置事务的隔离级别 <a class="header-anchor" href="#_3-5-如何设置事务的隔离级别" aria-label="Permalink to “3.5 如何设置事务的隔离级别”">​</a></h2><p>通过下面的语句修改事务的隔离级别：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [GLOBAL|SESSION] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">TRANSACTION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ISOLATION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> LEVEL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 隔离级别;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#其中，隔离级别格式：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> READ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> UNCOMMITTED</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> READ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> COMMITTED</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> REPEATABLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> READ</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SERIALIZABLE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#或者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [GLOBAL|SESSION] TRANSACTION_ISOLATION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;隔离级别&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#其中，隔离级别格式：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> READ-UNCOMMITTED</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> READ-COMMITTED</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> REPEATABLE-READ</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SERIALIZABLE</span></span></code></pre></div><p>关于设置时使用GLOBAL或SESSION的影响：</p><p>使用GLOBAL 关键字（在全局范围影响）：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> GLOBAL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TRANSACTION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ISOLATION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> LEVEL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SERIALIZABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#或</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> GLOBAL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TRANSACTION_ISOLATION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;SERIALIZABLE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>则：</p><ul><li>当前已经存在的会话无效</li><li>只对执行完该语句之后产生的会话起作用</li></ul><p>使用SESSION 关键字（在会话范围影响）：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SESSION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TRANSACTION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ISOLATION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> LEVEL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SERIALIZABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#或</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SESSION</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TRANSACTION_ISOLATION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;SERIALIZABLE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>则：</p><ul><li>对当前会话的所有后续的事务有效</li><li>如果在事务之间执行，则对后续的事务有效</li><li>该语句可以在已经开启的事务中间执行，但不会影响当前正在执行的事务</li></ul><h2 id="_3-6-不同隔离级别举例" tabindex="-1">3.6 不同隔离级别举例 <a class="header-anchor" href="#_3-6-不同隔离级别举例" aria-label="Permalink to “3.6 不同隔离级别举例”">​</a></h2><p><strong>演示1. 读未提交之脏读</strong></p><p>设置隔离级别为未提交读：</p><p><img src="`+u+'" alt="image.png"></p><p>事务1和事务2的执行流程如下：</p><p><img src="'+L+'" alt="image.png"></p><p><strong>演示2：读已提交</strong></p><p><img src="'+b+'" alt="image.png"></p><p><strong>演示3：可重复读</strong></p><p>设置隔离级别为可重复读，事务的执行流程如下：</p><p><img src="'+I+'" alt="image.png"></p><p><img src="'+N+'" alt="image.png"></p><p>这里要灵活的<code>理解读取</code>的意思，第一次select是读取，第二次的 insert 其实也属于隐式的读取，只不过是在 mysql 的机制中读取的，插入数据也是要先读取一下有没有主键冲突才能决定是否执行插入。</p><p>幻读，并不是说两次读取获取的结果集不同，幻读侧重的方面是某一次的 select 操作得到的结果所表征的数据状态无法支撑后续的业务操作。更具体一些：select 某记录是否存在，不存在，准备插入此记录，但执行insert 时发现此记录已存在，无法插入，此时就发生了幻读。</p><p>在RR 隔离级别下，step1、step2是会正常执行的，step3则会报错主键冲突，对于事务1的业务来说是执行失败的，这里事务1就是发生了幻读，因为事务1在 step1 中读取的数据状态并不能支撑后续的业务操作，事务1：“见鬼了，我刚才读到的结果应该可以支持我这样操作才对啊，为什么现在不可以”。事务1不敢相信的又执行了 step4，发现和 setp1 读取的结果是一样的（RR下的MVCC机制）。此时，幻读无疑已经发生，事务1无论读取多少次，都查不到id=3的记录，但它的确无法插入这条他通过读取来认定不存在的记录（此数据已被事务2插入），对于事务1来说，它幻读了。</p><p>其实 RR也是可以避免幻读的，通过对 select 操作寻动加<code>行X锁（独占锁）</code>（SELECT ... FOR UPDATE 这也正是 SERIALIZABLE 隔离级别下会隐式为你做的事情）。同时，即便当前记录不存在，比如 id=3 是不存在的，当前事务也会获得一把记录锁（因为InnoDB的行锁锁定的是索引，故记录实体存在与否没关系，存在就加<code>行X锁</code>，不存在就加<code>间隙锁</code>），其他事务则无法插入此索引的记录，故杜绝了幻读。</p><p>在 <code>SERIALTZABLE 隔离级别</code>下，step1执行时是会隐式的添加<code>行（X）锁 / gap（X）锁</code>的，从而step2会被阻塞， step3会正常执行，待事务1提交后，事务2才能继续执行（主键冲突执行失败），对于事务1 来说业务是正确的，成功的阻塞扼杀了扰乱业务的事务2，对于事务1来说他前期读取的结果是可以支撑其后续业务的。</p><p>所以 MySQL 的幻读并非什么读取两次返回结果集不同，而是事务在插入事先检测不存在的记录时，惊奇的发现这些数据已经存在了，之前的检测读获取到的数据如同鬼影一般。</p><h1 id="_4-事务的常见分类" tabindex="-1">4. 事务的常见分类 <a class="header-anchor" href="#_4-事务的常见分类" aria-label="Permalink to “4. 事务的常见分类”">​</a></h1>',69),f=d('<p>从事务理论的角度来看，可以把事务分为以下几种类型：</p><ul><li>扁平事务（Flat Transactions）</li><li>带有保存点的扁平事务（Flat Transactions with Savepoints）</li><li>链事务（Chained Transactions）</li><li>嵌套事务（Nested Transactions）</li><li>分布式事务（Distributed Transactions）</li></ul><p>下面分别介绍这几种类型:</p><ol><li><p><code>扁平事务</code>是事务类型中最简单的一种，但是在实际生产环境中，这可能是使用最频繁的事务，在扁平事务中，所有操作都处于同一层次，其由BEGIN WORK开始，由COMMIT WORK或ROLLBACK WORK结束,其间的操作是原子的，要么都执行,要么都回滚，因此，扁平事务是应用程序成为原子操作的基本组成模块。扁平事务虽然简单,但是在实际环境中使用最为频繁，也正因为其简单,使用频繁,故每个数据库系统都实现了对扁平事务的支持。扁平事务的主要限制是不能提交或者回滚事务的某一部分， 或分几个步骤提交。</p><p>扁平事务一般有三种不同的结果:</p><ol><li>事务成功完成。在平常应用中约占所有事务的96%。</li><li>应用程序要求停止事务。比如应用程序在捕获到异常时会回滚事务,约占事务的3%。</li><li>外界因素强制终止事务。如连接超时或连接断开，约占所有事务的1%。</li></ol></li><li><p><code>带有保存点的扁平事务</code>除了支持扁平事务支持的操作外，还允许在事务执行过程中回滚到同一事务中较早的一个状态。这是因为某些事务可能在执行过程中出现的错误并不会导致所有的操作都无效，放弃整个事务不合乎要求，开销太大。</p><p><code>保存点(Savepoint)</code>用来通知事务系统应该记住事务当前的状态，以便当之后发生错误时，事务能回到保存点当时的状态。对于扁平的事务来说，隐式的设置了一个保存点，然而在整个事务中，只有这一个保存点，因此，回滚只能会滚到事务开始时的状态。</p></li><li><p><code>链事务</code> 是指一个事务由多个子事务链式组成，它可以被视为保存点模式的一个变种。带有保存点的扁平事务，当发生系统崩溃时，所有的保存点都将消失，这意味着当进行恢复时，事务需要从开始处重新执行，而不能从最近的一个保存点继续执行。链事务的思想 是:在提交一个事务时， 释放不需要的数据对象，将必要的处理上下文隐式地传给下一个要开始的事务，前一个子事务的提交操作和下一个子事务的开始操作合并成一 个原子操作,这意味着下一个事务将看到上一个事务的结果，就好像在一个事务中进行一样。 这样，**在提交子事务时就可以释放不需要的数据对象，而不必等到整个事务完成后才释放。**其工作方式如下:</p><p><img src="'+_+'" alt="image.png"></p><p>链事务与带有保存点的扁平事务的不同之处体现在:</p><ol><li>带有保存点的扁平事务能回滚到任意正确的保存点,而链事务中的回滚仅限于当前事务，即只能恢复到最近的一个保存点。</li><li>对于锁的处理，两者也不相同，链事务在执行COMMIT后即释放了当前所持有的锁，而带有保存点的扁平事务不影响迄今为止所持有的锁。</li></ol></li><li><p><code>嵌套事务</code>是一个层次结构框架，由一个顶层事务(Top-Level Transaction)控制着各个层次的事务，顶层事务之下嵌套的事务被称为子事务(Subtransaction) ，其控制着每一个局部的变换， 子事务本身也可以是嵌套事务。因此，嵌套事务的层次结构可以看成是一棵树。</p></li></ol><ol start="5"><li><code>分布式事务</code>通常是在一个分布式环境下运行的扁平事务，因此，需要根据数据所在位置访问网络中不同节点的数据库资源。例如，一个银行用户从招商银行的账户向工商银行的账户转账1000元，这里需要用到分布式事务，因为不能仅调用某一家银行的数据库就完成任务。</li></ol>',5);function q(s,Q,V,x,G,U){const p=A,l=g("ClientOnly");return n(),c("div",null,[O,h(l,null,{default:t(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),e(p,{key:0,article:s.$frontmatter},null,8,["article"])):k("",!0)]}),_:1}),v,h(l,null,{default:t(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),e(p,{key:0,article:s.$frontmatter},null,8,["article"])):k("",!0)]}),_:1}),M,h(l,null,{default:t(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),e(p,{key:0,article:s.$frontmatter},null,8,["article"])):k("",!0)]}),_:1}),P,h(l,null,{default:t(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),e(p,{key:0,article:s.$frontmatter},null,8,["article"])):k("",!0)]}),_:1}),f])}const Z=o(R,[["render",q]]);export{K as __pageData,Z as default};
