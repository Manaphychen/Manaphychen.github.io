import{_ as l}from"./chunks/ArticleMetadata.BPSr9oED.js";import{_ as p,E as e,c as r,o as n,j as h,I as d,aj as A,w as g,b as y,e as D,a as C}from"./chunks/framework._AF764y6.js";const B="/assets/image-20240323112633394_zybq6DVG1F.D3Wk1e6b.png",F="/assets/image-20240323104732025_8tyWzRMtO5.DxFnJSBx.png",o="/assets/image-20240323104841748_MEtkQoAPlb.C5C3f6ke.png",V=JSON.parse('{"title":"JVM其他结构","description":"","frontmatter":{"title":"JVM其他结构","date":"2024-03-15T21:58:00.000Z","permalink":"/jvm/9c565c/","categories":["后端","JVM虚拟机","JVM内存"],"tags":[null],"author":"Manaphy"},"headers":[],"relativePath":"jvm/01.JVM内存/06.JVM其他结构.md","filePath":"jvm/01.JVM内存/06.JVM其他结构.md","lastUpdated":1743259619000}'),c={name:"jvm/01.JVM内存/06.JVM其他结构.md"},E=h("h1",{id:"jvm其他结构",tabindex:"-1"},[C("JVM其他结构 "),h("a",{class:"header-anchor",href:"#jvm其他结构","aria-label":"Permalink to “JVM其他结构”"},"​")],-1),m=A('<h2 id="本地方法接口" tabindex="-1">本地方法接口 <a class="header-anchor" href="#本地方法接口" aria-label="Permalink to “本地方法接口”">​</a></h2><p>简单地讲，<span style="color:blue;">一个Native Method就是一个Java调用非Java代码的接口</span>。一个Native Method是这样一个Java方法,该方法的实现由非Java语言实现，比如C。这个特征并非Java所特有，很多其它的编程语言都有这一机制，比如在C++中，你可以用extern &quot;C&quot; 告知C++编译器去调用一个C的函数。</p><p>在定义一个native method时，并不提供实现体(有些像定义一个Java interface)，因为其实现体是由非java语言在外面实现的。</p><p>本地接口的作用是融合不同的编程语言为Java所用，它的初衷是融合 C/C++程序。</p><p><strong>为什么要使用Native Method？</strong></p><p>Java使用起来非常方便，然而有些层次的任务用Java实现起来不容易，或者我们对程序的效率很在意时，问题就来了。</p><p><strong>1.与Java环境外交互：</strong></p><p><span style="color:red;">有时Java应用需要与Java外面的环境交互，这是本地方法存在的主要原因。</span>你可以想想Java需要与一些底层系统，如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口， 而且我们无需去了解Java应用之外的繁琐的细节。</p><p><strong>2.与操作系统交互：</strong></p><p>JVM支持着Java语言本身和运行时库，它是Java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层系统的支持。这些底层系统常常是强大的操作系统。<span style="color:red;">通过使用本地方法，我们得以用Java实现了jre的与底层系统的交互，甚至JVM 的一些部分就是用C写的</span>。还有，如果我们要使用一些Java语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。</p><p><strong>3.Sun&#39;s Java</strong></p><p>Sun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用Java实现的，它也通过一些本地方法与外界交互。例如：类<code>java.lang.Thread</code> 的<code>setPriority()</code>方法是用Java实现的，但是它实现调用的是该类里的本地方法<code>setPriority0()</code>。这个本地方法是用C实现的，并被植入JVM内部，在windows 95 的平台上，这个本地方法最終将调用win32 SetPriority() API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库(external dynamic link library)提供，然后被JVM调用。</p><p><strong>现状</strong></p><p><span style="color:red;">目前该方法使用的越来越少了，除非是与硬件有关的应用</span>，比如通过Java程序驱动打印机或者Java系统管理生产设备，在企业级应用中己经比较少见。因为现在的异构领域间的通信很发达，比如可以使用Socket通信，也可以使用web service等等，不多做介绍。</p><h2 id="直接内存-direct-memory" tabindex="-1">直接内存(Direct Memory) <a class="header-anchor" href="#直接内存-direct-memory" aria-label="Permalink to “直接内存(Direct Memory)”">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to “概述”">​</a></h3><p>不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。直接内存是在Java堆外的、直接向系统申请的内存区间。来源于NIO，通过存在堆中的DirectByteBuffer操作Native内存。通常，访问直接内存的速度会优于Java堆，即读写性能高。</p><ul><li>因此出于性能考虑，读写频繁的场合可能会考虑使用直接内存。</li><li>Java的NIO库允许Java程序使用直接内存，用于数据缓冲区</li></ul><p>也可能导致OutOfMemoryError异常 <code>Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Direct buffer memory </code></p><p>由于直接内存在Java堆外，因此它的大小不会直接受限于-Xmx指定的最大堆大小，但是系统内存是有限的，Java堆和直接内存的总和依然受限于操作系统能给出的最大内存。</p><p><strong>缺点</strong></p><ul><li>分配回收成本较高</li><li>不受JVM内存回收管理</li></ul><p>直接内存大小可以通过<code>MaxDirectMemorySize</code>设置。如果不指定，默认与堆的最大值-Xmx参数值一致</p><img src="'+B+'" alt="image-20240323112633394"><h3 id="非直接缓存区" tabindex="-1">非直接缓存区 <a class="header-anchor" href="#非直接缓存区" aria-label="Permalink to “非直接缓存区”">​</a></h3><p>使用IO读写文件，需要与磁盘交互，需要由用户态切换到内核态。在内核态时，需要两份内存存储重复数据，效率低。</p><img src="'+F+'" alt="image-20240323104732025"><h3 id="直接缓存区" tabindex="-1">直接缓存区 <a class="header-anchor" href="#直接缓存区" aria-label="Permalink to “直接缓存区”">​</a></h3><p>使用NIO时，操作系统划出的直接缓存区可以被java代码直接访问，只有一份。NIO适合对大文件的读写操作。</p><img src="'+o+`" alt="image-20240323104841748"><h3 id="使用本地内存读写数据测试" tabindex="-1">使用本地内存读写数据测试 <a class="header-anchor" href="#使用本地内存读写数据测试" aria-label="Permalink to “使用本地内存读写数据测试”">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> BufferTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _100Mb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;/Users/manaphy/Movies/1.mp4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SneakyThrows</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;/Users/manaphy/Movies/hoy/1_&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;.mp4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">            //sum = io(TO, dest);// 1099</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> directBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(TO, dest);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 644</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;总花费的时间为:%d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, sum);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> long</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> directBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">src</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">dest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">currentTimeMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> inChannel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(src).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> outChannel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dest).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        ByteBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> byteBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">allocateDirect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(_100Mb);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (inChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(byteBuffer) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            byteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">flip</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 修改为读数据模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            outChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(byteBuffer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            byteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 清空</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> end</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">currentTimeMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> start;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> long</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> io</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">src</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">dest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">currentTimeMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(src);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dest);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[_100Mb];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(buffer);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            fos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(buffer, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, len);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> end</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">currentTimeMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> start;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>可以看到使用直接内存所花费的时间比io要少</p>`,33);function u(s,f,v,_,J,b){const t=l,k=e("ClientOnly");return n(),r("div",null,[E,d(k,null,{default:g(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),y(t,{key:0,article:s.$frontmatter},null,8,["article"])):D("",!0)]}),_:1}),m])}const x=p(c,[["render",u]]);export{V as __pageData,x as default};
