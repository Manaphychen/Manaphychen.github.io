import{_ as s,c as i,o as a,aj as n}from"./chunks/framework._AF764y6.js";const h="/assets/1617446868395-70eb9d17-e49e-4231-8271-92f3815b8ec6.BPhdeF7Q.png",k="/assets/1617446868378-3d28f64d-d78b-4c73-9423-01139e7d5d17.1IFAcc-T.png",p="/assets/1617446868415-c123ca7f-10ae-4950-a3f9-ba46e222d94a.9Asrmc6j.png",l="/assets/1617446868402-838917d4-7308-4167-a696-bcc353542b18.B5gvhqE9.png",t="/assets/1617446868366-626f06a6-1361-4d15-b008-70d622e01aa1.DF_KAlYR.png",e="/assets/1617446868441-4216a1a5-4458-4077-87e5-509f1ea47beb.DAVltTmo.png",r="/assets/1617446868353-7783f96a-c32e-454e-8cee-1b7ff2da36ee.ClpqrDTo.png",d="/assets/1617446868344-fa5bde28-44d1-41df-af6c-2fcb98ca98f8.xW-Y3k5L.png",b=JSON.parse('{"title":"网络安全之密码学","description":"","frontmatter":{"title":"网络安全之密码学","date":"2023-11-02T10:44:19.000Z","permalink":"/pages/6aadc9/","categories":["后端","未分类"],"tags":[null],"author":"Manaphy"},"headers":[],"relativePath":"java/未分类/02.网络安全之密码学.md","filePath":"java/未分类/02.网络安全之密码学.md","lastUpdated":1743259133000}'),g={name:"java/未分类/02.网络安全之密码学.md"},A=n('<h2 id="_1-常见加密方式" tabindex="-1">1 常见加密方式 <a class="header-anchor" href="#_1-常见加密方式" aria-label="Permalink to “1 常见加密方式”">​</a></h2><p><img src="'+h+'" alt=""></p><h3 id="_1-1-对称加密" tabindex="-1">1.1 对称加密 <a class="header-anchor" href="#_1-1-对称加密" aria-label="Permalink to “1.1 对称加密”">​</a></h3><ul><li>采用单钥密码系统的加密方法，同一个密钥可以同时用作信息的加密和解密，这种加密方法称为对称加密，也称为单密钥加密。</li><li>常见加密算法 <ul><li>DES : Data Encryption Standard，即数据加密标准，是一种使用密钥加密的块算法，1977年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），并授权在非密级政府通信中使用，随后该算法在国际上广泛流传开来。</li><li>AES : Advanced Encryption Standard, 高级加密标准。在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。</li></ul></li><li>特点 <ul><li>加密速度快, 可以加密大文件</li><li>密文可逆, 一旦密钥文件泄漏, 就会导致数据暴露</li><li>加密后编码表找不到对应字符, 出现乱码</li><li>一般结合Base64使用</li></ul></li></ul><h3 id="_1-2-base64-算法" tabindex="-1">1.2 Base64 算法 <a class="header-anchor" href="#_1-2-base64-算法" aria-label="Permalink to “1.2 Base64 算法”">​</a></h3><h4 id="_1-2-1-算法简介" tabindex="-1">1.2.1 算法简介 <a class="header-anchor" href="#_1-2-1-算法简介" aria-label="Permalink to “1.2.1 算法简介”">​</a></h4><blockquote><p>Base64是网络上最常见的用于传输8Bit字节码的可读性编码算法之一</p><p>可读性编码算法不是为了保护数据的安全性，而是为了可读性</p><p>可读性编码不改变信息内容，只改变信息内容的表现形式</p><p>所谓Base64，即是说在编码过程中使用了64种字符：大写A到Z、小写a到z、数字0到9、“+”和“/”</p><p>Base58是Bitcoin(比特币)中使用的一种编码方式，主要用于产生Bitcoin的钱包地址</p><p>相比Base64，Base58不使用数字&quot;0&quot;，字母大写&quot;O&quot;，字母大写&quot;I&quot;，和字母小写&quot;i&quot;，以及&quot;+&quot;和&quot;/&quot;符号</p></blockquote><h4 id="_1-2-2-base64-算法原理" tabindex="-1">1.2.2 Base64 算法原理 <a class="header-anchor" href="#_1-2-2-base64-算法原理" aria-label="Permalink to “1.2.2 Base64 算法原理”">​</a></h4><p>base64 是 3个字节为一组，一个字节 8位，一共 就是24位 ，然后，把3个字节转成4组，每组6位，3×8 <em>=</em> 4×6 = 24 ，每组6位，缺少的2位，会在高位进行补0 ，这样做的好处在于 base取的是后面6位，去掉高2位 ，那么base64的取值就可以控制在0-63位了，所以就叫base64，<code>111 111 = 32 + 16 + 8 + 4 + 2 + 1</code></p><h4 id="_1-2-3-base64-构成原则" tabindex="-1">1.2.3 base64 构成原则 <a class="header-anchor" href="#_1-2-3-base64-构成原则" aria-label="Permalink to “1.2.3 base64 构成原则”">​</a></h4><p>① 小写 <code>a - z</code> =&gt; 26个字母</p><p>② 大写 <code>A - Z</code> =&gt; 26个字母</p><p>③ 数字 <code>0 - 9</code> =&gt; 10 个数字</p><p>④ <code>+ /</code> =&gt;2个符号</p><p>大家可能发现一个问题，咱们的base64有个 = 号，但是在映射表里面没有发现 = 号 ， 这个地方需要注意，等号非常特殊，因为base64是三个字节一组 ，如果当我们的位数不够的时候，会使用等号来补齐</p><p><img src="'+k+`" alt=""></p><h3 id="_1-3-des加密和解密" tabindex="-1">1.3 DES加密和解密 <a class="header-anchor" href="#_1-3-des加密和解密" aria-label="Permalink to “1.3 DES加密和解密”">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cn.hutool.core.codec.Base64;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> org.junit.Test;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> javax.crypto.Cipher;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> javax.crypto.spec.SecretKeySpec;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> EncryptTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> DesTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 要加密的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;内容&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // DES加密算法，key的大小必须是8个字节</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;12345678&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> transformation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;DES&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 指定获取密钥的算法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> algorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;DES&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> encryptDES</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> encryptDesAes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input, key, transformation, algorithm);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;加密:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> encryptDES);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//加密:w4M6kCoVpZE=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> decryptDesAes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(encryptDES, key, transformation, algorithm);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;解密:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//解密:内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * DES AES加密数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> input</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">          : 原文</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> key</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">            : 密钥(DES,密钥的长度必须是8个字节;AES是16个字节)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> transformation</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> : 获取Cipher对象的算法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> algorithm</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      : 获取密钥的算法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> {@link String}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@throws</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Exception</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 异常</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encryptDesAes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">transformation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">algorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 获取加密对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Cipher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cipher</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(transformation);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 创建加密规则</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 第一个参数key的字节</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 第二个参数表示加密算法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        SecretKeySpec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> SecretKeySpec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), algorithm);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // ENCRYPT_MODE：加密模式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // DECRYPT_MODE: 解密模式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 初始化加密模式和算法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Cipher.ENCRYPT_MODE, sks);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 加密</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">doFinal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 返回加密后的数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * DES AES解密</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> input</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">          : 密文</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> key</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">            : 密钥</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> transformation</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> : 获取Cipher对象的算法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> algorithm</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      : 获取密钥的算法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 原文</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@throws</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Exception</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 异常</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">decryptDesAes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">transformation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">algorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 1.获取Cipher对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Cipher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cipher</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(transformation);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 2.指定密钥规则</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        SecretKeySpec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> SecretKeySpec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), algorithm);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Cipher.DECRYPT_MODE, sks);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 3. 解密，上面使用的base64编码，下面直接用密文</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">doFinal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        //  因为是明文，所以直接返回</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_1-4-aes加密解密" tabindex="-1">1.4 AES加密解密 <a class="header-anchor" href="#_1-4-aes加密解密" aria-label="Permalink to “1.4 AES加密解密”">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> AesTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 要加密的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;内容&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // AES加密算法，key的大小必须是16个字节</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;1234567812345678&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> transformation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;AES&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 指定获取密钥的算法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> algorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;AES&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> encryptDES</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> encryptDesAes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input, key, transformation, algorithm);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;加密:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> encryptDES);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//加密:uZFKEeJj50wA5bq8PzuPLw==</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> decryptDesAes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(encryptDES, key, transformation, algorithm);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;解密:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//解密:内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="_2-加密模式" tabindex="-1">2 加密模式 <a class="header-anchor" href="#_2-加密模式" aria-label="Permalink to “2 加密模式”">​</a></h2><h3 id="_2-1-ecb" tabindex="-1">2.1 ECB <a class="header-anchor" href="#_2-1-ecb" aria-label="Permalink to “2.1 ECB”">​</a></h3><blockquote><p>ECB : Electronic codebook, 电子密码本. 需要加密的消息按照块密码的块大小被分为数个块，并对每个块进行独立加密</p></blockquote><p><img src="`+p+'" alt=""></p><ul><li>优点 : 可以并行处理数据</li><li>缺点 : 同样的原文生成同样的密文, 不能很好的保护数据</li><li>同时加密，原文是一样的，加密出来的密文也是一样的</li></ul><h3 id="_2-2-cbc" tabindex="-1">2.2 CBC <a class="header-anchor" href="#_2-2-cbc" aria-label="Permalink to “2.2 CBC”">​</a></h3><blockquote><p>CBC : Cipher-block chaining, 密码块链接. 每个明文块先与前一个密文块进行异或后，再进行加密。在这种方法中，每个密文块都依赖于它前面的所有明文块</p></blockquote><p><img src="'+l+`" alt=""></p><ul><li>优点 : 同样的原文生成的密文不一样</li><li>缺点 : 串行处理数据</li></ul><h2 id="_3-填充模式" tabindex="-1">3 填充模式 <a class="header-anchor" href="#_3-填充模式" aria-label="Permalink to “3 填充模式”">​</a></h2><blockquote><p>当需要按块处理的数据, 数据长度不符合块处理需求时, 按照一定的方法填充满块长的规则</p></blockquote><h3 id="_3-1-nopadding" tabindex="-1">3.1 NoPadding <a class="header-anchor" href="#_3-1-nopadding" aria-label="Permalink to “3.1 NoPadding”">​</a></h3><ul><li>不填充.</li><li>在DES加密算法下, 要求原文长度必须是8byte的整数倍</li><li>在AES加密算法下, 要求原文长度必须是16byte的整数倍</li></ul><h3 id="_3-2-pkcs5padding" tabindex="-1">3.2 PKCS5Padding <a class="header-anchor" href="#_3-2-pkcs5padding" aria-label="Permalink to “3.2 PKCS5Padding”">​</a></h3><p>数据块的大小为8位, 不够就补足</p><h3 id="_3-3-说明" tabindex="-1">3.3 说明 <a class="header-anchor" href="#_3-3-说明" aria-label="Permalink to “3.3 说明”">​</a></h3><ul><li>默认情况下, 加密模式和填充模式为 : ECB/PKCS5Padding</li><li>如果使用CBC模式, 在初始化Cipher对象时, 需要增加参数, 初始化向量IV : <code>IvParameterSpec iv = new IvParameterSpec(key.getBytes());</code></li></ul><p>加密模式和填充模式</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>AES/CBC/NoPadding (128)</span></span>
<span class="line"><span>AES/CBC/PKCS5Padding (128)</span></span>
<span class="line"><span>AES/ECB/NoPadding (128)</span></span>
<span class="line"><span>AES/ECB/PKCS5Padding (128)</span></span>
<span class="line"><span>DES/CBC/NoPadding (56)</span></span>
<span class="line"><span>DES/CBC/PKCS5Padding (56)</span></span>
<span class="line"><span>DES/ECB/NoPadding (56)</span></span>
<span class="line"><span>DES/ECB/PKCS5Padding (56)</span></span>
<span class="line"><span>DESede/CBC/NoPadding (168)</span></span>
<span class="line"><span>DESede/CBC/PKCS5Padding (168)</span></span>
<span class="line"><span>DESede/ECB/NoPadding (168)</span></span>
<span class="line"><span>DESede/ECB/PKCS5Padding (168)</span></span>
<span class="line"><span>RSA/ECB/PKCS1Padding (1024, 2048)</span></span>
<span class="line"><span>RSA/ECB/OAEPWithSHA-1AndMGF1Padding (1024, 2048)</span></span>
<span class="line"><span>RSA/ECB/OAEPWithSHA-256AndMGF1Padding (1024, 2048)</span></span></code></pre></div><h3 id="_3-4-案例" tabindex="-1">3.4 案例 <a class="header-anchor" href="#_3-4-案例" aria-label="Permalink to “3.4 案例”">​</a></h3><p>DES/ECB/NoPadding 加密模式</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 要加密的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;内容12&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // DES加密算法，key的大小必须是8个字节</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;12345678&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 指定获取Cipher的算法,如果没有指定加密模式和填充模式,ECB/PKCS5Padding就是默认值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // NoPadding模式,原文的长度必须是8个字节的整倍数 ，所以必须把 内容 改成 内容12 补足8位</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> transformation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;DES/ECB/NoPadding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 指定获取密钥的算法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> algorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;DES&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> encryptDES</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> encryptDesAes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input, key, transformation, algorithm);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;加密:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> encryptDES);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//加密:LpgdNawVOqY=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> decryptDesAes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(encryptDES, key, transformation, algorithm);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;解密:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//解密:内容12</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>DES/CBC/PKCS5Padding 加密模式</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cn.hutool.core.codec.Base64;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> org.junit.Test;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> javax.crypto.Cipher;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> javax.crypto.spec.IvParameterSpec;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> javax.crypto.spec.SecretKeySpec;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> EncryptTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 要加密的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;内容&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // DES加密算法，key的大小必须是8个字节</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;12345678&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 指定获取Cipher的算法,如果没有指定加密模式和填充模式,ECB/PKCS5Padding就是默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> transformation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;DES/CBC/PKCS5Padding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 指定获取密钥的算法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> algorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;DES&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> encryptDES</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> encryptDesAes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input, key, transformation, algorithm);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;加密:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> encryptDES);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//加密:aBDOoVb1td4=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> decryptDesAes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(encryptDES, key, transformation, algorithm);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;解密:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//解密:内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encryptDesAes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">transformation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">algorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Cipher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cipher</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(transformation);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        SecretKeySpec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> SecretKeySpec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), algorithm);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 初始向量，参数表示跟谁进行异或，初始向量的长度必须是8位</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        IvParameterSpec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> iv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> IvParameterSpec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Cipher.ENCRYPT_MODE, sks, iv);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">doFinal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">decryptDesAes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">transformation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">algorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Cipher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cipher</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(transformation);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        SecretKeySpec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> SecretKeySpec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), algorithm);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        IvParameterSpec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> iv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> IvParameterSpec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Cipher.DECRYPT_MODE, sks,iv);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">doFinal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="_4-消息摘要" tabindex="-1">4 消息摘要 <a class="header-anchor" href="#_4-消息摘要" aria-label="Permalink to “4 消息摘要”">​</a></h2><ul><li>消息摘要（Message Digest）又称为数字摘要(Digital Digest)</li><li>它是一个唯一对应一个消息或文本的固定长度的值，它由一个单向Hash加密函数对消息进行作用而产生</li><li>使用数字摘要生成的值是不可以篡改的，为了保证文件或者值的安全</li></ul><h3 id="_4-1-特点" tabindex="-1">4.1 特点 <a class="header-anchor" href="#_4-1-特点" aria-label="Permalink to “4.1 特点”">​</a></h3><blockquote><p>无论输入的消息有多长，计算出来的消息摘要的长度总是固定的。例如应用MD5算法摘要的消息有128个比特位，用SHA-1算法摘要的消息最终有160比特位的输出</p><p>只要输入的消息不同，对其进行摘要以后产生的摘要消息也必不相同；但相同的输入必会产生相同的输出</p><p>消息摘要是单向、不可逆的</p></blockquote><h3 id="_4-2-常见算法" tabindex="-1">4.2 常见算法 <a class="header-anchor" href="#_4-2-常见算法" aria-label="Permalink to “4.2 常见算法”">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>- MD5</span></span>
<span class="line"><span>- SHA1</span></span>
<span class="line"><span>- SHA256</span></span>
<span class="line"><span>- SHA512</span></span></code></pre></div><h3 id="_4-3-获取字符串消息摘要" tabindex="-1">4.3 获取字符串消息摘要 <a class="header-anchor" href="#_4-3-获取字符串消息摘要" aria-label="Permalink to “4.3 获取字符串消息摘要”">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> EncryptTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test02</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;chen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 获取数字摘要对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> md5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getDigest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;MD5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(md5);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//a1a8887793acfc199182a649e905daab</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sha1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getDigest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;SHA-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(sha1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//8a89798cf0878e37bb6589ae1c36b9d8a036275b</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sha256</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getDigest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;SHA-256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(sha256);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//3abd72ec6352d6085d85e34f0478dca7d14ef8048f3c1986e28106d654713946</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sha512</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getDigest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;SHA-512&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(sha512);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//e3b92710045fbae402523dbf08fdf0b07c7ba1969c0311c618a33f0cb82b76d3fa325bee6eb5a9ae5dd0bcf137e76d50587184493f1e70daa4a5366dd7776af0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * 十六进制化字节数组</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> digest</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 字节数组</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> {@link String}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toHex</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">digest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 创建对象用来拼接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> digest) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">            // 转成 16进制</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Integer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0xff</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                // 如果生成的字符只有一个，前面补0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;0&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 消息数字摘要</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> input</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">     输入</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> algorithm</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 算法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> {@link String}* </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@throws</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Exception</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 异常</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getDigest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">algorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        MessageDigest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> messageDigest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MessageDigest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(algorithm);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 消息数字摘要</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">digest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> messageDigest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">digest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> toHex</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(digest);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_4-4-获取文件消息摘要" tabindex="-1">4.4 获取文件消息摘要 <a class="header-anchor" href="#_4-4-获取文件消息摘要" aria-label="Permalink to “4.4 获取文件消息摘要”">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test03</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sha1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getDigestFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Data</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Pictures</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">1.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;SHA-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(sha1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//63be2a2ad212f3965962eaf0e302efca18fc7d2d</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sha512</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getDigestFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Data</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Pictures</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">1.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;SHA-512&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(sha512);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//d98baf298686f862b714410b4605e93e1644ca528465ba7ff0567b6f8851674567248d53740b6a24ec3c88ec26bb7c163bfcca981a753cf8f50c438e08031082</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getDigestFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String filePath, String algorithm) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(filePath);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> len;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ByteArrayOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> baos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ByteArrayOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ((len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(buffer)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        baos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(buffer, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, len);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 获取消息摘要对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    MessageDigest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> messageDigest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MessageDigest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(algorithm);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 获取消息摘要</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">digest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> messageDigest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">digest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(baos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> toHex</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(digest);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_4-5-总结" tabindex="-1">4.5 总结 <a class="header-anchor" href="#_4-5-总结" aria-label="Permalink to “4.5 总结”">​</a></h3><ul><li>MD5算法 : 摘要结果16个字节, 转16进制后32个字节</li><li>SHA1算法 : 摘要结果20个字节, 转16进制后40个字节</li><li>SHA256算法 : 摘要结果32个字节, 转16进制后64个字节</li><li>SHA512算法 : 摘要结果64个字节, 转16进制后128个字节</li></ul><h2 id="_5-非对称加密" tabindex="-1">5 非对称加密 <a class="header-anchor" href="#_5-非对称加密" aria-label="Permalink to “5 非对称加密”">​</a></h2><div class="tip custom-block"><p class="custom-block-title">简介</p><p>非对称加密算法又称<code>现代加密算法</code>。</p><p>非对称加密是计算机通信安全的基石，保证了加密数据<code>不会被破解</code>。</p><p>与对称加密算法不同，非对称加密算法需要两个密钥：<code>公开密钥(publickey)</code> 和<code>私有密(privatekey)</code></p><p>公开密钥和私有密钥是<code>一对</code></p><p>如果用<code>公开密钥</code>对数据进行<code>加密</code>，只有用<code>对应的私有密钥</code>才能<code>解密</code>。</p><p>如果用<code>私有密钥</code>对数据进行<code>加密</code>，只有用<code>对应的公开密钥</code>才能<code>解密</code>。</p><p>因为加密和解密使用的是两个<code>不同</code>的密钥，所以这种算法叫作<code>非对称加密算法</code>。</p></div><p><strong>示例</strong></p><ul><li>首先生成密钥对, 公钥为(5,14), 私钥为(11,14)</li><li>现在A希望将原文2发送给B</li><li>A使用公钥加密数据. 2的5次方mod 14 = 4 , 将密文4发送给B</li><li>B使用私钥解密数据. 4的11次方mod14 = 2, 得到原文2</li></ul><p><strong>特点</strong></p><ul><li>加密和解密使用不同的密钥</li><li>如果使用私钥加密, 只能使用公钥解密</li><li>如果使用公钥加密, 只能使用私钥解密</li><li>处理数据的速度较慢, 因为安全级别高</li></ul><p><strong>常见算法</strong></p><ul><li>RSA</li><li>ECC</li></ul><h3 id="_5-1-生成公钥和私钥" tabindex="-1">5.1 生成公钥和私钥 <a class="header-anchor" href="#_5-1-生成公钥和私钥" aria-label="Permalink to “5.1 生成公钥和私钥”">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test04</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 加密算法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> algorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;RSA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //  创建密钥对生成器对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    KeyPairGenerator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyPairGenerator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> KeyPairGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(algorithm);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 生成密钥对</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    KeyPair</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyPair</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyPairGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">generateKeyPair</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 生成私钥</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    PrivateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> privateKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyPair.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPrivate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 生成公钥</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    PublicKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> publicKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyPair.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPublic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 获取私钥字节数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">privateKeyEncoded</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> privateKey.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getEncoded</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 获取公钥字节数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">publicKeyEncoded</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> publicKey.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getEncoded</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 对公私钥进行base64编码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> privateKeyString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(privateKeyEncoded);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> publicKeyString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(publicKeyEncoded);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 打印私钥</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(privateKeyString);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 打印公钥</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(publicKeyString);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>生成示例</strong></p><p>私钥</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCCwVvY3aa69jqkbiLiKaqil0FNOF9husmKaQcl1R29iQetFFCNYvipJaKpvUdeUSzgo9LnEsvCpY+nYiBAbIH8v/ddk9KlSwz+y6sU/JAGRCMjE799hHFeM/wWwjsro/ZimmTXDsx5WOT2+hTz/EbcIwk0JRBPvMnZ+8ZDjuyu8PUHFz48y9suf427B0jb/H2+Va9mAZTivR01ENFme+mflXwDYT3JPzUT8s/qTQW+lc2XZoQDU8T+iSHyqcjjRpyo1CARTJ9yJ1RUSzDNeM/QzNkOjb3HIL4A3fFkNkt4GUz6FhqJQIPoWFw4ktXOT8x44koHAExBTl9AlqAz5LQtAgMBAAECggEAI216klb0HwIqP3Ur9HVvq2AqLF8S0OsIQn1Ul3aX+UvQjZ/Md5KSZ1owKaeEV9TMwQ0CTuOz28h6FNMsg+gijDYDMxKjZ2/fVIYgk64e4+PAVXe7Uan6AZk6O3xjBd8GGg9VNUPoORTR7O0zkiwPkwPXMY69Ta2MT4i9Xn6yOG/hUxOylz7K7LjbZzDApTgsr924QoZ8AnHWrla7fmgeyn+lW5XMFQJMlM9nZJQ4z0cwzT1DpV2r1T9b3Zhm4Rg6MEJ+Alip0a4t62bChV1jbdR8iVwfpItaD3d8hBd2nBlDOgh8fyBbu6vNGq8yFmLl3rhRG5eQJZOhQaqyUePUAQKBgQDmpWFjDX/zyGJoHy8cjXVI27tcdNjk4k714z10OkEwMmMGYU3q94qCmirB/J3xg/GGXXP6JsGa37VDn1CU7ebdHkdHWhaDpqCVbjnIEBanBg7P6BRw+GfQeyG0M9l8CXOLNcNw68Wn8o32YWB3ao8nUS3OVL6K+LTYkF7j1M9FLQKBgQCRIPMW3w+q+G8BBKNlNeDAQJSVkrt1LpSwIgrQRl9pkAz9/66N9bpiIQgTo0UJmL2QcX6dQfIXZOQHMrC/6P0ILkITrtNSal8IdaK3ulfA25UZ3JP07Vu209aBu5Jqm2nkuTYugDc/CEPrsa4Ge1MEBgKYniodejJnoVNm5l6LAQKBgF4LHNRokr1x/T37SRhZTXMxtQmT00QwSoXT7CDSB/aA9QOK9VxTJrTt63VBbZ0mcXqZ7EoZN2PQx3YVJaQ0BKgwSlv7jaaMcHm9ge3jMXlU7QE03fDaOGo3apyxb4I10Fj4yQHoAKXkLqJBPjYyyr/7R7QTtcWwdvy+kRJQmVrZAoGAK+4rZ1ryJTC6eTZsN3DNraRe1b/q2pfVDlPfrhf/PbcLF7/TmMkvOBEDnt4nQbZoe1a/mt6hZ490rvEbK5xdK6LFAaxD74ifZ7IkJTVU5t4RDhkE+Hj48CjDn9Wlhnuw3DlsOzs4fe4EkU3hfbjK8kbXdlc6LF4W7+OXmWhWagECgYA83s1t/Irl3drqnb36SKCVjdZPrx75HxKier3Ptn11Jb49GA06UOlxAkpcLQDlbQ4dghQnjiUsf3ATDOjrdaCF98Ysk15XWMNNeYGfpbHXm0fu0gU/JAVOkPuPIxuL95e1227+8Sm8u4S19qn7GgjpiKx/+4B8zPjNtzzuTp+keg==</span></span></code></pre></div><p>公钥</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAgsFb2N2muvY6pG4i4imqopdBTThfYbrJimkHJdUdvYkHrRRQjWL4qSWiqb1HXlEs4KPS5xLLwqWPp2IgQGyB/L/3XZPSpUsM/surFPyQBkQjIxO/fYRxXjP8FsI7K6P2Yppk1w7MeVjk9voU8/xG3CMJNCUQT7zJ2fvGQ47srvD1Bxc+PMvbLn+NuwdI2/x9vlWvZgGU4r0dNRDRZnvpn5V8A2E9yT81E/LP6k0FvpXNl2aEA1PE/okh8qnI40acqNQgEUyfcidUVEswzXjP0MzZDo29xyC+AN3xZDZLeBlM+hYaiUCD6FhcOJLVzk/MeOJKBwBMQU5fQJagM+S0LQIDAQAB</span></span></code></pre></div><h3 id="_5-2-私钥加密公钥解密" tabindex="-1">5.2 私钥加密公钥解密 <a class="header-anchor" href="#_5-2-私钥加密公钥解密" aria-label="Permalink to “5.2 私钥加密公钥解密”">​</a></h3><p>公钥加密私钥解密类似</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test05</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;内容&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> algorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;RSA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    KeyPairGenerator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyPairGenerator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> KeyPairGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(algorithm);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    KeyPair</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyPair</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyPairGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">generateKeyPair</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    PrivateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> privateKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyPair.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPrivate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    PublicKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> publicKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyPair.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPublic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 创建加密对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 参数表示加密算法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Cipher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cipher</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(algorithm);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 初始化加密</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 第一个参数:加密的模式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 第二个参数：使用私钥进行加密</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Cipher.ENCRYPT_MODE, privateKey);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 私钥加密</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">doFinal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 公钥进行解密</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Cipher.DECRYPT_MODE, publicKey);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 对密文进行解密，不需要使用base64，因为原文不会乱码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bytes1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">doFinal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes1));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>输出如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>k0W9BD/vBjVe4o2od1rStveoy2lMwsOpha6yBKTR15tX6aw/AlMcOju1AZrGKi7pgD/1Md/ki49tJR9/+YRTczVHOlIT63EDSd12H4KPfHAEH5jQMxKvEZ1xYlRQ52TicRNer254Df77uxKqiYoiUdcKx4+DGS+nPPhRIZtVP0oSnPnC956S26hKtrLqYdHusHG7sdq3+aOLtK1uUVoxlCiiBIU5oWomRCfLZgVjCya7ZvK/vLWKk2W0B6/4m5xrGae1fzJGGSBpZKS+Gt+3Z+Z4U9QK7QsAVVO7dix46F5DngMb3nr2uvwWM+HcEQ0GPK2lRo9glzvGZ/9InlhGuw==</span></span>
<span class="line"><span>内容</span></span></code></pre></div><h3 id="_5-3-保存公钥和私钥" tabindex="-1">5.3 保存公钥和私钥 <a class="header-anchor" href="#_5-3-保存公钥和私钥" aria-label="Permalink to “5.3 保存公钥和私钥”">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test06</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> algorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;RSA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //生成密钥对并保存在本地文件中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    generateKeyToFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(algorithm, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;a.pub&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;a.pri&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 生成密钥对并保存在本地文件中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> algorithm</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> : 算法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> pubPath</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">   : 公钥保存路径</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> priPath</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">   : 私钥保存路径</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@throws</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Exception</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 异常</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> generateKeyToFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String algorithm, String pubPath, String priPath) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 获取密钥对生成器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    KeyPairGenerator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyPairGenerator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> KeyPairGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(algorithm);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 获取密钥对</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    KeyPair</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyPair</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyPairGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">generateKeyPair</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 获取公钥</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    PublicKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> publicKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyPair.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPublic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 获取私钥</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    PrivateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> privateKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyPair.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPrivate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 获取byte数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">publicKeyEncoded</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> publicKey.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getEncoded</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">privateKeyEncoded</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> privateKey.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getEncoded</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 进行Base64编码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> publicKeyString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(publicKeyEncoded);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> privateKeyString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(privateKeyEncoded);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 保存文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    FileUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeStringToFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pubPath), publicKeyString, StandardCharsets.UTF_8);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    FileUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeStringToFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(priPath), privateKeyString, StandardCharsets.UTF_8);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_5-4-使用本地公钥私钥加密解密" tabindex="-1">5.4 使用本地公钥私钥加密解密 <a class="header-anchor" href="#_5-4-使用本地公钥私钥加密解密" aria-label="Permalink to “5.4 使用本地公钥私钥加密解密”">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test07</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;内容&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 加密算法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> algorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;RSA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    PrivateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> privateKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getPrivateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;a.pri&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, algorithm);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    PublicKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> publicKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getPublicKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;a.pub&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, algorithm);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> encrypt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> encryptRSA</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(algorithm, privateKey, input);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> decrypt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> decryptRSA</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(algorithm, publicKey, encrypt);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(encrypt);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(decrypt);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 读取公钥</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> publicPath</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 公钥路径</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> algorithm</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  算法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> {@link PublicKey}* </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@throws</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Exception</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 异常</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> PublicKey </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPublicKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String publicPath, String algorithm) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 将文件内容转为字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> publicKeyString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readFileToString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(publicPath), Charset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defaultCharset</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 获取密钥工厂</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    KeyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyFactory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> KeyFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(algorithm);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 构建密钥规范 进行Base64解码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    X509EncodedKeySpec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> spec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> X509EncodedKeySpec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(publicKeyString));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 生成公钥</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">generatePublic</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(spec);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 读取私钥</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> priPath</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">   私钥路径</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> algorithm</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 算法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> {@link PrivateKey}* </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@throws</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Exception</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 异常</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> PrivateKey </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPrivateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String priPath, String algorithm) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 将文件内容转为字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> privateKeyString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readFileToString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(priPath), Charset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defaultCharset</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 获取密钥工厂</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    KeyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyFactory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> KeyFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(algorithm);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 构建密钥规范 进行Base64解码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    PKCS8EncodedKeySpec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> spec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> PKCS8EncodedKeySpec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(privateKeyString));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 生成私钥</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keyFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">generatePrivate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(spec);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 使用密钥加密数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> algorithm</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> : 算法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> input</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">     : 原文</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> key</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">       : 密钥</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> {@link String}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@throws</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Exception</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 异常</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encryptRSA</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String algorithm, Key key, String input) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 创建加密对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 参数表示加密算法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Cipher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cipher</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(algorithm);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 初始化加密</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 第一个参数:加密的模式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 第二个参数：使用私钥进行加密</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Cipher.ENCRYPT_MODE, key);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 私钥加密</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">doFinal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 对密文进行Base64编码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 解密数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> algorithm</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> : 算法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> encrypted</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> : 密文</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> key</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">       : 密钥</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> {@link String}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@throws</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Exception</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 异常</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">decryptRSA</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String algorithm, Key key, String encrypted) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 创建加密对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 参数表示加密算法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Cipher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cipher</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(algorithm);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 私钥进行解密</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Cipher.DECRYPT_MODE, key);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 由于密文进行了Base64编码, 在这里需要进行解码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">decode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(encrypted);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 对密文进行解密，不需要使用base64，因为原文不会乱码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bytes1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cipher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">doFinal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(decode);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes1);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="_6-数字签名" tabindex="-1">6 数字签名 <a class="header-anchor" href="#_6-数字签名" aria-label="Permalink to “6 数字签名”">​</a></h2><blockquote><p>数字签名（又称<a href="https://baike.baidu.com/item/%E5%85%AC%E9%92%A5" target="_blank" rel="noreferrer">公钥</a>数字签名）是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。它是一种类似写在纸上的普通的物理签名，但是使用了<a href="https://baike.baidu.com/item/%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86/6245950" target="_blank" rel="noreferrer">公钥加密</a>领域的技术来实现的，用于鉴别数字信息的方法。一套数字签名通常定义两种互补的运算，一个用于签名，另一个用于验证。数字签名是非对称<a href="https://baike.baidu.com/item/%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF" target="_blank" rel="noreferrer">密钥加密技术</a>与<a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E6%91%98%E8%A6%81/4069118" target="_blank" rel="noreferrer">数字摘要</a>技术的应用。</p></blockquote><h3 id="_6-1-简单认识" tabindex="-1">6.1  简单认识 <a class="header-anchor" href="#_6-1-简单认识" aria-label="Permalink to “6.1  简单认识”">​</a></h3><p>相信我们都写过信，在写信的时候落款处总是要留下自己的名字，用来表示写信的人是谁。我们签的这个字就是生活中的签名：</p><p>而数字签名呢？其实也是同样的道理，他的含义是：在网络中传输数据时候，给数据添加一个数字签名，表示是谁发的数据，而且还能证明数据没有被篡改。</p><p>OK，数字签名的主要作用就是保证了数据的有效性（验证是谁发的）和完整性（证明信息没有被篡改）。下面我们就来好好地看一下他的底层实现原理是什么样子的。</p><h3 id="_6-2-基本原理" tabindex="-1">6.2 基本原理 <a class="header-anchor" href="#_6-2-基本原理" aria-label="Permalink to “6.2 基本原理”">​</a></h3><p>为了理解得清楚，我们通过案例一步一步来讲解。话说张三有俩好哥们A、B。由于工作原因，张三和AB写邮件的时候为了安全都需要加密。于是张三想到了数字签名：</p><p>整个思路是这个样子的：</p><p>第一步：加密采用非对称加密，张三有三把钥匙，两把公钥，送给朋友。一把私钥留给自己。</p><p>第二步：A或者B写邮件给张三：A先用公钥对邮件加密，然后张三收到邮件之后使用私钥解密。</p><p>第三步：张三写邮件给A或者B：</p><p>（1）张三写完邮件，先用hash函数生成邮件的摘要，附着在文章上面，这就完成了数字签名，然后张三再使用私钥加密。就可以把邮件发出去了。</p><p>（2）A或者是B收到邮件之后，先把数字签名取下来，然后使用自己的公钥解密即可。这时候取下来的数字签名中的摘要若和张三的一致，那就认为是张三发来的，再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行对比。如果两者一致，就证明这封信未被修改过。</p><p>上面的流程我们使用一张图来演示一下：</p><p>首先把公钥送给朋友A和B：</p><p><img src="`+t+'" alt=""></p><h3 id="_6-3-数字证书" tabindex="-1">6.3 数字证书 <a class="header-anchor" href="#_6-3-数字证书" aria-label="Permalink to “6.3 数字证书”">​</a></h3><p>上面提到我们对签名进行验证时，需要用到公钥。如果公钥是伪造的，那我们无法验证数字签名了，也就根本不可能从数字签名确定对方的合法性了。这时候证书就闪亮登场了。我们可能都有考各种证书的经历，比如说普通话证书，四六级证书等等，但是归根结底，到任何场合我们都能拿出我们的证书来证明自己确实已经考过了普通话，考过了四六级。这里的证书也是同样的道理。</p><p>如果不理解证书的作用，我们可以举一个例子，比如说我们的毕业证书，任何公司都会承认。为什么会承认？因为那是国家发得，大家都信任国家。也就是说只要是国家的认证机构，我们都信任它是合法的。</p><p>那么这个证书是如何生成的呢？我们再来看一张图：</p><p><img src="'+e+'" alt=""></p><p>此时即使张三的朋友A把公钥弄错了，张三也可以通过这个证书验证。</p><h3 id="_6-4-网页加密" tabindex="-1">6.4 网页加密 <a class="header-anchor" href="#_6-4-网页加密" aria-label="Permalink to “6.4 网页加密”">​</a></h3><p>我们看一个应用“数字证书”的实例：https协议。这个协议主要用于网页加密</p><p>首先，客户端向服务器发出加密请求。</p><p><img src="'+r+`" alt=""></p><h3 id="_6-5-代码实现" tabindex="-1">6.5 代码实现 <a class="header-anchor" href="#_6-5-代码实现" aria-label="Permalink to “6.5 代码实现”">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test08</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    PublicKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> publicKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getPublicKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;a.pub&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;RSA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    PrivateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> privateKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getPrivateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;a.pri&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;RSA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> signaturedData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getSignature</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sha256withrsa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, privateKey);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> verifySignature</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sha256withrsa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, publicKey, signaturedData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(b);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 生成签名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> input</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      : 原文</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> algorithm</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  : 算法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> privateKey</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> : 私钥</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> {@link String}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@throws</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Exception</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 异常</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getSignature</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String input, String algorithm, PrivateKey privateKey) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 获取签名对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Signature</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> signature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Signature.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(algorithm);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 初始化签名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    signature.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">initSign</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(privateKey);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 传入原文</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    signature.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 开始签名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sign</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> signature.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">sign</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 对签名数据进行Base64编码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(sign);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 校验签名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> input</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">          : 原文</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> algorithm</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      : 算法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> publicKey</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      : 公钥</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> signaturedData</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> : 签名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@throws</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Exception</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 异常</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> verifySignature</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String input, String algorithm, PublicKey publicKey, String signaturedData) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 获取签名对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Signature</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> signature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Signature.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(algorithm);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 初始化签名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    signature.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">initVerify</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(publicKey);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 传入原文</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    signature.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 校验数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> signature.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(signaturedData));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="_7-keytool工具使用" tabindex="-1">7 keytool工具使用 <a class="header-anchor" href="#_7-keytool工具使用" aria-label="Permalink to “7 keytool工具使用”">​</a></h2><p>keytool工具路径：Java bin目录</p><p><img src="`+d+`" alt=""></p><p><strong>常用命令</strong></p><p>生成keypair</p><p>keytool -genkeypair</p><p>keytool -genkeypair -alias lisi（后面部分是为证书指定别名，否则采用默认的名称为mykey)</p><p>看看keystore中有哪些项目：</p><p>keytool -list或keytool -list -v</p><p>keytool -exportcert -alias lisi -file lisi.cer</p><p>生成可打印的证书：</p><p>keytool -exportcert -alias lisi -file lisi.cer –rfc</p><p>显示数字证书文件中的证书信息：</p><p>keytool -printcert -file lisi.cer</p><p>直接双击lisi.cer，用window系统的内置程序打开lisi.cer</p><p><strong>生成私钥公钥</strong></p><p>生成密钥证书 下边命令生成密钥证书，采用RSA 算法每个证书包含公钥和私钥</p><p>创建一个文件夹，在该文件夹下执行如下命令行：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">keytool</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -genkeypair</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -alias</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> chen</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -keyalg</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> RSA</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -keypass</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> chennn</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -keystore</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> chen.jks</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -storepass</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> chennn</span></span></code></pre></div><p>Keytool 是一个java提供的证书管理工具</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>-alias：密钥的别名 </span></span>
<span class="line"><span>-keyalg：使用的hash算法 </span></span>
<span class="line"><span>-keypass：密钥的访问密码 </span></span>
<span class="line"><span>-keystore：密钥库文件名，xc.keystore保存了生成的证书 </span></span>
<span class="line"><span>-storepass：密钥库的访问密码</span></span></code></pre></div><p>查询证书信息</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">keytool</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -list</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -keystore</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> chen.jks</span></span></code></pre></div><p>删除别名</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">keytool</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -delete</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -alias</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> chen</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -keystore</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> chen.jsk</span></span></code></pre></div>`,134),y=[A];function D(C,c,B,F,E,o){return a(),i("div",null,y)}const m=s(g,[["render",D]]);export{b as __pageData,m as default};
