import{_ as e,c as t,o as a,aj as r}from"./chunks/framework._AF764y6.js";const u=JSON.parse('{"title":"章节介绍","description":"","frontmatter":{"title":"章节介绍","author":"约书亚·布洛克（Joshua Bloch）","date":"2024/10/01 10:24","categories":["高效Java"],"tags":["Java","Java基础"]},"headers":[],"relativePath":"book/高效Java/00.章节介绍.md","filePath":"book/高效Java/00.章节介绍.md","lastUpdated":1743612544000}'),i={name:"book/高效Java/00.章节介绍.md"},o=r('<h3 id="chapter-2-introduction-章节介绍" tabindex="-1">Chapter 2 Introduction（章节介绍） <a class="header-anchor" href="#chapter-2-introduction-章节介绍" aria-label="Permalink to “Chapter 2 Introduction（章节介绍）”">​</a></h3><p>This chapter concerns（关注、涉及） creating and destroying objects: when and how to create them, when and how to avoid creating them, how to ensure they are destroyed in a timely manner, and how to manage any cleanup actions that must precede their destruction.</p><p>本章涉及创建和销毁对象：何时以及如何创建对象，何时以及如何避免创建对象，如何确保它们被及时销毁，以及如何管理在销毁之前必须执行的清理操作。</p><h3 id="contents-of-the-chapter-章节目录" tabindex="-1">Contents of the chapter（章节目录） <a class="header-anchor" href="#contents-of-the-chapter-章节目录" aria-label="Permalink to “Contents of the chapter（章节目录）”">​</a></h3><ul><li><a href="/Chapter-2/Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors">Item 1: Consider static factory methods instead of constructors（考虑以静态工厂方法代替构造函数）</a></li><li><a href="/Chapter-2/Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters">Item 2: Consider a builder when faced with many constructor parameters（在面对多个构造函数参数时，请考虑构建器）</a></li><li><a href="/Chapter-2/Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type">Item 3: Enforce the singleton property with a private constructor or an enum type（使用私有构造函数或枚举类型实施单例属性）</a></li><li><a href="/Chapter-2/Chapter-2-Item-4-Enforce-noninstantiability-with-a-private-constructor">Item 4: Enforce noninstantiability with a private constructor（用私有构造函数实施不可实例化）</a></li><li><a href="/Chapter-2/Chapter-2-Item-5-Prefer-dependency-injection-to-hardwiring-resources">Item 5: Prefer dependency injection to hardwiring resources（依赖注入优于硬连接资源）</a></li><li><a href="/Chapter-2/Chapter-2-Item-6-Avoid-creating-unnecessary-objects">Item 6: Avoid creating unnecessary objects（避免创建不必要的对象）</a></li><li><a href="/Chapter-2/Chapter-2-Item-7-Eliminate-obsolete-object-references">Item 7: Eliminate obsolete object references（排除过时的对象引用）</a></li><li><a href="/Chapter-2/Chapter-2-Item-8-Avoid-finalizers-and-cleaners">Item 8: Avoid finalizers and cleaners（避免使用终结器和清除器）</a></li><li><a href="/Chapter-2/Chapter-2-Item-9-Prefer-try-with-resources-to-try-finally">Item 9: Prefer try with resources to try finally（使用 try-with-resources 优于 try-finally）</a></li></ul><h3 id="chapter-3-introduction-章节介绍" tabindex="-1">Chapter 3 Introduction（章节介绍） <a class="header-anchor" href="#chapter-3-introduction-章节介绍" aria-label="Permalink to “Chapter 3 Introduction（章节介绍）”">​</a></h3><p>ALTHOUGH Object is a concrete class, it is designed primarily for extension. All of its nonfinal methods (equals, hashCode, toString, clone, and finalize) have explicit general contracts because they are designed to be overridden. It is the responsibility of any class overriding these methods to obey their general contracts; failure to do so will prevent other classes that depend on the contracts (such as HashMap and HashSet) from functioning properly in conjunction with the class.</p><p>虽然 Object 是一个具体的类，但它主要是为扩展而设计的。它的所有非 final 方法（equals、hashCode、toString、clone 和 finalize）都有显式的通用约定，因为它们的设计目的是被覆盖。任何类都有责任覆盖这些方法并将之作为一般约定；如果不这样做，将阻止依赖于约定的其他类（如 HashMap 和 HashSet）与之一起正常工作。</p><p>This chapter tells you when and how to override the nonfinal Object methods. The finalize method is omitted from this chapter because it was discussed in Item 8. While not an Object method,Comparable.compareTo is discussed in this chapter because it has a similar character.</p><p>本章将告诉你何时以及如何覆盖 Object 类的非 final 方法。finalize 方法在本章中被省略，因为它在 <a href="/Chapter-2/Chapter-2-Item-8-Avoid-finalizers-and-cleaners">Item-8</a> 中讨论过。虽然 Comparable.compareTo 不是 Object 类的方法，但是由于具有相似的特性，所以本章也对它进行讨论。</p><h3 id="contents-of-the-chapter-章节目录-1" tabindex="-1">Contents of the chapter（章节目录） <a class="header-anchor" href="#contents-of-the-chapter-章节目录-1" aria-label="Permalink to “Contents of the chapter（章节目录）”">​</a></h3><ul><li><a href="/Chapter-3/Chapter-3-Item-10-Obey-the-general-contract-when-overriding-equals">Item 10: Obey the general contract when overriding equals（覆盖 equals 方法时应遵守的约定）</a></li><li><a href="/Chapter-3/Chapter-3-Item-11-Always-override-hashCode-when-you-override-equals">Item 11: Always override hashCode when you override equals（当覆盖 equals 方法时，总要覆盖 hashCode 方法）</a></li><li><a href="/Chapter-3/Chapter-3-Item-12-Always-override-toString">Item 12: Always override toString（始终覆盖 toString 方法）</a></li><li><a href="/Chapter-3/Chapter-3-Item-13-Override-clone-judiciously">Item 13: Override clone judiciously（明智地覆盖 clone 方法）</a></li><li><a href="/Chapter-3/Chapter-3-Item-14-Consider-implementing-Comparable">Item 14: Consider implementing Comparable（考虑实现 Comparable 接口）</a></li></ul><h3 id="chapter-4-introduction-章节介绍" tabindex="-1">Chapter 4 Introduction（章节介绍） <a class="header-anchor" href="#chapter-4-introduction-章节介绍" aria-label="Permalink to “Chapter 4 Introduction（章节介绍）”">​</a></h3><p>CLASSES and interfaces lie at the heart of the Java programming language. They are its basic units of abstraction. The language provides many powerful elements that you can use to design classes and interfaces. This chapter contains guidelines to help you make the best use of these elements so that your classes and interfaces are usable, robust, and flexible.</p><p>类和接口是 Java 编程语言的核心。它们是抽象的基本单位。该语言提供了许多强大的元素，你可以使用它们来设计类和接口。本章包含了帮助你充分利用这些元素的指导原则，以便让你的类和接口是可用的、健壮的和灵活的。</p><h3 id="contents-of-the-chapter-章节目录-2" tabindex="-1">Contents of the chapter（章节目录） <a class="header-anchor" href="#contents-of-the-chapter-章节目录-2" aria-label="Permalink to “Contents of the chapter（章节目录）”">​</a></h3><ul><li><a href="/Chapter-4/Chapter-4-Item-15-Minimize-the-accessibility-of-classes-and-members">Item 15: Minimize the accessibility of classes and members（尽量减少类和成员的可访问性）</a></li><li><a href="/Chapter-4/Chapter-4-Item-16-In-public-classes-use-accessor-methods-not-public-fields">Item 16: In public classes use accessor methods not public fields（在公共类中，使用访问器方法，而不是公共字段）</a></li><li><a href="/Chapter-4/Chapter-4-Item-17-Minimize-mutability">Item 17: Minimize mutability（减少可变性）</a></li><li><a href="/Chapter-4/Chapter-4-Item-18-Favor-composition-over-inheritance">Item 18: Favor composition over inheritance（优先选择复合而不是继承）</a></li><li><a href="/Chapter-4/Chapter-4-Item-19-Design-and-document-for-inheritance-or-else-prohibit-it">Item 19: Design and document for inheritance or else prohibit it（继承要设计良好并且具有文档，否则禁止使用）</a></li><li><a href="/Chapter-4/Chapter-4-Item-20-Prefer-interfaces-to-abstract-classes">Item 20: Prefer interfaces to abstract classes（接口优于抽象类）</a></li><li><a href="/Chapter-4/Chapter-4-Item-21-Design-interfaces-for-posterity">Item 21: Design interfaces for posterity（为后代设计接口）</a></li><li><a href="/Chapter-4/Chapter-4-Item-22-Use-interfaces-only-to-define-types">Item 22: Use interfaces only to define types（接口只用于定义类型）</a></li><li><a href="/Chapter-4/Chapter-4-Item-23-Prefer-class-hierarchies-to-tagged-classes">Item 23: Prefer class hierarchies to tagged classes（类层次结构优于带标签的类）</a></li><li><a href="/Chapter-4/Chapter-4-Item-24-Favor-static-member-classes-over-nonstatic">Item 24: Favor static member classes over nonstatic（静态成员类优于非静态成员类）</a></li><li><a href="/Chapter-4/Chapter-4-Item-25-Limit-source-files-to-a-single-top-level-class">Item 25: Limit source files to a single top level class（源文件仅限有单个顶层类）</a></li></ul><h3 id="chapter-5-introduction-章节介绍" tabindex="-1">Chapter 5 Introduction（章节介绍） <a class="header-anchor" href="#chapter-5-introduction-章节介绍" aria-label="Permalink to “Chapter 5 Introduction（章节介绍）”">​</a></h3><p>SINCE Java 5, generics have been a part of the language. Before generics, you had to cast every object you read from a collection. If someone accidentally inserted an object of the wrong type, casts could fail at runtime. With generics,you tell the compiler what types of objects are permitted in each collection. The compiler inserts casts for you automatically and tells you at compile time if you try to insert an object of the wrong type. This results in programs that are both safer and clearer, but these benefits, which are not limited to collections, come at a price. This chapter tells you how to maximize the benefits and minimize the complications.</p><p>自 Java 5 以来，泛型一直是 Java 语言的一部分。在泛型出现之前，从集合中读取的每个对象都必须进行强制转换。如果有人不小心插入了错误类型的对象，强制类型转换可能在运行时失败。对于泛型，你可以告知编译器在每个集合中允许哪些类型的对象。编译器会自动为你进行强制转换与插入的操作，如果你试图插入类型错误的对象，编译器会在编译时告诉你。这就产生了更安全、更清晰的程序，但是这些好处不仅仅局限于集合，而且也是有代价的。这一章会告诉你如何最大限度地扬长避短。</p><h3 id="contents-of-the-chapter-章节目录-3" tabindex="-1">Contents of the chapter（章节目录） <a class="header-anchor" href="#contents-of-the-chapter-章节目录-3" aria-label="Permalink to “Contents of the chapter（章节目录）”">​</a></h3><ul><li><a href="/Chapter-5/Chapter-5-Item-26-Do-not-use-raw-types">Item 26: Do not use raw types（不要使用原始类型）</a></li><li><a href="/Chapter-5/Chapter-5-Item-27-Eliminate-unchecked-warnings">Item 27: Eliminate unchecked warnings（消除 unchecked 警告）</a></li><li><a href="/Chapter-5/Chapter-5-Item-28-Prefer-lists-to-arrays">Item 28: Prefer lists to arrays（list 优于数组）</a></li><li><a href="/Chapter-5/Chapter-5-Item-29-Favor-generic-types">Item 29: Favor generic types（优先使用泛型）</a></li><li><a href="/Chapter-5/Chapter-5-Item-30-Favor-generic-methods">Item 30: Favor generic methods（优先使用泛型方法）</a></li><li><a href="/Chapter-5/Chapter-5-Item-31-Use-bounded-wildcards-to-increase-API-flexibility">Item 31: Use bounded wildcards to increase API flexibility（使用有界通配符增加 API 的灵活性）</a></li><li><a href="/Chapter-5/Chapter-5-Item-32-Combine-generics-and-varargs-judiciously">Item 32: Combine generics and varargs judiciously（明智地合用泛型和可变参数）</a></li><li><a href="/Chapter-5/Chapter-5-Item-33-Consider-typesafe-heterogeneous-containers">Item 33: Consider typesafe heterogeneous containers（考虑类型安全的异构容器）</a></li></ul><h3 id="chapter-6-introduction-章节介绍" tabindex="-1">Chapter 6 Introduction（章节介绍） <a class="header-anchor" href="#chapter-6-introduction-章节介绍" aria-label="Permalink to “Chapter 6 Introduction（章节介绍）”">​</a></h3><p>JAVA supports two special-purpose families of reference types: a kind of class called an enum type, and a kind of interface called an annotation type. This chapter discusses best practices for using these type families.</p><p>JAVA 支持两种特殊用途的引用类型：一种称为枚举类型的类，以及一种称为注解类型的接口。本章将讨论这些类型在实际使用时的最佳方式。</p><h3 id="contents-of-the-chapter-章节目录-4" tabindex="-1">Contents of the chapter（章节目录） <a class="header-anchor" href="#contents-of-the-chapter-章节目录-4" aria-label="Permalink to “Contents of the chapter（章节目录）”">​</a></h3><ul><li><a href="/Chapter-6/Chapter-6-Item-34-Use-enums-instead-of-int-constants">Item 34: Use enums instead of int constants（用枚举类型代替 int 常量）</a></li><li><a href="/Chapter-6/Chapter-6-Item-35-Use-instance-fields-instead-of-ordinals">Item 35: Use instance fields instead of ordinals（使用实例字段替代序数）</a></li><li><a href="/Chapter-6/Chapter-6-Item-36-Use-EnumSet-instead-of-bit-fields">Item 36: Use EnumSet instead of bit fields（用 EnumSet 替代位字段）</a></li><li><a href="/Chapter-6/Chapter-6-Item-37-Use-EnumMap-instead-of-ordinal-indexing">Item 37: Use EnumMap instead of ordinal indexing（使用 EnumMap 替换序数索引）</a></li><li><a href="/Chapter-6/Chapter-6-Item-38-Emulate-extensible-enums-with-interfaces">Item 38: Emulate extensible enums with interfaces（使用接口模拟可扩展枚举）</a></li><li><a href="/Chapter-6/Chapter-6-Item-39-Prefer-annotations-to-naming-patterns">Item 39: Prefer annotations to naming patterns（注解优于命名模式）</a></li><li><a href="/Chapter-6/Chapter-6-Item-40-Consistently-use-the-Override-annotation">Item 40: Consistently use the Override annotation（坚持使用 @Override 注解）</a></li><li><a href="/Chapter-6/Chapter-6-Item-41-Use-marker-interfaces-to-define-types">Item 41: Use marker interfaces to define types（使用标记接口定义类型）</a></li></ul><h3 id="chapter-7-introduction-章节介绍" tabindex="-1">Chapter 7 Introduction（章节介绍） <a class="header-anchor" href="#chapter-7-introduction-章节介绍" aria-label="Permalink to “Chapter 7 Introduction（章节介绍）”">​</a></h3><p>In Java 8, functional interfaces, lambdas, and method references were added to make it easier to create function objects. The streams API was added in tandem with these language changes to provide library support for processing sequences of data elements. In this chapter, we discuss how to make best use of these facilities.</p><p>在 Java 8 中，为了更容易地创建函数对象，添加了函数式接口、lambda 表达式和方法引用；流 API 也与这些语言特性一并添加进来，为处理数据元素序列提供库支持。在这一章中，我们将讨论如何最好地利用这些工具。</p><h3 id="contents-of-the-chapter-章节目录-5" tabindex="-1">Contents of the chapter（章节目录） <a class="header-anchor" href="#contents-of-the-chapter-章节目录-5" aria-label="Permalink to “Contents of the chapter（章节目录）”">​</a></h3><ul><li><a href="/Chapter-7/Chapter-7-Item-42-Prefer-lambdas-to-anonymous-classes">Item 42: Prefer lambdas to anonymous classes（λ 表达式优于匿名类）</a></li><li><a href="/Chapter-7/Chapter-7-Item-43-Prefer-method-references-to-lambdas">Item 43: Prefer method references to lambdas（方法引用优于 λ 表达式）</a></li><li><a href="/Chapter-7/Chapter-7-Item-44-Favor-the-use-of-standard-functional-interfaces">Item 44: Favor the use of standard functional interfaces（优先使用标准函数式接口）</a></li><li><a href="/Chapter-7/Chapter-7-Item-45-Use-streams-judiciously">Item 45: Use streams judiciously（明智地使用流）</a></li><li><a href="/Chapter-7/Chapter-7-Item-46-Prefer-side-effect-free-functions-in-streams">Item 46: Prefer side effect free functions in streams（在流中使用无副作用的函数）</a></li><li><a href="/Chapter-7/Chapter-7-Item-47-Prefer-Collection-to-Stream-as-a-return-type">Item 47: Prefer Collection to Stream as a return type（优先选择 Collection 而不是流作为返回类型）</a></li><li><a href="/Chapter-7/Chapter-7-Item-48-Use-caution-when-making-streams-parallel">Item 48: Use caution when making streams parallel（谨慎使用并行流）</a></li></ul><h3 id="chapter-8-introduction-章节介绍" tabindex="-1">Chapter 8 Introduction（章节介绍） <a class="header-anchor" href="#chapter-8-introduction-章节介绍" aria-label="Permalink to “Chapter 8 Introduction（章节介绍）”">​</a></h3><p>THIS chapter discusses several aspects of method design: how to treat parameters and return values, how to design method signatures, and how to document methods. Much of the material in this chapter applies to constructors as well as to methods. Like Chapter 4, this chapter focuses on usability, robustness, and flexibility.</p><p>本章讨论了方法设计的几个方面：如何处理参数和返回值，如何设计方法签名，以及如何编写方法文档。本章的大部分内容不仅适用于方法，也适用于构造函数。与第四章一样，本章重点讨论可用性、健壮性和灵活性。</p><h3 id="contents-of-the-chapter-章节目录-6" tabindex="-1">Contents of the chapter（章节目录） <a class="header-anchor" href="#contents-of-the-chapter-章节目录-6" aria-label="Permalink to “Contents of the chapter（章节目录）”">​</a></h3><ul><li><a href="/Chapter-8/Chapter-8-Item-49-Check-parameters-for-validity">Item 49: Check parameters for validity（检查参数的有效性）</a></li><li><a href="/Chapter-8/Chapter-8-Item-50-Make-defensive-copies-when-needed">Item 50: Make defensive copies when needed（在需要时制作防御性副本）</a></li><li><a href="/Chapter-8/Chapter-8-Item-51-Design-method-signatures-carefully">Item 51: Design method signatures carefully（仔细设计方法签名）</a></li><li><a href="/Chapter-8/Chapter-8-Item-52-Use-overloading-judiciously">Item 52: Use overloading judiciously（明智地使用重载）</a></li><li><a href="/Chapter-8/Chapter-8-Item-53-Use-varargs-judiciously">Item 53: Use varargs judiciously（明智地使用可变参数）</a></li><li><a href="/Chapter-8/Chapter-8-Item-54-Return-empty-collections-or-arrays-not-nulls">Item 54: Return empty collections or arrays, not nulls（返回空集合或数组，而不是 null）</a></li><li><a href="/Chapter-8/Chapter-8-Item-55-Return-optionals-judiciously">Item 55: Return optionals judiciously（明智地的返回 Optional）</a></li><li><a href="/Chapter-8/Chapter-8-Item-56-Write-doc-comments-for-all-exposed-API-elements">Item 56: Write doc comments for all exposed API elements（为所有公开的 API 元素编写文档注释）</a></li></ul><h3 id="chapter-9-introduction-章节介绍" tabindex="-1">Chapter 9 Introduction（章节介绍） <a class="header-anchor" href="#chapter-9-introduction-章节介绍" aria-label="Permalink to “Chapter 9 Introduction（章节介绍）”">​</a></h3><p>THIS chapter is devoted to the nuts and bolts of the language. It discusses local variables, control structures, libraries, data types, and two extralinguistic facilities: reflection and native methods. Finally, it discusses optimization and naming conventions.</p><p>本章主要讨论了 Java 语言的具体细节，包括局部变量、控制结构、类库、数据结构和两种不是由语言本身提供的机制：反射和本地方法。最后，讨论了优化和命名惯例。</p><h3 id="contents-of-the-chapter-章节目录-7" tabindex="-1">Contents of the chapter（章节目录） <a class="header-anchor" href="#contents-of-the-chapter-章节目录-7" aria-label="Permalink to “Contents of the chapter（章节目录）”">​</a></h3><ul><li><a href="/Chapter-9/Chapter-9-Item-57-Minimize-the-scope-of-local-variables">Item 57: Minimize the scope of local variables（将局部变量的作用域最小化）</a></li><li><a href="/Chapter-9/Chapter-9-Item-58-Prefer-for-each-loops-to-traditional-for-loops">Item 58: Prefer for-each loops to traditional for loops（for-each 循环优于传统的 for 循环）</a></li><li><a href="/Chapter-9/Chapter-9-Item-59-Know-and-use-the-libraries">Item 59: Know and use the libraries（了解并使用库）</a></li><li><a href="/Chapter-9/Chapter-9-Item-60-Avoid-float-and-double-if-exact-answers-are-required">Item 60: Avoid float and double if exact answers are required（若需要精确答案就应避免使用 float 和 double 类型）</a></li><li><a href="/Chapter-9/Chapter-9-Item-61-Prefer-primitive-types-to-boxed-primitives">Item 61: Prefer primitive types to boxed primitives（基本数据类型优于包装类）</a></li><li><a href="/Chapter-9/Chapter-9-Item-62-Avoid-strings-where-other-types-are-more-appropriate">Item 62: Avoid strings where other types are more appropriate（其他类型更合适时应避免使用字符串）</a></li><li><a href="/Chapter-9/Chapter-9-Item-63-Beware-the-performance-of-string-concatenation">Item 63: Beware the performance of string concatenation（当心字符串连接引起的性能问题）</a></li><li><a href="/Chapter-9/Chapter-9-Item-64-Refer-to-objects-by-their-interfaces">Item 64: Refer to objects by their interfaces（通过接口引用对象）</a></li><li><a href="/Chapter-9/Chapter-9-Item-65-Prefer-interfaces-to-reflection">Item 65: Prefer interfaces to reflection（接口优于反射）</a></li><li><a href="/Chapter-9/Chapter-9-Item-66-Use-native-methods-judiciously">Item 66: Use native methods judiciously（明智地使用本地方法）</a></li><li><a href="/Chapter-9/Chapter-9-Item-67-Optimize-judiciously">Item 67: Optimize judiciously（明智地进行优化）</a></li><li><a href="/Chapter-9/Chapter-9-Item-68-Adhere-to-generally-accepted-naming-conventions">Item 68: Adhere to generally accepted naming conventions（遵守被广泛认可的命名约定）</a></li></ul><h3 id="chapter-10-introduction-章节介绍" tabindex="-1">Chapter 10 Introduction（章节介绍） <a class="header-anchor" href="#chapter-10-introduction-章节介绍" aria-label="Permalink to “Chapter 10 Introduction（章节介绍）”">​</a></h3><p>WHEN used to best advantage, exceptions can improve a program’s readability, reliability, and maintainability. When used improperly, they can have the opposite effect. This chapter provides guidelines for using exceptions effectively.</p><p>当充分利用好异常时，可以提高程序的可读性、可靠性和可维护性。如果使用不当，则会产生负面效果。本章提供了有效使用异常的指南。</p><h3 id="contents-of-the-chapter-章节目录-8" tabindex="-1">Contents of the chapter（章节目录） <a class="header-anchor" href="#contents-of-the-chapter-章节目录-8" aria-label="Permalink to “Contents of the chapter（章节目录）”">​</a></h3><ul><li><a href="/Chapter-10/Chapter-10-Item-69-Use-exceptions-only-for-exceptional-conditions">Item 69: Use exceptions only for exceptional conditions（仅在确有异常条件下使用异常）</a></li><li><a href="/Chapter-10/Chapter-10-Item-70-Use-checked-exceptions-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors">Item 70: Use checked exceptions for recoverable conditions and runtime exceptions for programming errors（对可恢复情况使用 checked 异常，对编程错误使用运行时异常）</a></li><li><a href="/Chapter-10/Chapter-10-Item-71-Avoid-unnecessary-use-of-checked-exceptions">Item 71: Avoid unnecessary use of checked exceptions（避免不必要地使用 checked 异常）</a></li><li><a href="/Chapter-10/Chapter-10-Item-72-Favor-the-use-of-standard-exceptions">Item 72: Favor the use of standard exceptions（鼓励复用标准异常）</a></li><li><a href="/Chapter-10/Chapter-10-Item-73-Throw-exceptions-appropriate-to-the-abstraction">Item 73: Throw exceptions appropriate to the abstraction（抛出能用抽象解释的异常）</a></li><li><a href="/Chapter-10/Chapter-10-Item-74-Document-all-exceptions-thrown-by-each-method">Item 74: Document all exceptions thrown by each method（为每个方法记录会抛出的所有异常）</a></li><li><a href="/Chapter-10/Chapter-10-Item-75-Include-failure-capture-information-in-detail-messages">Item 75: Include failure capture information in detail messages（异常详细消息中应包含捕获失败的信息）</a></li><li><a href="/Chapter-10/Chapter-10-Item-76-Strive-for-failure-atomicity">Item 76: Strive for failure atomicity（尽力保证故障原子性）</a></li><li><a href="/Chapter-10/Chapter-10-Item-77-Don’t-ignore-exceptions">Item 77: Don’t ignore exceptions（不要忽略异常）</a></li></ul><h3 id="chapter-11-introduction-章节介绍" tabindex="-1">Chapter 11 Introduction（章节介绍） <a class="header-anchor" href="#chapter-11-introduction-章节介绍" aria-label="Permalink to “Chapter 11 Introduction（章节介绍）”">​</a></h3><p>THREADS allow multiple activities to proceed concurrently. Concurrent programming is harder than single-threaded programming, because more things can go wrong, and failures can be hard to reproduce. You can’t avoid concurrency. It is inherent in the platform and a requirement if you are to obtain good performance from multicore processors, which are now ubiquitous. This chapter contains advice to help you write clear, correct, well-documented concurrent programs.</p><p>线程允许多个活动并发进行。并发编程比单线程编程更困难，容易出错的地方更多，而且失败很难重现。你无法避开并发。它是平台中固有的，并且多核处理器现在也是无处不在，而你会有从多核处理器获得良好的性能的需求。本章包含一些建议，帮助你编写清晰、正确、文档良好的并发程序。</p><h3 id="contents-of-the-chapter-章节目录-9" tabindex="-1">Contents of the chapter（章节目录） <a class="header-anchor" href="#contents-of-the-chapter-章节目录-9" aria-label="Permalink to “Contents of the chapter（章节目录）”">​</a></h3><ul><li><a href="/Chapter-11/Chapter-11-Item-78-Synchronize-access-to-shared-mutable-data">Item 78: Synchronize access to shared mutable data（对共享可变数据的同步访问）</a></li><li><a href="/Chapter-11/Chapter-11-Item-79-Avoid-excessive-synchronization">Item 79: Avoid excessive synchronization（避免过度同步）</a></li><li><a href="/Chapter-11/Chapter-11-Item-80-Prefer-executors,-tasks,-and-streams-to-threads">Item 80: Prefer executors, tasks, and streams to threads（Executor、task、流优于直接使用线程）</a></li><li><a href="/Chapter-11/Chapter-11-Item-81-Prefer-concurrency-utilities-to-wait-and-notify">Item 81: Prefer concurrency utilities to wait and notify（并发实用工具优于 wait 和 notify）</a></li><li><a href="/Chapter-11/Chapter-11-Item-82-Document-thread-safety">Item 82: Document thread safety（文档应包含线程安全属性）</a></li><li><a href="/Chapter-11/Chapter-11-Item-83-Use-lazy-initialization-judiciously">Item 83: Use lazy initialization judiciously（明智地使用延迟初始化）</a></li><li><a href="/Chapter-11/Chapter-11-Item-84-Don’t-depend-on-the-thread-scheduler">Item 84: Don’t depend on the thread scheduler（不要依赖线程调度器）</a></li></ul><h3 id="chapter-12-introduction-章节介绍" tabindex="-1">Chapter 12 Introduction（章节介绍） <a class="header-anchor" href="#chapter-12-introduction-章节介绍" aria-label="Permalink to “Chapter 12 Introduction（章节介绍）”">​</a></h3><p>THIS chapter concerns object serialization, which is Java’s framework for encoding objects as byte streams (serializing) and reconstructing objects from their encodings (deserializing). Once an object has been serialized, its encoding can be sent from one VM to another or stored on disk for later deserialization. This chapter focuses on the dangers of serialization and how to minimize them.</p><p>本章关注对象序列化，它是 Java 的框架，用于将对象编码为字节流（序列化），并从对象的编码中重构对象（反序列化）。对象序列化后，可以将其编码从一个 VM 发送到另一个 VM，或者存储在磁盘上，以便今后反序列化。本章主要讨论序列化的风险以及如何将其最小化。</p><h3 id="contents-of-the-chapter-章节目录-10" tabindex="-1">Contents of the chapter（章节目录） <a class="header-anchor" href="#contents-of-the-chapter-章节目录-10" aria-label="Permalink to “Contents of the chapter（章节目录）”">​</a></h3><ul><li><a href="/Chapter-12/Chapter-12-Item-85-Prefer-alternatives-to-Java-serialization">Item 85: Prefer alternatives to Java serialization（Java 序列化的替代方案）</a></li><li><a href="/Chapter-12/Chapter-12-Item-86-Implement-Serializable-with-great-caution">Item 86: Implement Serializable with great caution（非常谨慎地实现 Serializable）</a></li><li><a href="/Chapter-12/Chapter-12-Item-87-Consider-using-a-custom-serialized-form">Item 87: Consider using a custom serialized form（考虑使用自定义序列化形式）</a></li><li><a href="/Chapter-12/Chapter-12-Item-88-Write-readObject-methods-defensively">Item 88: Write readObject methods defensively（防御性地编写 readObject 方法）</a></li><li><a href="/Chapter-12/Chapter-12-Item-89-For-instance-control-prefer-enum-types-to-readResolve">Item 89: For instance control, prefer enum types to readResolve（对于实例控制，枚举类型优于 readResolve）</a></li><li><a href="/Chapter-12/Chapter-12-Item-90-Consider-serialization-proxies-instead-of-serialized-instances">Item 90: Consider serialization proxies instead of serialized instances（考虑以序列化代理代替序列化实例）</a></li></ul>',57),n=[o];function s(h,l,c,p,d,m){return a(),t("div",null,n)}const C=e(i,[["render",s]]);export{u as __pageData,C as default};
