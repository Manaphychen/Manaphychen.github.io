import{_ as s,c as i,o as a,aj as t}from"./chunks/framework._AF764y6.js";const c=JSON.parse('{"title":"Spring Boot Cache","description":"","frontmatter":{"title":"Spring Boot Cache","date":"2023-10-31T11:51:33.000Z","permalink":"/springboot/cache/","categories":["后端","Spring"],"tags":["SpringBoot"],"author":"Manaphy"},"headers":[],"relativePath":"java/Spring/33.Spring Boot Cache.md","filePath":"java/Spring/33.Spring Boot Cache.md","lastUpdated":1744977432000}'),e={name:"java/Spring/33.Spring Boot Cache.md"},l=t(`<h1 id="一-spring缓存抽象" tabindex="-1">一：Spring缓存抽象 <a class="header-anchor" href="#一-spring缓存抽象" aria-label="Permalink to “一：Spring缓存抽象”">​</a></h1><p>Spring从3.1开始定义了<code>org.springframework.cache.Cache</code>和<code>org.springframework.cache.CacheManager</code>接口来统一不同的缓存技术；并支持使用JCache（JSR-107）注解简化我们开发</p><ul><li>Cache接口为缓存的组件规范定义，包含缓存的各种操作集合</li><li>Cache接口下Spring提供了各种xxxCache的实现；如RedisCache，EhCacheCache ,ConcurrentMapCache等</li><li>每次调用需要缓存功能的方法时，Spring会检查检查指定参数的指定的目标方法是否已经被调用过；如果有就直接从缓存中获取方法调用后的结果，如果没有就调用方法并缓存结果后返回给用户。下次调用直接从缓存中获取。</li><li>使用Spring缓存抽象时我们需要关注以下两点: <ol><li>确定方法需要被缓存以及他们的缓存策略</li><li>从缓存中读取之前缓存存储的数据</li></ol></li></ul><h1 id="二-几个重要概念-缓存注解" tabindex="-1">二：几个重要概念&amp;缓存注解 <a class="header-anchor" href="#二-几个重要概念-缓存注解" aria-label="Permalink to “二：几个重要概念&amp;缓存注解”">​</a></h1><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>名称</strong></th><th style="text-align:left;"><strong>解释</strong></th></tr></thead><tbody><tr><td style="text-align:left;">Cache</td><td style="text-align:left;">缓存接口，定义缓存操作。实现有：RedisCache、EhCacheCache、ConcurrentMapCache等</td></tr><tr><td style="text-align:left;">CacheManager</td><td style="text-align:left;">缓存管理器，管理各种缓存（cache）组件</td></tr><tr><td style="text-align:left;">@Cacheable</td><td style="text-align:left;">主要针对方法配置，能够根据方法的请求参数对其进行缓存</td></tr><tr><td style="text-align:left;">@CacheEvict</td><td style="text-align:left;">清空缓存</td></tr><tr><td style="text-align:left;">@CachePut</td><td style="text-align:left;">保证方法被调用，又希望结果被缓存。<br>与@Cacheable区别在于是否每次都调用方法，常用于更新</td></tr><tr><td style="text-align:left;">@EnableCaching</td><td style="text-align:left;">开启基于注解的缓存</td></tr><tr><td style="text-align:left;">keyGenerator</td><td style="text-align:left;">缓存数据时key生成策略</td></tr><tr><td style="text-align:left;">serialize</td><td style="text-align:left;">缓存数据时value序列化策略</td></tr><tr><td style="text-align:left;">@CacheConfig</td><td style="text-align:left;">统一配置本类的缓存注解的属性</td></tr></tbody></table><p><strong>@Cacheable/@CachePut/@CacheEvict 主要的参数</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>名称</strong></th><th style="text-align:left;"><strong>解释</strong></th></tr></thead><tbody><tr><td style="text-align:left;">value</td><td style="text-align:left;">缓存的名称，在 spring 配置文件中定义，必须指定至少一个。例如:<br>@Cacheable(value=&quot;mycache&quot;) <br>@Cacheable(value={&quot;cache1&quot;,&quot;cache2&quot;})</td></tr><tr><td style="text-align:left;">key</td><td style="text-align:left;">缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合。例如：<br>@Cacheable(value=&quot;testcache&quot;,key=&quot;#id&quot;)</td></tr><tr><td style="text-align:left;">condition</td><td style="text-align:left;">缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存/清除缓存<br>例如：@Cacheable(value=&quot;testcache&quot;,condition=&quot;#userName.length()&gt;2&quot;)</td></tr><tr><td style="text-align:left;">unless</td><td style="text-align:left;">否定缓存。当条件结果为TRUE时，就不会缓存。<br>@Cacheable(value=&quot;testcache&quot;,unless=&quot;#userName.length()&gt;2&quot;)</td></tr><tr><td style="text-align:left;">allEntries<br>(@CacheEvict )</td><td style="text-align:left;">是否清空所有缓存内容，缺省为 false，如果指定为 true，则方法调用后将立即清空所有缓存<br>例如：@CachEvict(value=&quot;testcache&quot;,allEntries=true)</td></tr><tr><td style="text-align:left;">beforeInvocation<br>(@CacheEvict)</td><td style="text-align:left;">是否在方法执行前就清空，缺省为 false，如果指定为 true，则在方法还没有执行的时候就清空缓存，<br>缺省情况下，如果方法执行抛出异常，则不会清空缓存。例如：<br>@CachEvict(value=&quot;testcache&quot;，beforeInvocation=true)</td></tr></tbody></table><h1 id="三-spel上下文数据" tabindex="-1">三：SpEL上下文数据 <a class="header-anchor" href="#三-spel上下文数据" aria-label="Permalink to “三：SpEL上下文数据”">​</a></h1><p>Spring Cache提供了一些供我们使用的SpEL上下文数据，下表直接摘自Spring官方文档：</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>名称</strong></th><th style="text-align:left;"><strong>位置</strong></th><th style="text-align:left;"><strong>描述</strong></th><th style="text-align:left;"><strong>示例</strong></th></tr></thead><tbody><tr><td style="text-align:left;">methodName</td><td style="text-align:left;">root对象</td><td style="text-align:left;">当前被调用的方法名</td><td style="text-align:left;"><code>#root.methodname</code></td></tr><tr><td style="text-align:left;">method</td><td style="text-align:left;">root对象</td><td style="text-align:left;">当前被调用的方法</td><td style="text-align:left;"><code>#root.method.name</code></td></tr><tr><td style="text-align:left;">target</td><td style="text-align:left;">root对象</td><td style="text-align:left;">当前被调用的目标对象实例</td><td style="text-align:left;"><code>#root.target</code></td></tr><tr><td style="text-align:left;">targetClass</td><td style="text-align:left;">root对象</td><td style="text-align:left;">当前被调用的目标对象的类</td><td style="text-align:left;"><code>#root.targetClass</code></td></tr><tr><td style="text-align:left;">args</td><td style="text-align:left;">root对象</td><td style="text-align:left;">当前被调用的方法的参数列表</td><td style="text-align:left;"><code>#root.args[0]</code></td></tr><tr><td style="text-align:left;">caches</td><td style="text-align:left;">root对象</td><td style="text-align:left;">当前方法调用使用的缓存列表</td><td style="text-align:left;"><code>#root.caches[0].name</code></td></tr><tr><td style="text-align:left;">Argument Name</td><td style="text-align:left;">执行上下文</td><td style="text-align:left;">当前被调用的方法的参数，如findPerson(Person person),可以通过#person.id获得参数</td><td style="text-align:left;"><code>#person.id</code></td></tr><tr><td style="text-align:left;">result</td><td style="text-align:left;">执行上下文</td><td style="text-align:left;">方法执行后的返回值（仅当方法执行后的判断有效，如 unless cacheEvict的beforeInvocation=false）</td><td style="text-align:left;"><code>#result</code></td></tr></tbody></table><p><strong>注意：</strong><br></p><ol><li>当我们要使用root对象的属性作为key时我们也可以将&quot;#root&quot;省略，因为Spring默认使用的就是root对象的属性。 如<br><code>@Cacheable(key = &quot;targetClass + methodName +#p0&quot;)</code></li><li>使用方法参数时我们可以直接使用&quot;#参数名&quot;或者&quot;#p参数index&quot;。 如：<br><code>@Cacheable(value=&quot;users&quot;, key=&quot;#id&quot;)</code><br><code>@Cacheable(value=&quot;users&quot;, key=&quot;#p0&quot;)</code></li></ol><p><strong>SpEL提供了多种运算符</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>类型</strong></th><th style="text-align:left;"><strong>运算符</strong></th></tr></thead><tbody><tr><td style="text-align:left;">关系</td><td style="text-align:left;">&lt;，&gt;，&lt;=，&gt;=，==，!=，lt，gt，le，ge，eq，ne</td></tr><tr><td style="text-align:left;">算术</td><td style="text-align:left;">+，- ，* ，/，%，^</td></tr><tr><td style="text-align:left;">逻辑</td><td style="text-align:left;">&amp;&amp;，||，!，and，or，not，between，instanceof</td></tr><tr><td style="text-align:left;">条件</td><td style="text-align:left;">?: (ternary)，?: (elvis)</td></tr><tr><td style="text-align:left;">正则表达式</td><td style="text-align:left;">matches</td></tr><tr><td style="text-align:left;">其他类型</td><td style="text-align:left;">?.，?[…]，![…]，^[…]，$[…]</td></tr></tbody></table><p>以上的知识点适合遗忘的时候来查阅</p><h1 id="四-开始使用" tabindex="-1">四：开始使用 <a class="header-anchor" href="#四-开始使用" aria-label="Permalink to “四：开始使用”">​</a></h1><h2 id="_4-1-导入依赖" tabindex="-1">4.1 导入依赖 <a class="header-anchor" href="#_4-1-导入依赖" aria-label="Permalink to “4.1 导入依赖”">​</a></h2><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-boot-starter-cache&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="_4-2-在启动类注解-enablecaching开启缓存" tabindex="-1">4.2 在启动类注解@EnableCaching开启缓存 <a class="header-anchor" href="#_4-2-在启动类注解-enablecaching开启缓存" aria-label="Permalink to “4.2 在启动类注解@EnableCaching开启缓存”">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EnableCaching</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DemoMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SpringApplication.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DemoMain.class, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_4-3-缓存-cacheable" tabindex="-1">4.3 缓存@Cacheable <a class="header-anchor" href="#_4-3-缓存-cacheable" aria-label="Permalink to “4.3 缓存@Cacheable”">​</a></h2><blockquote><p><code>@Cacheable</code>注解会先查询是否已经有缓存，有会使用缓存，没有则会执行方法并缓存。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Cacheable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;person&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;targetClass + methodName + #p0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//@Cacheable(key = &quot;targetClass&quot;)// redisKey==&gt;person::class com.cgp.demo.service.impl.PersonServiceImpl</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//@Cacheable(key = &quot;method&quot;)// redisKey==&gt;person::public com.cgp.demo.entity.Person com.cgp.demo.service.impl.PersonServiceImpl.selectById(java.lang.Integer)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//@Cacheable(key = &quot;methodName&quot;)// redisKey==&gt;person::selectById</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//@Cacheable(key = &quot;args[0]&quot;)// redisKey==&gt;person::2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//@Cacheable(key = &quot;caches[0].name&quot;)// redisKey==&gt;person::person</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Person </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Integer id) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;从数据库查询&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;号人员&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此处的<code>value</code>是必需的，它指定了你的缓存存放在哪块命名空间。</p><p>此处的<code>key</code>是使用的spEL表达式，参考上章。这里有一个小坑，如果你把<code>methodName</code>换成<code>method</code>运行会报错，观察它们的返回类型，原因在于<code>methodName</code>是<code>String</code>而<code>methoh</code>是<code>Method</code>。</p><p>此处的<code>Person</code>实体类一定要实现序列化<code>public class Person implements Serializable</code>，否则会报<code>java.io.NotSerializableException</code>异常。</p><p>到这里，你已经可以运行程序检验缓存功能是否实现。</p><p><strong>深入源码，查看它的其他属性</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Cacheable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AliasFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cacheNames&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 和value注解差不多，二选一</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AliasFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cacheNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// key的生成器。key/keyGenerator二选一使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keyGenerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 指定缓存管理器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cacheManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 或者指定获取解析器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cacheResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 条件符合则缓存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">condition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 条件符合则不缓存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 是否使用异步模式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_4-4-配置-cacheconfig" tabindex="-1">4.4 配置@CacheConfig <a class="header-anchor" href="#_4-4-配置-cacheconfig" aria-label="Permalink to “4.4 配置@CacheConfig”">​</a></h2><p>当我们需要缓存的地方越来越多，你可以使用<code>@CacheConfig(cacheNames = {&quot;myCache&quot;})</code>注解来统一指定<code>value</code>的值，这时可省略<code>value</code>，如果你在你的方法依旧写上了<code>value</code>，那么依然以方法的<code>value</code>值为准。</p><p>使用方法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CacheConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cacheNames</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;person&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抽取缓存的公共配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonServiceImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ServiceImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PersonMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Cacheable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;targetClass + methodName + #p0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此处没写value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Person </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Integer </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;从数据库查询&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;号人员&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_4-5-更新-cacheput" tabindex="-1">4.5 更新@CachePut <a class="header-anchor" href="#_4-5-更新-cacheput" aria-label="Permalink to “4.5 更新@CachePut”">​</a></h2><p><code>@CachePut</code>注解的作用主要针对方法配置，能够根据方法的请求参数对其结果进行缓存，和 <code>@Cacheable</code> 不同的是，它每次都会触发真实方法的调用 。简单来说就是用户更新缓存数据。但需要注意的是该注解的<code>value</code> 和 <code>key</code> 必须与要更新的缓存相同，也就是与<code>@Cacheable</code> 相同。示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * CachePut:既调用方法,又更新缓存数据; 修改了数据库的某个数据, 同时更新缓存;先调用,后缓存</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * key = &quot;#person.id :使用传入参数的员工的id</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * key = &quot;#result.id&quot; :使用返回后的id</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CachePut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;#person.id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Person </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Person person) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RandomUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    baseMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_4-6-清除-cacheevict" tabindex="-1">4.6 清除@CacheEvict <a class="header-anchor" href="#_4-6-清除-cacheevict" aria-label="Permalink to “4.6 清除@CacheEvict”">​</a></h2><p><code>@CachEvict</code> 的作用 主要针对方法配置，能够根据一定的条件对缓存进行清空 。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 缓存清除</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * key:指定要清除的数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * allEntries = true 指定清除这个缓存中所有的数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * beforeInvocation=false:默认设置 表示缓存在方法调用之后清除;设置为true后,会在方法调用之前清除</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 作用:防止方法出现异常从而无法清除缓存</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CacheEvict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;#id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Integer id) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,39),n=[l];function h(p,k,d,r,g,E){return a(),i("div",null,n)}const y=s(e,[["render",h]]);export{c as __pageData,y as default};
