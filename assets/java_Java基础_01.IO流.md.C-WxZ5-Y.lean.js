import{_ as a,c as t,o as n,aj as i,a as s,j as l}from"./chunks/framework._AF764y6.js";const h="/assets/JpHBMl.DD4R7RlN.png",D=JSON.parse('{"title":"IO流","description":"","frontmatter":{"title":"IO流","date":"2023-11-02T10:45:24.000Z","permalink":"/java/io/","categories":["后端","Java基础"],"tags":null,"author":"Manaphy"},"headers":[],"relativePath":"java/Java基础/01.IO流.md","filePath":"java/Java基础/01.IO流.md","lastUpdated":1744977432000}'),k={name:"java/Java基础/01.IO流.md"},p=i("",89),e=l("br",null,null,-1),E=i("",22);function r(d,g,y,F,o,c){return n(),t("div",null,[p,s(' ## OutputStreamWriter 转换流`java.io.OutputStreamWriter` ，是Writer的子类，字面看容易混淆会误以为是转为字符流，其实不然，OutputStreamWriter为从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 ```java @Test public void convertTest() throws IOException { @Cleanup OutputStreamWriter osw = new OutputStreamWriter( new FileOutputStream("/Users/manaphy/Downloads/6.txt"), "GBK"); osw.write("我爱北京天安门");// 生成的文件为GBK编码 } ``` ## InputStreamReader 转换流`java.io.InputStreamReader`，是`Reader`的子类，从字面意思可以看出它是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 ```java @Test public void convert2Test() throws IOException { @Cleanup InputStreamReader isr = new InputStreamReader( new FileInputStream("/Users/manaphy/Downloads/6.txt"), "GBK"); int read = isr.read(); System.out.println((char) read);// 正常读取 } ``` 为了达到**最高效率**，可以考虑在 `BufferedReader` 内包装 `InputStreamReader`'),e,s("`BufferedReader in = new BufferedReader(new InputStreamReader(srcFile));` ## 序列化流 Java 提供了一种对象**序列化**的机制。用一个字节序列可以表示一个对象，该字节序列包含该对象的数据、对象的类型和对象中存储的属性等信息。字节序列写出到文件之后，相当于文件中持久保存了一个对象的信息。 "),E])}const A=a(k,[["render",r]]);export{D as __pageData,A as default};
