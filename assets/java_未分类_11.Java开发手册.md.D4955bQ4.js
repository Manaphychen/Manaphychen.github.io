import{_ as r}from"./chunks/ArticleMetadata.BPSr9oED.js";import{_ as o,E as d,c as p,o as l,j as s,I as y,aj as a,w as g,b as c,e as A,a as i}from"./chunks/framework._AF764y6.js";const D="/assets/image-20240717085231131.gyiOvYiO.png",X=JSON.parse('{"title":"Java开发手册","description":"","frontmatter":{"title":"Java开发手册","date":"2024-07-15T02:53:59.000Z","permalink":"/java/development_manual/","categories":["后端","未分类"],"tags":[null],"author":{"name":"Manaphy","link":"manaphycc"}},"headers":[],"relativePath":"java/未分类/11.Java开发手册.md","filePath":"java/未分类/11.Java开发手册.md","lastUpdated":1743259619000}'),C={name:"java/未分类/11.Java开发手册.md"},F=s("h1",{id:"java开发手册",tabindex:"-1"},[i("Java开发手册 "),s("a",{class:"header-anchor",href:"#java开发手册","aria-label":"Permalink to “Java开发手册”"},"​")],-1),B=a(`<h2 id="一、编程规约" tabindex="-1">一、编程规约 <a class="header-anchor" href="#一、编程规约" aria-label="Permalink to “一、编程规约”">​</a></h2><h3 id="一-命名风格" tabindex="-1">(一) 命名风格 <a class="header-anchor" href="#一-命名风格" aria-label="Permalink to “(一) 命名风格”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>所有编程相关的命名均不能以<span style="color:blue;">下划线或美元符号</span>开始，也不能以<span style="color:blue;">下划线或美元符号</span>结束。</p><p><span style="color:orangered;">反例：</span><span style="color:crimson;">_name / __name / $Object / name_ / name$ / Object$</span></p></li><li><p><span style="color:firebrick;"><span style="color:firebrick;">【强制】</span></span>所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</p><p><span style="color:olive;">说明：</span>正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。</p><p><span style="color:teal;">正例：</span>ali / alibaba / taobao / kaikeba / aliyun / youku / hangzhou 等国际通用的名称，可视同英文。</p><p><span style="color:orangered;">反例：</span>DaZhePromotion【打折】/ getPingfenByName()【评分】 / String fw【福娃】/ int 变量名 = 3</p></li><li><p><span style="color:firebrick;"><span style="color:firebrick;">【强制】</span></span>代码和注释中都要避免使用任何人类语言中的种族歧视性或侮辱性词语。</p><p><span style="color:teal;">正例：</span>blockList / allowList / secondary</p><p><span style="color:orangered;">反例：</span>blackList / whiteList / slave / SB / WTF</p></li><li><p><span style="color:firebrick;"><span style="color:firebrick;">【强制】</span></span>类名使用 UpperCamelCase 风格，以下情形例外：DO / PO / DTO / BO / VO / UID 等。</p><p><span style="color:teal;">正例：</span>ForceCode / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion</p><p><span style="color:orangered;">反例：</span>forcecode / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion</p></li><li><p><span style="color:firebrick;">【强制】</span>方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格。</p><p><span style="color:teal;">正例：</span>localValue / getHttpMessage() / inputUserId</p></li><li><p><span style="color:firebrick;">【强制】</span>常量命名应该全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</p><p><span style="color:teal;">正例：</span>MAX_STOCK_COUNT / CACHE_EXPIRED_TIME</p><p><span style="color:orangered;">反例：</span>MAX_COUNT / EXPIRED_TIME</p></li><li><p><span style="color:firebrick;">【强制】</span>抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾，测试类命名以它要测试的类的名称开始，以 Test 结尾。</p></li><li><p><span style="color:firebrick;">【强制】</span>类型与中括号紧挨相连来定义数组。</p><p><span style="color:teal;">正例：</span>定义整形数组 int[] arrayDemo。</p><p><span style="color:orangered;">反例：</span>在 main 参数中，使用 String args[] 来定义。</p></li><li><p><span style="color:firebrick;">【强制】</span>POJO 类中的任何布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。</p><p><span style="color:olive;">说明：</span>本文 MySQL 规约中的建表约定第 1 条，表达是与否的变量采用 is_xxx 的命名方式，所以需要在&lt;resultMap&gt;设置从 is_xxx 到 xxx 的映射关系。</p><p><span style="color:orangered;">反例：</span>定义为布尔类型 Boolean isDeleted 的字段，它的 getter 方法也是 isDeleted()，部分框架在反向解析时，“误以为”对应的字段名称是 deleted，导致字段获取不到，得到意料之外的结果或抛出异常。</p></li><li><p><span style="color:firebrick;">【强制】</span>包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用<span style="color:blue;">单数</span>形式，但是类名如果有复数含义，类名可以使用复数形式。</p></li></ol><p><span style="color:teal;">正例：</span>应用工具类包名为 com.alibaba.ei.kunlun.aap.util；类名为 MessageUtils（此规则参考 spring 的框架结构）。</p><ol start="11"><li><p><span style="color:firebrick;">【强制】</span>避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可理解性降低。</p><p><span style="color:olive;">说明：</span>子类、父类成员变量名相同，即使是 public 也是能够通过编译，而局部变量在同一方法内的不同代码块中同名也是合法的，但是要避免使用。对于非 setter / getter 的参数名称也要避免与成员变量名称相同。</p><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ConfusingName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> stock;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    protected</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> alibaba;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 非 setter/getter 的参数名称，不允许与本类成员变量同名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> access</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">alibaba</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (condition) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 666</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">						// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">						// 在同一方法体中，不允许与其它代码块中的 money 命名相同</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 15978</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">						// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Son</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> ConfusingName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 不允许与父类的成员变量名称相同</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> stock;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>杜绝完全不规范的英文缩写，避免望文不知义。</p><p><span style="color:orangered;">反例：</span>AbstractClass“缩写”成 AbsClass；condition“缩写”成 condi；Function“缩写”成 Fu，此类随意缩写严重降低了代码的可阅读性。</p></li><li><p><span style="color:gold;">【推荐】</span>为了达到代码自解释的目标，任何自定义编程元素在命名时，使用完整的单词组合来表达。</p><p><span style="color:teal;">正例：</span>在 JDK 中，对某个对象引用的 volatile 字段进行原子更新的类名为 AtomicReferenceFieldUpdater。</p><p><span style="color:orangered;">反例：</span>常见的方法内变量为 int a; 的定义方式。</p></li><li><p><span style="color:gold;">【推荐】</span>在常量与变量命名时，表示类型的名词放在词尾，以提升辨识度。</p><p><span style="color:teal;">正例：</span>startTime / workQueue / nameList / TERMINATED_THREAD_COUNT</p><p><span style="color:orangered;">反例：</span>startedAt / QueueOfWork / listName / COUNT_TERMINATED_THREAD</p></li><li><p><span style="color:gold;">【推荐】</span>如果模块、接口、类、方法使用了设计模式，在命名时要体现出具体模式。</p><p><span style="color:olive;">说明：</span>将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> OrderFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> LoginProxy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ResourceObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div></li><li><p><span style="color:gold;">【推荐】</span>接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义常量，如果一定要定义，最好确定该常量与接口的方法相关，并且是整个应用的基础常量。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> commit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 接口方法签名 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> COMPANY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;alibaba&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 接口基础常量</span></span></code></pre></div><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> commit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 接口方法定义</span></span></code></pre></div><p><span style="color:olive;">说明：</span>JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。</p></li><li><p>接口和实现类的命名有两套规则：</p><ol><li><p><span style="color:firebrick;">【强制】</span>对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 Impl 的后缀与接口区别</p><p><span style="color:teal;">正例：</span>CacheServiceImpl 实现 CacheService 接口。</p></li><li><p><span style="color:gold;">【推荐】</span>如果是形容能力的接口名称，取对应的形容词为接口名（通常是 –able 结尾的形容词）。</p><p><span style="color:teal;">正例：</span>AbstractTranslator 实现 Translatable。</p></li></ol></li><li><p><span style="color:olivedrab;">【参考】</span>枚举类名带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。</p><p><span style="color:olive;">说明：</span>枚举其实就是特殊的常量类，且构造方法被默认强制是私有。</p><p><span style="color:teal;">正例：</span>枚举名字为 ProcessStatusEnum 的成员名称：SUCCESS / UNKNOWN_REASON</p></li><li><p><span style="color:olivedrab;">【参考】</span>各层命名规约：</p><ol><li><p>Service / DAO 层方法命名规约：</p><ol><li>获取单个对象的方法用 get 做前缀。</li><li>获取多个对象的方法用 list 做前缀，复数结尾，如：listObjects</li><li>获取统计值的方法用 count 做前缀。</li><li>插入的方法用 save / insert 做前缀。</li><li>删除的方法用 remove / delete 做前缀。</li><li>修改的方法用 update 做前缀。</li></ol></li><li><p>领域模型命名规约：</p><ol><li>数据对象：xxxDO，xxx 即为数据表名。</li><li>数据传输对象：xxxDTO，xxx 为业务领域相关的名称。</li><li>展示对象：xxxVO，xxx 一般为网页名称。</li><li>POJO 是 DO / DTO / BO / VO 的统称，禁止命名成 xxxPOJO。</li></ol></li></ol></li></ol><h3 id="二-常量定义" tabindex="-1">(二) 常量定义 <a class="header-anchor" href="#二-常量定义" aria-label="Permalink to “(二) 常量定义”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。</p><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 开发者 A 定义了缓存的 key。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Id#taobao_&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tradeId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key, value);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 开发者 B 使用缓存时直接复制少了下划线，即 key 是&quot;Id#taobao&quot; + tradeId，导致出现故障。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Id#taobao&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tradeId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key);</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>long 或 Long 赋值时，数值后使用大写 L，不能是小写 <span style="color:red;">l</span>，小写容易跟数字混淆，造成误解。</p><p><span style="color:olive;">说明：</span>public static final Long NUM = 2l; 写的是数字的 21，还是 Long 型的 2？</p></li><li><p><span style="color:firebrick;">【强制】</span>浮点数类型的数值后缀统一为大写的 D 或 F。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> HEIGHT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 175.5D</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> float</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> WEIGHT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 150.3F</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div></li><li><p><span style="color:gold;">【推荐】</span>不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护。</p><p><span style="color:olive;">说明：</span>大而全的常量类，杂乱无章，使用查找功能才能定位到要修改的常量，不利于理解，也不利于维护。</p><p><span style="color:teal;">正例：</span>缓存相关常量放在类 CacheConsts 下；系统配置相关常量放在类 SystemConfigConsts 下。</p></li><li><p><span style="color:gold;">【推荐】</span>常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。</p><ol><li><p>跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。</p></li><li><p>应用内共享常量：放置在一方库中，通常是子模块中的 constant 目录下。</p><p><span style="color:orangered;">反例：</span>易懂常量也要统一定义成应用内共享常量，两个程序员在两个类中分别定义了表示“是”的常量：</p><p>类 A 中：public static final String YES = &quot;yes&quot;;</p><p>类 B 中：public static final String YES = &quot;y&quot;;</p><p>A.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。</p></li><li><p>子工程内部共享常量：即在当前子工程的 constant 目录下。</p></li><li><p>包内共享常量：即在当前包下单独的 constant 目录下。</p></li><li><p>类内共享常量：直接在类内部 private static final 定义。</p></li></ol></li><li><p><span style="color:gold;">【推荐】</span>如果变量值仅在一个固定范围内变化用 enum 类型来定义。</p><p><span style="color:olive;">说明：</span>如果存在名称之外的延伸属性应使用 enum 类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> SeasonEnum</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    SPRING</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">SUMMER</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">AUTUMN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">WINTER</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> seq;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    SeasonEnum</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> seq</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.seq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> seq;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getSeq</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> seq;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li></ol><h3 id="三-代码格式" tabindex="-1">(三) 代码格式 <a class="header-anchor" href="#三-代码格式" aria-label="Permalink to “(三) 代码格式”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>如果大括号内为空，简洁地写成{}即可，大括号中间无需换行和空格；如果是非空代码块，则：</p><ol><li>左大括号前不换行。</li><li>左大括号后换行。</li><li>右大括号前换行。</li><li>右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。</li></ol></li><li><p><span style="color:firebrick;">【强制】</span>左小括号和右边相邻字符之间不需要空格；右小括号和左边相邻字符之间也不需要空格；而左大括号前需要加空格。详见第 5 条下方正例提示。</p><p><span style="color:orangered;">反例：</span>if(<span style="color:red;">空格</span> a == b <span style="color:red;">空格</span>)</p></li><li><p><span style="color:firebrick;">【强制】</span>if / for / while / switch / do 等保留字与左右括号之间都必须加空格。</p></li><li><p><span style="color:firebrick;">【强制】</span>任何二目、三目运算符的左右两边都需要加一个空格。</p><p><span style="color:olive;">说明：</span>包括赋值运算符 =、逻辑运算符 &amp;&amp;、加减乘除符号等。</p></li><li><p><span style="color:firebrick;">【强制】</span>采用 4 个空格缩进，禁止使用 Tab 字符。</p><p><span style="color:olive;">说明：</span>如使用 Tab 缩进，必须设置 1 个 Tab 为 4 个空格。IDEA 设置 Tab 为 4 个空格时，请勿勾选 <span style="color:red;">Use tab character；</span></p><p>而在 Eclipse 中，找到 tab policy 设置为 Spaces only，Tab size：4，最后必须勾选 <span style="color:red;"><code>insert spaces for tabs</code></span></p><p><span style="color:teal;">正例：</span>（涉及上述中的 1-5 点）</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">		// 缩进 4 个空格</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> say</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">		// 运算符的左右必须有一个空格</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> flag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">		// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(say);}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">		// 左大括号前加空格且不换行；左大括号后换行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">				// 右大括号前换行，右大括号后有 else，不用换行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">				// 在右大括号后直接结束，则必须换行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>注释的双斜线与注释内容之间有且仅有一个空格。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 这是示例注释，请注意在双斜线之后有一个空格</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> commentString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;demo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>在进行类型强制转换时，右括号与强制转换值之间不需要任何空格隔开。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> first</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3.2D</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> second</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：</p><ol><li>第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</li><li>运算符与下文一起换行。</li><li>方法调用的点符号与下文一起换行。</li><li>方法调用中的多个参数需要换行时，在逗号后进行。</li><li>在括号前不要换行，见反例。</li></ol><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> builder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点号一起换行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;yang&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;hao&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> builder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 超过 120 个字符的情况下，不要在括号前换行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;you&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;are&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)...append</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;lucky&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 参数很多的方法调用可能超过 120 个字符，逗号后才是换行处</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(args1, args2, args3, ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, argsX);</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>方法参数在定义和传入时，多个参数逗号后面必须加空格。</p><p><span style="color:teal;">正例：</span>下例中实参的 <span style="color:blue;">args1</span> 逗号后边必须要有一个空格。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(args1, args2, args3);</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>IDE 的 text file encoding 设置为 UTF-8；IDE 中文件的换行符使用 Unix 格式，不要使用Windows 格式。</p></li><li><p><span style="color:gold;">【推荐】</span>单个方法的总行数不超过 80 行。</p><p><span style="color:olive;">说明：</span>除注释之外的方法签名、左右大括号、方法内代码、空行、回车及任何不可见字符的总行数不超过 80 行。</p><p><span style="color:teal;">正例：</span>代码逻辑分清红花和绿叶，个性和共性，绿叶逻辑单独出来成为额外方法，使主干代码更加晰；共性逻辑抽取成为共性方法，便于复用和维护。</p></li><li><p><span style="color:gold;">【推荐】</span>没有必要增加若干空格来使变量的赋值等号与上一行对应位置的等号对齐。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> one</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> two</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2L</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> three</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3F</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> builder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p><span style="color:olive;">说明：</span>增加 builder 这个变量，如果需要对齐，则给 one、two、three 都要增加几个空格，在变量比较多的情况下，是</p><p>非常累赘的事情。</p></li><li><p><span style="color:gold;">【推荐】</span>不同逻辑、不同语义、不同业务的代码之间插入一个空行，分隔开来以提升可读性。</p><p><span style="color:olive;">说明：</span>任何情形，没有必要插入<span style="color:blue;">多个空行</span>进行隔开。</p></li></ol><h3 id="四-oop-规约" tabindex="-1">(四) OOP 规约 <a class="header-anchor" href="#四-oop-规约" aria-label="Permalink to “(四) OOP 规约”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用<span style="color:blue;">类名</span>来访问即可。</p></li><li><p><span style="color:firebrick;">【强制】</span>所有的覆写方法，必须加 @Override 注解。</p><p><span style="color:olive;">说明：</span>getObject() 与 get0bject() 的问题。一个是字母的 O，一个是数字的 0，加 @Override 可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。</p></li><li><p><span style="color:firebrick;">【强制】</span>相同参数类型，相同业务含义，才可以使用的可变参数，参数类型避免定义为 Object。</p><p><span style="color:olive;">说明：</span>可变参数必须放置在参数列表的最后。（建议开发者尽量不用可变参数编程）</p><p><span style="color:teal;">正例：</span><code>public List&lt;User&gt; listUsers(String type, Long... ids) {...}</code></p></li><li><p><span style="color:firebrick;">【强制】</span>外部正在调用的接口或者二方库依赖的接口，不允许修改<span style="color:blue;">方法签名</span>，避免对接口调用方产生影响。接口过时必须加 @Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</p></li><li><p><span style="color:firebrick;">【强制】</span>不能使用过时的类或方法。</p><p><span style="color:olive;">说明：</span>java.net.URLDecoder 中的方法 <code>decode(String encodeStr)</code> 这个方法已经过时，应该使用双参数<code>decode(String source, String encode)</code>。接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。</p></li><li><p><span style="color:firebrick;">【强制】</span>Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals。</p><p><span style="color:teal;">正例：</span>&quot;test&quot;.equals(param);</p><p><span style="color:orangered;">反例：</span>param.equals(&quot;test&quot;);</p><p><span style="color:olive;">说明：</span>推荐使用 JDK7 引入的工具类 java.util.Objects#equals(Object a, Object b)</p></li><li><p><span style="color:firebrick;">【强制】</span>所有整型包装类对象之间<span style="color:blue;">值的比较</span>，全部使用 equals 方法比较。</p><p><span style="color:olive;">说明：</span>对于 Integer var = ? 在<span style="color:blue;"> -128 至 127</span> 之间的赋值，Integer 对象是在 IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用 == 进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。</p></li><li><p><span style="color:firebrick;">【强制】</span>任何货币金额，均以<span style="color:blue;">最小货币单位</span>且为整型类型进行存储。</p></li><li><p><span style="color:firebrick;">【强制】</span>浮点数之间的等值判断，基本数据类型不能使用 == 进行比较，包装数据类型不能使用 equals 进行判断。</p><p><span style="color:olive;">说明：</span>浮点数采用“尾数+阶码”的编码方式，类似于科学计数法的“有效数字+指数”的表示方式。二进制无法精确表示大部分的十进制小数，具体原理参考《码出高效》。</p><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1.0F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.9F</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.9F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.8F</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">		// 预期进入此代码块，执行其它业务逻辑</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">		// 但事实上 a == b 的结果为 false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Float</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Float.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Float</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Float.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(b);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(y)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">		// 预期进入此代码块，执行其它业务逻辑</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">		// 但事实上 equals 的结果为 false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><span style="color:teal;">正例：</span></p><ol><li><p>指定一个误差范围，两个浮点数的差值在此范围之内，则认为是相等的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1.0F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.9F</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.9F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.8F</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> diff</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1e-6F</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> diff) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p>使用 BigDecimal 来定义值，再进行浮点数的运算操作。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;0.9&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;0.8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">subtract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(b);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">subtract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(c);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li></ol></li><li><p><span style="color:firebrick;">【强制】</span>BigDecimal 的等值比较应使用 compareTo() 方法，而不是 equals() 方法。 <span style="color:olive;">说明：</span>equals() 方法会比较值和精度（1.0 与 1.00 返回结果为 false），而 compareTo() 则会忽略精度。</p></li><li><p><span style="color:firebrick;">【强制】</span>定义数据对象 DO 类时，属性类型要与数据库字段类型相匹配。</p><p><span style="color:teal;">正例：</span>数据库字段的 bigint 必须与类属性的 Long 类型相对应。</p><p><span style="color:orangered;">反例：</span>某业务的数据库表 id 字段定义类型为 bigint unsigned，实际类对象属性为 Integer，随着 id 越来越大，</p><p>超过 Integer 的表示范围而溢出成为负数，此时数据库 id 不支持存入负数抛出异常产生线上故障。</p></li><li><p><span style="color:firebrick;">【强制】</span>禁止使用构造方法 BigDecimal(double) 的方式把 double 值转化为 BigDecimal 对象。</p><p><span style="color:olive;">说明：</span>BigDecimal(double) 存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。如：<code>BigDecimal g = new BigDecimal(0.1F)；</code>实际的存储值为：0.100000001490116119384765625</p><p><span style="color:teal;">正例：</span>优先推荐入参为 String 的构造方法，或使用 BigDecimal 的 valueOf 方法，此方法内部其实执行了 Double 的 toString，而 Double 的 toString 按 double 的实际能表达的精度对尾数进行了截断。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> recommend1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> recommend2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> BigDecimal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div></li><li><p>关于基本数据类型与包装数据类型的使用标准如下：</p><ol><li><span style="color:firebrick;">【强制】</span>所有的 POJO 类属性必须使用包装数据类型。</li><li><span style="color:firebrick;">【强制】</span>RPC 方法的返回值和参数必须使用包装数据类型。</li><li><span style="color:gold;">【推荐】</span>所有的局部变量使用基本数据类型。</li></ol><p><span style="color:olive;">说明：</span>POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何 NPE 问题，或者入库检查，都由使用者来保证。</p><p><span style="color:teal;">正例：</span>数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</p><p><span style="color:orangered;">反例：</span>某业务的交易报表上显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线-。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。</p></li><li><p><span style="color:firebrick;">【强制】</span>定义 DO / PO / DTO / VO 等 POJO 类时，不要设定任何属性<span style="color:blue;">默认值</span>。</p><p><span style="color:orangered;">反例：</span>某业务的 DO 的 createTime 默认值为 new Date()；但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p></li><li><p><span style="color:firebrick;">【强制】</span>序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。</p><p><span style="color:olive;">说明：</span>注意 serialVersionUID 不一致会抛出序列化运行时异常。</p></li><li><p><span style="color:firebrick;">【强制】</span>构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</p></li><li><p><span style="color:firebrick;">【强制】</span>POJO 类必须写 toString 方法。使用 IDE 中的工具 source &gt; generate toString 时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString()。</p><p><span style="color:olive;">说明：</span>在方法执行抛出异常时，可以直接调用 POJO 的 toString() 方法打印其属性值，便于排查问题。</p></li><li><p><span style="color:firebrick;">【强制】</span>禁止在 POJO 类中，同时存在对应属性 xxx 的 isXxx() 和 getXxx() 方法。</p><p><span style="color:olive;">说明：</span>框架在调用属性 xxx 的提取方法时，并不能确定哪个方法一定是被优先调用到，神坑之一。</p></li><li><p><span style="color:gold;">【推荐】</span>使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛IndexOutOfBoundsException 的风险。</p><p><span style="color:olive;">说明：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;a,b,c,,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 预期大于 3，结果等于 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ary.length);</span></span></code></pre></div></li><li><p><span style="color:gold;">【推荐】</span>当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于下一条。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> param);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> param1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> param2);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div></li><li><p><span style="color:gold;">【推荐】</span>类内方法定义的顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; getter / setter 方法。</p><p><span style="color:olive;">说明：</span>公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有Service 和 DAO 的 getter / setter 方法放在类体最后。</p></li><li><p><span style="color:gold;">【推荐】</span>setter 方法中，参数名称与类成员变量名称一致，this.成员名=参数名。在 getter / setter 方法中，不要增加业务逻辑，增加排查问题的难度。</p><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Integer </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (condition) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p><span style="color:gold;">【推荐】</span>循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。</p><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><span style="color:olive;">说明：</span>反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行 append 操作，最后通过 toString() 返回 String 对象，造成内存资源浪费。</p></li><li><p><span style="color:gold;">【推荐】</span>final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：</p><ol><li>不允许被继承的类，如：String 类。</li><li>不允许修改引用的域对象，如：POJO 类的域变量。</li><li>不允许被覆写的方法，如：POJO 类的 setter 方法。</li><li>不允许运行过程中重新赋值的局部变量。</li><li>避免上下文重复使用一个变量，使用 final 关键字可以强制重新定义一个变量，方便更好地进行重构。</li></ol></li><li><p><span style="color:gold;">【推荐】</span>慎用 Object 的 clone 方法来拷贝对象。</p><p><span style="color:olive;">说明：</span>对象 clone 方法默认是浅拷贝，若想实现深拷贝需覆写 clone 方法实现域对象的深度遍历式拷贝。</p></li><li><p><span style="color:gold;">【推荐】</span>类成员与方法访问控制从严：</p><ol><li>如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。</li><li>工具类不允许有 public 或 default 构造方法。</li><li>类非 static 成员变量并且与子类共享，必须是 protected。</li><li>类非 static 成员变量并且仅在本类使用，必须是 private。</li><li>类 static 成员变量如果仅在本类使用，必须是 private。</li><li>若是 static 成员变量，考虑是否为 final。</li><li>类成员方法只供类内部调用，必须是 private。</li><li>类成员方法只对继承类公开，那么限制为 protected。</li></ol><p><span style="color:olive;">说明：</span>任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。</p></li></ol><h3 id="五-日期时间" tabindex="-1">(五) 日期时间 <a class="header-anchor" href="#五-日期时间" aria-label="Permalink to “(五) 日期时间”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>日期格式化时，传入 pattern 中表示年份统一使用小写的 y。</p><p><span style="color:olive;">说明：</span>日期格式化时，yyyy 表示当天所在的年，而大写的 YYYY 代表是 week in which year（JDK7 之后引入的概念），</p><p>意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，返回的 YYYY 就是下一年。</p><p><span style="color:teal;">正例：</span>表示日期和时间的格式：<code>new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;)</code></p><p><span style="color:orangered;">反例：</span>某程序员因使用 YYYY/MM/dd 进行日期格式化，2017/12/31 执行结果为 2018/12/31，造成线上故障。</p></li><li><p><span style="color:firebrick;">【强制】</span>在日期格式中分清楚大写的 M 和小写的 m，大写的 H 和小写的 h 分别指代的意义。</p><p><span style="color:olive;">说明：</span>日期格式中的这两对字母表意如下：</p><ol><li>表示月份是大写的 M</li><li>表示分钟则是小写的 m</li><li>24 小时制的是大写的 H</li><li>12 小时制的则是小写的 h</li></ol></li><li><p><span style="color:firebrick;">【强制】</span>获取当前毫秒数：<code>System.currentTimeMillis()</code>；而不是 <code>new Date().getTime()。</code></p><p><span style="color:olive;">说明：</span>获取纳秒级时间，则使用 <code>System.nanoTime</code> 的方式。在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。</p></li><li><p><span style="color:firebrick;">【强制】</span>不允许在程序任何地方中使用：1）java.sql.Date 2）java.sql.Time 3）java.sql.Timestamp。</p><p><span style="color:olive;">说明：</span>第 1 个不记录时间，getHours() 抛出异常；第 2 个不记录日期，getYear() 抛出异常；第 3 个在构造方法 super((time / 1000) * 1000)，在 Timestamp 属性 fastTime 和 nanos 分别存储秒和纳秒信息。</p><p><span style="color:orangered;">反例：</span>java.util.Date.after(Date) 进行时间比较时，当入参是 java.sql.Timestamp 时，会触发 JDK BUG<span style="color:silver;">（JDK9 已修复）</span>，可能导致比较时的意外结果。</p></li><li><p><span style="color:firebrick;">【强制】</span>禁止在程序中写死一年为 365 天，避免在公历闰年时出现日期转换错误或程序逻辑错误。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取今年的天数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> daysOfThisYear</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">lengthOfYear</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取指定某年的天数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2011</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">lengthOfYear</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 第一种情况：在闰年 366 天时，出现数组越界异常</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dayArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">365</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 第二种情况：一年有效期的会员制，2020 年 1 月 26 日注册，硬编码 365 返回的却是 2021 年 1 月 25 日</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Calendar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> calendar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Calendar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">calendar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2020</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">26</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">calendar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Calendar.DATE, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">365</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div></li><li><p><span style="color:gold;">【推荐】</span>避免公历闰年 2 月问题。闰年的 2 月份有 29 天，一年后的那一天不可能是 2 月 29 日。</p></li><li><p><span style="color:gold;">【推荐】</span>使用枚举值来指代月份。如果使用数字，注意 Date，Calendar 等日期相关类的月份 month 取值范围从 0 到 11 之间。</p><p><span style="color:olive;">说明：</span>参考 JDK 原生注释，Month value is 0-based. e.g., 0 for January.</p><p><span style="color:teal;">正例：</span>Calendar.JANUARY，Calendar.FEBRUARY，Calendar.MARCH 等来指代相应月份来进行传参或比较。</p></li></ol><h3 id="六-集合处理" tabindex="-1">(六) 集合处理 <a class="header-anchor" href="#六-集合处理" aria-label="Permalink to “(六) 集合处理”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>关于 hashCode 和 equals 的处理，遵循如下规则：</p><ol><li>只要覆写 equals，就必须覆写 hashCode。</li><li>因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须覆写这两种方法。</li><li>如果自定义对象作为 Map 的键，那么必须覆写 hashCode 和 equals。</li></ol><p><span style="color:olive;">说明：</span>String 因为覆写了 hashCode 和 equals 方法，所以可以愉快地将 String 对象作为 key 来使用。</p></li><li><p><span style="color:firebrick;">【强制】</span>判断所有集合内部的元素是否为空，使用 isEmpty() 方法，而不是 size() == 0 的方式。</p><p><span style="color:olive;">说明：</span>在某些集合中，前者的时间复杂度为 O(1)，而且可读性更好。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> HashMap&lt;&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;no element in this map.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>在使用 java.util.stream.Collectors 类的 toMap() 方法转为 Map 集合时，一定要使用参数类型为 BinaryOperator，参数名为 mergeFunction 的方法，否则当出现相同 key 时会抛出 IllegalStateException 异常。</p><p><span style="color:olive;">说明：</span>参数 mergeFunction 的作用是当出现 key 重复时，自定义对 value 的处理策略。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Pair</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt;&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pairArrayList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ArrayList&lt;&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pairArrayList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Pair&lt;&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">12.10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pairArrayList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Pair&lt;&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">12.19</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pairArrayList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Pair&lt;&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6.28</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 生成的 map 集合中只有一个键值对：{version=6.28}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pairArrayList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Pair</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">getKey, Pair</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">getValue, (v1, v2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> v2));</span></span></code></pre></div><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">departments</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[]{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;RDC&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;RDC&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;KKB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 抛出 IllegalStateException 异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(departments)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">hashCode, str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str));</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>在使用 java.util.stream.Collectors 类的 toMap() 方法转为 Map 集合时，一定要注意当 value</p><p>为 null 时会抛 NPE 异常。</p><p><span style="color:olive;">说明：</span>在 java.util.HashMap 的 merge 方法里会进行如下的判断：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> remappingFunction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> NullPointerException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Pair</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt;&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pairArrayList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ArrayList&lt;&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pairArrayList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Pair&lt;&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;version1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8.3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pairArrayList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Pair&lt;&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;version2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 抛出 NullPointerException 异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pairArrayList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Pair</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">getKey, Pair</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">getValue, (v1, v2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> v2));</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException 异常：java.util.RandomAccessSubList cannot be cast to java.util.ArrayList。</p><p><span style="color:olive;">说明：</span>subList() 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList 本身，而是 ArrayList 的一个视图，对于 SubList 的所有操作最终会反映到原列表上。</p></li><li><p><span style="color:firebrick;">【强制】</span>使用 Map 的方法 keySet() / values() / entrySet() 返回集合对象时，不可以对其进行添加元素操作，否则会抛出 UnsupportedOperationException 异常。</p></li><li><p><span style="color:firebrick;">【强制】</span>Collections 类返回的对象，如：emptyList() / singletonList() 等都是 immutable list，不可对其进行添加或者删除元素的操作。</p><p><span style="color:orangered;">反例：</span>如果查询无结果，返回 Collections.emptyList() 空集合对象，调用方一旦在返回的集合中进行了添加元素的操作，就会触发 UnsupportedOperationException 异常。</p></li><li><p><span style="color:firebrick;">【强制】</span>在 subList 场景中，<span style="color:blue;">高度注意</span>对父集合元素的增加或删除，均会导致子列表的遍历、增加、删除产生 ConcurrentModificationException 异常。</p><p><span style="color:olive;">说明：</span>抽查表明，90% 的程序员对此知识点都有错误的认知。</p></li><li><p><span style="color:firebrick;">【强制】</span>使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一致、长度为 0 的空数组。</p><p><span style="color:orangered;">反例：</span>直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ArrayList&lt;&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;guan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;bao&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toArray</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]);</span></span></code></pre></div><p><span style="color:olive;">说明：</span>使用 toArray 带参方法，数组空间大小的 length：</p><ol><li>等于 0，动态创建与 size 相同的数组，性能最好。</li><li>大于 0 但小于 size，重新创建大小等于 size 的数组，增加 GC 负担。</li><li>等于 size，在高并发情况下，数组创建完成之后，size 正在变大的情况下，负面影响与 2 相同。</li><li>大于 size，空间浪费，且在 size 处插入 null 值，存在 NPE 隐患。</li></ol></li><li><p><span style="color:firebrick;">【强制】</span>使用 Collection 接口任何实现类的 addAll() 方法时，要对输入的集合参数进行 NPE 判断。</p><p><span style="color:olive;">说明：</span>在 ArrayList#addAll 方法的第一行代码即 Object[] a = c.toArray()；其中 c 为输入集合参数，如果为 null，则直接抛出异常。</p></li><li><p><span style="color:firebrick;">【强制】</span>使用工具类 Arrays.asList() 把数组转换成集合时，不能使用其修改集合相关的方法，它的 add / remove / clear 方法会抛出 UnsupportedOperationException 异常。</p><p><span style="color:olive;">说明：</span>asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList 体现的是适配器模式，只是转换接口，后台的数据仍是数组。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[]{ </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;yang&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;guan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;bao&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(str);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;yangguanbao&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 会报运行时异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">str[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;change&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 该操作会让list 中的元素也会随之修改，反之亦然</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法，而&lt;? super T&gt;不能使用 get 方法，两者在接口调用赋值的场景中容易出错。</p><p><span style="color:olive;">说明：</span>扩展说一下 PECS(Producer Extends Consumer Super) 原则，即频繁往外读取内容的，适合用&lt;? extends T&gt;，经常往里插入的，适合用&lt;? super T&gt;</p></li><li><p><span style="color:firebrick;">【强制】</span>在无泛型限制定义的集合赋值给泛型限制的集合时，在使用集合元素时，需要进行 instanceof 判断，避免抛出 ClassCastException 异常。</p><p><span style="color:olive;">说明：</span>毕竟泛型是在 JDK5 后才出现，考虑到向前兼容，编译器是允许非泛型集合与泛型集合互相赋值。</p><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">generics</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> notGenerics</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">notGenerics.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">notGenerics.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">generics </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> notGenerics;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 此处抛出 ClassCastException 异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> generics.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>不要在 foreach 循环里进行元素的 remove / add 操作。remove 元素请使用 iterator 方式，如果并发操作，需要对 iterator 对象加锁。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">iterator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (删除元素的条件) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> list) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">				list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><span style="color:olive;">说明：</span>反例中的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”会是同样的结果吗？</p></li><li><p><span style="color:firebrick;">【强制】</span>在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort，Collections.sort 会抛 IllegalArgumentException 异常。</p><p><span style="color:olive;">说明：</span>三个条件如下</p><ol><li>x，y 的比较结果和 y，x 的比较结果相反。</li><li>x &gt; y，y &gt; z，则 x &gt; z。</li><li>x = y，则 x，z 比较结果和 y，z 比较结果相同。</li></ol><p><span style="color:orangered;">反例：</span>下例中没有处理相等的情况，交换两个对象判断结果并不互反，不符合第一个条件，在实际使用中可能会出现异常。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Comparator&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> compare</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Student </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">o1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, Student </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">o2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> o1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> o2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div></li><li><p><span style="color:gold;">【推荐】</span>泛型集合使用时，在 JDK7 及以上，使用 diamond 语法或全省略。</p><p><span style="color:olive;">说明：</span>菱形泛型，即 diamond，直接使用&lt;&gt;来指代前边已经指定的类型。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// diamond 方式，即&lt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">userCache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> HashMap&lt;&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 全省略方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div></li><li><p><span style="color:gold;">【推荐】</span>集合初始化时，指定集合初始值大小。</p><p><span style="color:olive;">说明：</span>HashMap 使用构造方法 HashMap(int initialCapacity) 进行初始化时，如果暂时无法确定集合大小，那么指定默认值（16）即可。</p><p><span style="color:teal;">正例：</span>initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子（即 loaderfactor）默认为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。</p><p><span style="color:orangered;">反例：</span>HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素增加而被迫不断扩容，resize() 方法总共会调用 8 次，反复重建哈希表和数据迁移。当放置的集合元素个数达千万级时会影响程序性能。</p></li><li><p><span style="color:gold;">【推荐】</span>使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。</p><p><span style="color:olive;">说明：</span>keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应的 value。而entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用 Map.forEach 方法。</p><p><span style="color:teal;">正例：</span>values() 返回的是 V 值集合，是一个 list 集合对象；keySet() 返回的是 K 值集合，是一个 Set 集合对象；entrySet() 返回的是 K-V 值组合的 Set 集合。</p></li><li><p><span style="color:gold;">【推荐】</span>高度注意 Map 类集合 K / V 能不能存储 null 值的情况，如下表格：</p><table tabindex="0"><thead><tr><th style="text-align:left;">集合类</th><th style="text-align:left;">Key</th><th style="text-align:left;">Value</th><th style="text-align:left;">Super</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">Hashtable</td><td style="text-align:left;"><span style="color:red;">不允许为 null</span></td><td style="text-align:left;"><span style="color:red;">不允许为 null</span></td><td style="text-align:left;">Dictionary</td><td style="text-align:left;">线程安全</td></tr><tr><td style="text-align:left;">TreeMap</td><td style="text-align:left;"><span style="color:red;">不允许为 null</span></td><td style="text-align:left;"><span style="color:blue;">允许为 null</span></td><td style="text-align:left;">AbstractMap</td><td style="text-align:left;">线程不安全</td></tr><tr><td style="text-align:left;">ConcurrentHashMap</td><td style="text-align:left;"><span style="color:red;">不允许为 null</span></td><td style="text-align:left;"><span style="color:red;">不允许为 null</span></td><td style="text-align:left;">AbstractMap</td><td style="text-align:left;">锁分段技术(JDK8:CAS)</td></tr><tr><td style="text-align:left;">HashMap</td><td style="text-align:left;"><span style="color:blue;">允许为 null</span></td><td style="text-align:left;"><span style="color:blue;">允许为 null</span></td><td style="text-align:left;">AbstractMap</td><td style="text-align:left;">线程不安全</td></tr></tbody></table><p><span style="color:orangered;">反例：</span>由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛</p><p>出 NPE 异常。</p></li><li><p><span style="color:olivedrab;">【参考】</span>合理利用好集合的有序性（sort）和稳定性（order），避免集合的无序性（unsort）和不稳定性（unorder）带来的负面影响。</p><p><span style="color:olive;">说明：</span>有序性是指遍历的结果是按某种比较规则依次排列的，稳定性指集合每次遍历的元素次序是一定的。如：ArrayList 是 order / unsort；HashMap 是 unorder / unsort；TreeSet 是 order / sort。</p></li><li><p><span style="color:olivedrab;">【参考】</span>利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的 contains() 进行遍历去重或者判断包含操作。</p></li></ol><h3 id="七-并发处理" tabindex="-1">(七) 并发处理 <a class="header-anchor" href="#七-并发处理" aria-label="Permalink to “(七) 并发处理”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>获取单例对象需要保证线程安全，其中的方法也要保证线程安全。</p><p><span style="color:olive;">说明：</span>资源驱动类、工具类、单例工厂类都需要注意。</p></li><li><p><span style="color:firebrick;">【强制】</span>创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</p><p><span style="color:teal;">正例：</span>自定义线程工厂，并且根据外部特征进行分组，比如，来自同一机房的调用，把机房编号赋值给 whatFeatureOfGroup：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> UserThreadFactory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> ThreadFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> namePrefix;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AtomicInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> nextId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> AtomicInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 定义线程组名称，在利用 jstack 来排查问题时，非常有帮助</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    UserThreadFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">whatFeatureOfGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        namePrefix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;FromUserThreadFactory&#39;s&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> whatFeatureOfGroup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;-Worker-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Thread </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">newThread</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Runnable </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">task</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> namePrefix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> nextId.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getAndIncrement</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> thread</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, task, name, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> thread;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p><p><span style="color:olive;">说明：</span>线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p></li><li><p><span style="color:firebrick;">【强制】</span>线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p><p><span style="color:olive;">说明：</span>Executors 返回的线程池对象的弊端如下：</p><ol><li><p><span style="color:red;">FixedThreadPool</span> 和 <span style="color:red;">SingleThreadPool</span>：</p><p>允许的<span style="color:blue;">请求队列长度</span>为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</p></li><li><p><span style="color:red;">CachedThreadPool</span>：</p><p>允许的<span style="color:blue;">创建线程数量</span>为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p></li><li><p><span style="color:red;">ScheduledThreadPool</span>：</p><p>允许的<span style="color:blue;">请求队列长度</span>为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</p></li></ol></li><li><p><span style="color:firebrick;">【强制】</span>SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为 static，必须加锁，或者使用 DateUtils 工具类。</p><p><span style="color:teal;">正例：</span>注意线程安全，使用 DateUtils。亦推荐如下处理：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ThreadLocal</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DateFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dateStyle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ThreadLocal&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DateFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    protected</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> DateFormat </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">initialValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> SimpleDateFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;yyyy-MM-dd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div><p><span style="color:olive;">说明：</span>如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，DateTimeFormatter 代替 SimpleDateFormat，官方给出的解释：simple beautiful strong immutable thread-safe。</p></li><li><p><span style="color:firebrick;">【强制】</span>必须回收自定义的 ThreadLocal 变量记录的当前线程的值，尤其在线程池场景下，线程经常会被复用，如果不清理自定义的 ThreadLocal 变量，可能会影响后续业务逻辑和造成内存泄露等问题。尽量在代码中使用 try-finally 块进行回收。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">objectThreadLocal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(userInfo);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    objectThreadLocal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。</p><p><span style="color:olive;">说明：</span>尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</p></li><li><p><span style="color:firebrick;">【强制】</span>对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。</p><p><span style="color:olive;">说明：</span>线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。</p></li><li><p><span style="color:firebrick;">【强制】</span>在使用阻塞等待获取锁的方式中，必须在 try 代码块之外，并且在加锁方法与 try 代码块之间没有任何可能抛出异常的方法调用，避免加锁成功后，在 finally 中无法解锁。</p><p>说明一：在 lock 方法与 try 代码块之间的方法调用抛出异常，无法解锁，造成其它线程无法成功获取锁。</p><p>说明二：如果 lock 方法在 try 代码块之内，可能由于其它方法抛出异常，导致在 finally 代码块中，unlock 对未加锁的对象解锁，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），抛出 IllegalMonitorStateException 异常。</p><p>说明三：在 Lock 对象的 lock 方法实现中可能抛出 unchecked 异常，产生的后果与说明二相同。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> lock</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> XxxLock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">lock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    doOthers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    lock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> lock</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> XxxLock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">		// 如果此处抛出异常，则直接执行 finally 代码块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">		// 无论加锁是否成功，finally 代码块都会执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    lock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    doOthers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    lock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>在使用尝试机制来获取锁的方式中，进入业务代码块之前，必须先判断当前线程是否持有锁。锁的释放规则与锁的阻塞等待方式相同。</p></li></ol><p><span style="color:olive;">说明：</span>Lock 对象的 unlock 方法在执行时，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），如果当前线程不持有锁，则抛出 IllegalMonitorStateException 异常。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> lock</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> XxxLock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isLocked</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> lock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">tryLock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (isLocked) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        doOthers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        lock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ol start="11"><li><p><span style="color:firebrick;">【强制】</span>并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。</p><p><span style="color:olive;">说明：</span>如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。</p></li><li><p><span style="color:firebrick;">【强制】</span>多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。</p></li><li><p><span style="color:gold;">【推荐】</span>资金相关的金融敏感信息，使用悲观锁策略。</p><p><span style="color:olive;">说明：</span>乐观锁在获得锁的同时已经完成了更新操作，校验逻辑容易出现漏洞，另外，乐观锁对冲突的解决策略有较复杂的要求，处理不当容易造成系统压力或数据异常，所以资金相关的金融敏感信息不建议使用乐观锁更新。</p><p><span style="color:teal;">正例：</span>悲观锁遵循<span style="color:blue;">一锁二判三更新四释放</span>的原则。</p></li><li><p><span style="color:gold;">【推荐】</span>使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown 方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。</p><p><span style="color:olive;">说明：</span>注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。</p></li><li><p><span style="color:gold;">【推荐】</span>避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一 seed 导致的性能下降。</p><p><span style="color:olive;">说明：</span>Random 实例包括 java.util.Random 的实例或者 Math.random() 的方式。</p><p><span style="color:teal;">正例：</span>在 JDK7 之后，可以直接使用 API ThreadLocalRandom，而在 JDK7 之前，需要编码保证每个线程持有一个单独的 Random 实例。</p></li><li><p><span style="color:gold;">【推荐】</span>通过双重检查锁（double-checked locking），实现延迟初始化需要将目标属性声明为 volatile 型，（比如修改 helper 的属性声明为 private volatile Helper helper = null;）。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> LazyInitDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> volatile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Helper</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> helper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Helper </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getHelper</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (helper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (helper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    helper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Helper</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> helper;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">		// other methods and fields...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p><span style="color:olivedrab;">【参考】</span>volatile 解决多线程内存不可见问题对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。</p><p><span style="color:olive;">说明：</span>如果是 count++操作，使用如下类实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">AtomicInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> AtomicInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">count.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">addAndGet</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。</p></li><li><p><span style="color:olivedrab;">【参考】</span>HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中注意规避此风险。</p></li><li><p><span style="color:olivedrab;">【参考】</span>ThreadLocal 对象使用 static 修饰，ThreadLocal 无法解决共享对象的更新问题。</p><p><span style="color:olive;">说明：</span>这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象（只要是这个线程内定义的）都可以操控这个变量。</p></li></ol><h3 id="八-控制语句" tabindex="-1">(八) 控制语句 <a class="header-anchor" href="#八-控制语句" aria-label="Permalink to “(八) 控制语句”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>在一个 switch 块内，每个 case 要么通过 continue / break / return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使它什么代码也没有。</p><p><span style="color:olive;">说明：</span>注意 break 是退出 switch 语句块，而 return 是退出方法体。</p></li><li><p><span style="color:firebrick;">【强制】</span>当 switch 括号内的变量类型为 String 并且此变量为外部参数时，必须先进行 null 判断。</p><p><span style="color:orangered;">反例：</span>如下的代码输出是什么？(会报空指针异常)</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> SwitchString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        method</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        switch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (param) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">            // 肯定不是进入这里</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            case</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;sth&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;it&#39;s sth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">            // 也不是进入这里</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            case</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;null&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;it&#39;s null&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">            // 也不是进入这里</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            default:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>在 if / else / for / while / do 语句中必须使用大括号。</p><p><span style="color:orangered;">反例：</span> if (condition) statements;</p><p><span style="color:olive;">说明：</span>即使只有一行代码，也要采用大括号的编码方式。</p></li><li><p><span style="color:firebrick;">【强制】</span>三目运算符 condition ? 表达式 1：表达式 2 中，高度注意表达式 1 和 2 在类型对齐时，可能抛出因自动拆箱导致的 NPE 异常。</p><p><span style="color:olive;">说明：</span>以下两种场景会触发类型对齐的拆箱操作：</p><p>1）表达式 1 或 表达式 2 的值只要有一个是原始类型。</p><p>2）表达式 1 或 表达式 2 的值的类型不一致，会强制拆箱升级成表示范围更大的那个类型。</p><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> flag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// a*b 的结果是 int 类型，那么 c 会强制拆箱成 int 类型，抛出 NPE 异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c);</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>在高并发场景中，避免使用“等于”判断作为中断或退出的条件。</p><p><span style="color:olive;">说明：</span>如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。<span style="color:orangered;">反例：</span>判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，这样的话，活动无法终止。</p></li><li><p><span style="color:gold;">【推荐】</span>当方法的代码总行数超过 10 行时，return / throw 等中断逻辑的右大括号后需要加一个空行。</p><p><span style="color:olive;">说明：</span>这样做逻辑清晰，有利于代码阅读时重点关注。</p></li><li><p><span style="color:gold;">【推荐】</span>表达异常的分支时，少用 if-else 方式，这种方式可以改写成：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (condition) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 接着写 else 的业务逻辑代码;</span></span></code></pre></div><p><span style="color:olive;">说明：</span>如果非使用 if()...else if()...else...方式表达逻辑，避免后续代码维护困难，请勿超过 3 层。</p><p><span style="color:teal;">正例：</span>超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> findBoyfriend</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Man man) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (man.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isUgly</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;本姑娘是外貌协会的资深会员&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (man.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isPoor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;贫贱夫妻百事哀&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (man.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isBadTemper</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;银河有多远，你就给我滚多远&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;可以先交往一段时间看看&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p><span style="color:gold;">【推荐】</span>除常用方法（如 getXxx / isXxx）等外不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</p><p><span style="color:olive;">说明：</span>很多 if 语句内的逻辑表达式相当复杂，与、或、取反混合运算，甚至各种方法纵深调用，理解成本非常高。如果赋值一个非常好理解的布尔变量名字，则是件令人爽心悦目的事情。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 伪代码如下</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> existed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(fileName, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;w&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (...) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (...);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (existed) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> acquire</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> arg) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">tryAcquire</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(arg) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> acquireQueued</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">addWaiter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Node.EXCLUSIVE), arg)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        selfInterrupt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p><span style="color:gold;">【推荐】</span>不要在其它表达式（尤其是条件表达式）中，插入赋值语句。</p><p><span style="color:olive;">说明：</span>赋值点类似于人体的穴位，对于代码的理解至关重要，所以赋值语句需要清晰地单独成为一行。 <span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Lock </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getLock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fair) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 算术表达式中出现赋值操作，容易忽略 count 值已经被改变</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    threshold </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Integer.MAX_VALUE) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 条件表达式中出现赋值操作，容易误认为是 sync == fair</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (sync </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fair) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FairSync</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> NonfairSync</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p><span style="color:gold;">【推荐】</span>循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据 库连接，进行不必要的 try-catch 操作（这个 try-catch 是否可以移至循环体外）。</p></li><li><p><span style="color:gold;">【推荐】</span>避免采用取反逻辑运算符。</p><p><span style="color:olive;">说明：</span>取反逻辑不利于快速理解，并且取反逻辑写法一般都存在对应的正向逻辑写法。</p><p><span style="color:teal;">正例：</span>使用 if(x &lt; 628) 来表达 x 小于 628。</p><p><span style="color:orangered;">反例：</span>使用 if(!(x &gt;= 628)) 来表达 x 小于 628。</p></li><li><p><span style="color:gold;">【推荐】</span>公开接口需要进行入参保护，尤其是批量操作的接口。</p><p><span style="color:orangered;">反例：</span>某业务系统，提供一个用户批量查询的接口，API 文档上有说最多查多少个，但接口实现上没做任何保护，导致调用方传了一个 1000 的用户 id 数组过来后，查询信息后，内存爆了。</p></li><li><p><span style="color:olivedrab;">【参考】</span>下列情形，需要进行参数校验：</p><ol><li>调用频次低的方法。</li><li>执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。</li><li>需要极高稳定性和可用性的方法。</li><li>对外提供的开放接口，不管是 RPC / API / HTTP 接口。</li><li>敏感权限入口。</li></ol></li><li><p><span style="color:olivedrab;">【参考】</span>下列情形，不需要进行参数校验：</p><ol><li>极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查。</li><li>底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。</li><li>被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。</li></ol></li></ol><h3 id="九-注释规约" tabindex="-1">(九) 注释规约 <a class="header-anchor" href="#九-注释规约" aria-label="Permalink to “(九) 注释规约”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>类、类属性、类方法的注释必须使用 Javadoc 规范，使用 /** 内容 */ 格式，不得使用 // xxx方式。</p><p><span style="color:olive;">说明：</span>在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p></li><li><p><span style="color:firebrick;">【强制】</span>所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数异常说明外，还必须指出该方法做什么事情，实现什么功能。</p><p><span style="color:olive;">说明：</span>对子类的实现要求，或者调用注意事项，请一并说明。</p></li><li><p><span style="color:firebrick;">【强制】</span>所有的类都必须添加创建者和创建日期。</p><p><span style="color:olive;">说明：</span>在设置模板时，注意 IDEA 的@author 为<code>\${USER}</code>，而 eclipse 的@author 为<code>\${user}</code>，大小写有区别，而日期的设置统一为 yyyy/MM/dd 的格式。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@author</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> Manaphy</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * @date 2021/11/26</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> **/</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>方法内部单行注释，在被注释语句上方另起一行，使用 // 注释。方法内部多行注释使用 /* */注释，注意与代码对齐。</p></li><li><p><span style="color:firebrick;">【强制】</span>所有的枚举类型字段必须要有注释，说明每个数据项的用途。</p></li><li><p><span style="color:gold;">【推荐】</span>与其用半吊子英文来注释，不如用中文注释说清楚。专有名词与关键字保持英文原文即可。</p><p><span style="color:orangered;">反例：</span>“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p></li><li><p><span style="color:gold;">【推荐】</span>代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等。</p><p><span style="color:olive;">说明：</span>代码与注释更新不同步，就像公路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。</p></li><li><p><span style="color:gold;">【推荐】</span>在类中<span style="color:blue;">删除未使用的</span>任何字段和方法、内部类；在方法中<span style="color:blue;">删除未使用的</span>参数声明与内部变量。</p></li><li><p><span style="color:olivedrab;">【参考】</span>谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。</p><p><span style="color:olive;">说明：</span>代码被注释掉有两种可能性：1）后续会恢复此段代码逻辑。2）永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉即可，假如需要查阅历史代码，登录代码仓库即可。</p></li><li><p><span style="color:olivedrab;">【参考】</span>对于注释的要求：第一、能够准确反映设计思想和代码逻辑；第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。</p></li><li><p><span style="color:olivedrab;">【参考】</span>好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的另一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释又是相当大的负担。</p><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// put elephant into fridge</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(elephant, fridge);</span></span></code></pre></div><p>方法名 put，加上两个有意义的变量名称 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</p></li><li><p><span style="color:olivedrab;">【参考】</span>特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。</p><p>1）待办事宜（<span style="color:blue;">TODO</span>）：（标记人，标记时间，[预计处理时间]）表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc 还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个 Javadoc 标签）。</p><p>2）错误，不能工作（<span style="color:blue;">FIXME</span>）：（标记人，标记时间，[预计处理时间]）在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</p></li></ol><h3 id="十-前后端规约" tabindex="-1">(十) 前后端规约 <a class="header-anchor" href="#十-前后端规约" aria-label="Permalink to “(十) 前后端规约”">​</a></h3>`,26),u=a('<li><p><span style="color:firebrick;">【强制】</span>前后端交互的 API，需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。</p><p><span style="color:olive;">说明：</span></p><ul><li><p>协议：生产环境必须使用 HTTPS。</p></li><li><p>路径：每一个 API 需对应一个路径，表示 API 具体的请求地址：</p><ul><li><p>代表一种资源，只能为名词，推荐使用复数，不能为动词，请求方法已经表达动作意义。</p></li><li><p>URL 路径不能使用大写，单词如果需要分隔，统一使用下划线。</p></li><li><p>路径禁止携带表示请求内容类型的后缀，比如&quot;.json&quot;，&quot;.xml&quot;，通过 accept 头表达即可。</p></li></ul></li><li><p>请求方法：对具体操作的定义，常见的请求方法如下：</p><ul><li>GET：从服务器取出资源。</li><li>POST：在服务器新建一个资源。</li><li>PUT：在服务器更新资源。</li><li>DELETE：从服务器删除资源。</li></ul></li><li><p>请求内容：URL 带的参数必须无敏感信息或符合安全要求；body 里带参数时必须设置 Content-Type。</p></li><li><p>响应体：响应体 body 可放置多种数据类型，由 Content-Type 头来确定。</p></li></ul></li><li><p><span style="color:firebrick;">【强制】</span>前后端数据列表相关的接口返回，如果为空，则返回空数组[]或空集合{}。</p><p><span style="color:olive;">说明：</span>此条约定有利于数据层面上的协作更加高效，减少前端很多琐碎的 null 判断。</p></li><li><p><span style="color:firebrick;">【强制】</span>服务端发生错误时，返回给前端的响应信息必须包含 HTTP 状态码，errorCode、</p><p>errorMessage、用户提示信息四个部分。</p><p><span style="color:olive;">说明：</span>四个部分的涉众对象分别是浏览器、前端开发、错误排查人员、用户。其中输出给用户的提示信息要求：简短清晰、提示友好，引导用户进行下一步操作或解释错误原因，提示信息可以包括错误原因、上下文环境、推荐操作等。</p><p>errorMessage：简要描述后端出错原因，便于错误排查人员快速定位问题，注意不要包含敏</p><p>感数据信息。</p><p><span style="color:teal;">正例：</span>常见的 HTTP 状态码如下</p><ol><li>200 OK：表明该请求被成功地完成，所请求的资源发送到客户端。</li><li>401 Unauthorized：请求要求身份验证，常见对于需要登录而用户未登录的情况。</li><li>403 Forbidden：服务器拒绝请求，常见于机密信息或复制其它登录用户链接访问服务器的情况。</li><li>404 NotFound：服务器无法取得所请求的网页，请求资源不存在。</li><li>500 InternalServerError：服务器内部错误。</li></ol></li><li><p><span style="color:firebrick;">【强制】</span>在前后端交互的 JSON 格式数据中，所有的 key 必须为小写字母开始的 lowerCamelCase 风格，符合英文表达习惯，且表意完整。</p><p><span style="color:teal;">正例：</span>errorCode / errorMessage / assetStatus / menuList / orderList / configFlag</p><p><span style="color:orangered;">反例：</span>ERRORCODE / ERROR_CODE / error_message / error-message / errormessage</p></li><li><p><span style="color:firebrick;">【强制】</span>errorMessage 是前后端错误追踪机制的体现，可以在前端输出到 type=&quot;hidden&quot; 文字类控件中，或者用户端的日志中，帮助我们快速地定位出问题。</p></li>',5),E=s("p",null,[s("span",{style:{color:"firebrick"}},"【强制】"),i("对于需要使用超大整数的场景，服务端一律使用 String 字符串类型返回，禁止使用 Long 类型。")],-1),b=s("span",{style:{color:"olive"}},"说明：",-1),v=s("span",{style:{color:"silver"}},"注：此类型为双精度浮点数，表示原理与取值范围等同于 Java 中的 Double",-1),m={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},f={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"2.919ex",height:"1.887ex",role:"img",focusable:"false",viewBox:"0 -833.9 1290.1 833.9","aria-hidden":"true"},x=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" style="stroke-width:3;"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g></g></g>',1),T=[x],S=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msup",null,[s("mn",null,"2"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"63")])])])],-1),L={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},_={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"1.788ex",height:"1.887ex",role:"img",focusable:"false",viewBox:"0 -833.9 790.1 833.9","aria-hidden":"true"},q=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"></g><g data-mml-node="TeXAtom" transform="translate(33,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" style="stroke-width:3;"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g></g></g>',1),O=[q],j=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msup",null,[s("mi"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"53")])])])],-1),P=s("p",null,[s("span",{style:{color:"orangered"}},"反例："),i("通常在订单号或交易号大于等于 16 位，大概率会出现前后端订单数据不一致的情况。")],-1),M=s("p",null,'比如，后端传输的 "orderId"：362909601374617692，前端拿到的值却是：362909601374617660',-1),w=a('<li><p><span style="color:firebrick;">【强制】</span>HTTP 请求通过 URL 传递参数时，不能超过 2048 字节。</p><p><span style="color:olive;">说明：</span>不同浏览器对于 URL 的最大长度限制略有不同，并且对超出最大长度的处理逻辑也有差异，2048 字节是取所有浏览器的最小值。</p><p><span style="color:orangered;">反例：</span>某业务将退货的商品 id 列表放在 URL 中作为参数传递，当一次退货商品数量过多时，URL 参数超长，传递到后端的参数被截断，导致部分商品未能正确退货。</p></li><li><p><span style="color:firebrick;">【强制】</span>HTTP 请求通过 body 传递内容时，必须控制长度，超出最大长度后，后端解析会出错。</p><p><span style="color:olive;">说明：</span>nginx 默认限制是 1MB，tomcat 默认限制为 2MB，当确实有业务需要传较大内容时，可以调大服务器端的限制。</p></li><li><p><span style="color:firebrick;">【强制】</span>在翻页场景中，用户输入参数的小于 1，则前端返回第一页参数给后端；后端发现用户输入的</p><p>参数大于总页数，直接返回最后一页。</p></li><li><p><span style="color:firebrick;">【强制】</span>服务器内部重定向必须使用 forward；外部重定向地址必须使用 URL 统一代理模块生成，否</p></li>',4),Q=a(`<p>则会因线上采用 HTTPS 协议而导致浏览器提示“不安全”，并且还会带来 URL 维护不一致的问题。</p><ol start="11"><li><p><span style="color:gold;">【推荐】</span>服务器返回信息必须被标记是否可以缓存，如果缓存，客户端可能会重用之前的请求结果。</p><p><span style="color:olive;">说明：</span>缓存有利于减少交互次数，减少交互的平均延迟。</p><p><span style="color:teal;">正例：</span>http1.1 中，s-maxage 告诉服务器进行缓存，时间单位为秒，用法如下，</p><p>response.setHeader(&quot;Cache-Control&quot;, &quot;s-maxage=&quot; + cacheSeconds);</p></li><li><p><span style="color:gold;">【推荐】</span>服务端返回的数据，使用 JSON 格式而非 XML。</p><p><span style="color:olive;">说明：</span>尽管 HTTP 支持使用不同的输出格式，例如纯文本，JSON，CSV，XML，RSS 甚至 HTML。如果我们使用的面向用户的服务，应该选择 JSON 作为通信中使用的标准数据交换格式，包括请求和响应。此外，application/JSON 是一种通用的 MIME 类型，具有实用、精简、易读的特点。</p></li><li><p><span style="color:gold;">【推荐】</span>前后端的时间格式统一为&quot;yyyy-MM-dd HH:mm:ss&quot;，统一为 GMT。</p></li><li><p><span style="color:olivedrab;">【参考】</span>在接口路径中不要加入版本号，版本控制在 HTTP 头信息中体现，有利于向前兼容。</p><p><span style="color:olive;">说明：</span>当用户在低版本与高版本之间反复切换工作时，会导致迁移复杂度升高，存在数据错乱风险。</p></li></ol><h3 id="十一-其他" tabindex="-1">(十一) 其他 <a class="header-anchor" href="#十一-其他" aria-label="Permalink to “(十一) 其他”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。</p><p><span style="color:olive;">说明：</span>不要在方法体内定义：<code>Pattern pattern = Pattern.compile(&quot;规则&quot;);</code></p></li><li><p><span style="color:firebrick;">【强制】</span>避免用 ApacheBeanutils 进行属性的 copy。</p><p><span style="color:olive;">说明：</span>ApacheBeanUtils 性能较差，可以使用其他方案比如 SpringBeanUtils，CglibBeanCopier，注意均是浅拷贝。</p></li><li><p><span style="color:firebrick;">【强制】</span>velocity 调用 POJO 类的属性时，直接使用属性名取值即可，模板引擎会自动按规范调用 POJO的 getXxx()，如果是 boolean 基本数据类型变量（boolean 命名不需要加 is 前缀），会自动调 isXxx() 方法。</p><p><span style="color:olive;">说明：</span>注意如果是 Boolean 包装类对象，优先调用 getXxx() 的方法。</p></li><li><p><span style="color:firebrick;">【强制】</span>后台输送给页面的变量必须加 $!{var} ——中间的感叹号。</p><p><span style="color:olive;">说明：</span>如果 var 等于 null 或者不存在，那么 \${var} 会直接显示在页面上。</p></li><li><p><span style="color:firebrick;">【强制】</span>注意 Math.random() 这个方法返回是 double 类型，注意取值的范围 0 ≤ x &lt; 1（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后取整，直接使用 Random 对象的 nextInt 或者 nextLong 方法。</p></li><li><p><span style="color:firebrick;">【强制】</span>枚举 enum（括号内）的属性字段必须是私有且不可变。</p></li><li><p><span style="color:gold;">【推荐】</span>不要在视图模板中加入任何复杂的逻辑运算。</p><p><span style="color:olive;">说明：</span>根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。</p></li><li><p><span style="color:gold;">【推荐】</span>任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。</p></li><li><p><span style="color:gold;">【推荐】</span>及时清理不再使用的代码段或配置信息。</p><p><span style="color:olive;">说明：</span>对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。</p><p><span style="color:teal;">正例：</span>对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三个斜杠(///)来说明注释掉代码的理由：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    /// 业务方通知活动暂停</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // Business business = new Business();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // business.active();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;it&#39;s finished&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li></ol><h2 id="二、异常日志" tabindex="-1">二、异常日志 <a class="header-anchor" href="#二、异常日志" aria-label="Permalink to “二、异常日志”">​</a></h2><h3 id="一-错误码" tabindex="-1">(一) 错误码 <a class="header-anchor" href="#一-错误码" aria-label="Permalink to “(一) 错误码”">​</a></h3><p>略...</p><h3 id="二-异常处理" tabindex="-1">(二) 异常处理 <a class="header-anchor" href="#二-异常处理" aria-label="Permalink to “(二) 异常处理”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>Java 类库中定义的可以通过预检查方式规避的 RuntimeException 异常不应该通过 catch 的方式来处理，比如：NullPointerException，IndexOutOfBoundsException 等等。</p><p><span style="color:olive;">说明：</span>无法通过预检查的异常除外，比如，在解析字符串形式的数字时，可能存在数字格式错误，不得不通过 catch NumberFormatException 来实现。</p><p><span style="color:teal;">正例：</span><code>if (obj != null) {...}</code></p><p><span style="color:orangered;">反例：</span><code>try { obj.method(); } catch (NullPointerException e) {…}</code></p></li><li><p><span style="color:firebrick;">【强制】</span>异常捕获后不要用来做流程控制，条件控制。</p><p><span style="color:olive;">说明：</span>异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。</p></li><li><p><span style="color:firebrick;">【强制】</span>catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。</p><p><span style="color:olive;">说明：</span>对大段代码进行 try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题，这是一种不负责任的表现。</p><p><span style="color:teal;">正例：</span>用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。</p></li><li><p><span style="color:firebrick;">【强制】</span>捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</p></li><li><p><span style="color:firebrick;">【强制】</span>事务场景中，抛出异常被 catch 后，如果需要回滚，一定要注意手动回滚事务。</p></li><li><p><span style="color:firebrick;">【强制】</span>finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。</p><p><span style="color:olive;">说明：</span>如果 JDK7，可以使用 try-with-resources 方式。</p></li><li><p><span style="color:firebrick;">【强制】</span>不要在 finally 块中使用 return</p><p><span style="color:olive;">说明：</span>try 块中的 return 语句执行成功后，并不马上返回，而是继续执行 finally 块中的语句，如果此处存在 return 语句，则会在此直接返回，无情丢弃掉 try 块中的返回点。</p><p><span style="color:orangered;">反例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> checkReturn</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // x 等于 1，此处不返回</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 返回的结果是 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。</p><p><span style="color:olive;">说明：</span>如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</p></li><li><p><span style="color:firebrick;">【强制】</span>在调用 RPC、二方包、或动态生成类的相关方法时，捕捉异常使用 Throwable 类进行拦截。</p><p><span style="color:olive;">说明：</span>通过反射机制来调用方法，如果找不到方法，抛出 NoSuchMethodException。什么情况会抛出 NoSuchMethodError 呢？二方包在类冲突时，仲裁机制可能导致引入非预期的版本使类的方法签名不匹配，或者在字节码修改框架（比如：ASM）动态创建或修改类时，修改了相应的方法签名。这些情况，即使代码编译期是正确的，但在代码运行期时，会抛出 NoSuchMethodError。</p><p><span style="color:orangered;">反例：</span>足迹服务引入了高版本的 spring，导致运行到某段核心逻辑时，抛出NoSuchMethodError 错误，catch 用的类却是 Exception，堆栈向上抛，影响到上层业务。这是一个非核心功能点影响到核心应用的典型反例。</p></li><li><p><span style="color:gold;">【推荐】</span>方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。</p></li></ol><p><span style="color:olive;">说明：</span>本规约明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败，运行时异常等场景返回 null 的情况。</p><ol start="11"><li><p><span style="color:gold;">【推荐】</span>防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：</p><p>1）返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE</p><p><span style="color:orangered;">反例：</span>public int method() { return Integer 对象; }，如果为 null，自动解箱抛 NPE。</p><p>2）数据库的查询结果可能为 null。</p><p>3）集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。</p><p>4）远程调用返回对象时，一律要求进行空指针判断，防止 NPE。</p><p>5）对于 Session 中获取的数据，建议进行 NPE 检查，避免空指针。</p><p>6）级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。</p><p><span style="color:teal;">正例：</span>使用 JDK8 的 Optional 类来防止 NPE 问题。</p></li><li><p><span style="color:gold;">【推荐】</span>定义时区分 unchecked / checked 异常，避免直接抛出 new RuntimeException()，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：DAOException / ServiceException 等。</p></li><li><p><span style="color:olivedrab;">【参考】</span>对于公司外的 http / api 开放接口必须使用错误码，而应用内部推荐异常抛出；跨应用间RPC 调用优先考虑<span style="color:blue;">使用 Result 方式</span>，封装 isSuccess() 方法、错误码、错误简短信息；应用内部推荐异常抛出。</p><p><span style="color:olive;">说明：</span>关于 RPC 方法返回方式使用 Result 方式的理由：</p><p>1）使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。</p><p>2）如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</p></li></ol><h3 id="三-日志规约" tabindex="-1">(三) 日志规约 <a class="header-anchor" href="#三-日志规约" aria-label="Permalink to “(三) 日志规约”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架<span style="color:silver;">（SLF4J、JCL—Jakarta Commons Logging）</span>中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p><p><span style="color:olive;">说明：</span>日志框架（SLF4J、JCL--Jakarta Commons Logging）的使用方式（推荐使用 SLF4J）</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 使用 SLF4J：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> org.slf4j.Logger;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> org.slf4j.LoggerFactory;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> LoggerFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Test.class);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 使用 JCL：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> org.apache.commons.logging.Log;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> org.apache.commons.logging.LogFactory;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> log</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> LogFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getLog</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Test.class);</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>日志文件至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。对于当天日志，以“应用名.log”来保存，保存在/{统一目录}/{应用名}/logs/目录下，过往日志格式为：{logname}.log.{保存日期}，日期格式：yyyy-MM-dd</p><p><span style="color:teal;">正例：</span>以 mppserver 应用为例，日志保存/home/admin/mppserver/logs/mppserver.log，历史日志名称为 mppserver.log.2021-11-28</p></li><li><p><span style="color:firebrick;">【强制】</span>根据国家法律，网络运行状态、网络安全事件、个人敏感信息操作等相关记录，留存的日志不少于六个月，并且进行网络多机备份。</p></li><li><p><span style="color:firebrick;">【强制】</span>应用中的扩展日志（如打点、临时监控、访问日志等）命名方式：appName_logType_logName.log。logType：日志类型，如 stats / monitor / access 等；logName：日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。</p><p><span style="color:olive;">说明：</span>推荐对日志进行分类，将错误日志和业务日志分开放，便于开发人员查看，也便于通过日志对系统进行及时监控。</p><p><span style="color:teal;">正例：</span>mppserver 应用中单独监控时区转换异常，如：mppserver_monitor_timeZoneConvert.log</p></li><li><p><span style="color:firebrick;">【强制】</span>在日志输出时，字符串变量之间的拼接使用占位符的方式。</p><p><span style="color:olive;">说明：</span>因为 String 字符串的拼接会使用 StringBuilder 的 append() 方式，有一定的性能损耗。使用占位符仅是替换动作，可以有效提升性能。</p><p><span style="color:teal;">正例：</span><code>logger.debug(&quot;Processing trade with id : {} and symbol : {}&quot;, id, symbol);</code></p></li><li><p><span style="color:firebrick;">【强制】</span>对于 trace / debug / info 级别的日志输出，必须进行日志级别的开关判断：</p><p><span style="color:olive;">说明：</span>虽然在 debug(参数) 的方法体内第一行代码 isDisabled(Level.DEBUG_INT) 为真时（Slf4j 的常见实现 Log4j 和Logback），就直接 return，但是参数可能会进行字符串拼接运算。此外，如果 debug(getName()) 这种参数内有getName() 方法调用，无谓浪费方法调用的开销。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 如果判断为真，那么可以输出 trace 和 debug 级别的日志</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isDebugEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Current ID is: {} and name is: {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, id, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>避免重复打印日志，浪费磁盘空间，务必在日志配置文件中设置 additivity=false</p></li></ol><p><span style="color:teal;">正例：</span><code>&lt;logger name=&quot;com.taobao.dubbo.config&quot; additivity=&quot;false&quot;&gt;</code></p><ol start="8"><li><p><span style="color:firebrick;">【强制】</span>生产环境禁止使用 System.out 或 System.err 输出或使用 e.printStackTrace() 打印异常堆栈。</p><p><span style="color:olive;">说明：</span>标准日志输出与标准错误输出文件每次 Jboss 重启时才滚动，如果大量输出送往这两个文件，容易造成文件大小超过操作系统大小限制。</p></li><li><p><span style="color:firebrick;">【强制】</span>异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字throws 往上抛出。</p><p><span style="color:teal;">正例：</span>logger.error(&quot;inputParams: {} and errorMessage: {}&quot;, 各类参数或者对象 toString(), e.getMessage(), e);</p></li><li><p><span style="color:firebrick;">【强制】</span>日志打印时禁止直接用 JSON 工具将对象转换成 String。</p></li></ol><p><span style="color:olive;">说明：</span>如果对象里某些 get 方法被覆写，存在抛出异常的情况，则可能会因为打印日志而影响正常业务流程的执行。</p><p><span style="color:teal;">正例：</span>打印日志时仅打印出业务相关属性值或者调用其对象的 toString() 方法。</p><ol start="11"><li><span style="color:gold;">【推荐】</span>谨慎地记录日志。生产环境禁止输出 debug 日志；有选择地输出 info 日志；如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。</li></ol><p><span style="color:olive;">说明：</span>大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？</p><ol start="12"><li><span style="color:gold;">【推荐】</span>可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。如非必要，请不要在此场景打出 error 级别，避免频繁报警。</li></ol><p><span style="color:olive;">说明：</span>注意日志输出的级别，error 级别只记录系统逻辑出错、异常或者重要的错误信息。</p><ol start="13"><li><span style="color:gold;">【推荐】</span>尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。</li></ol><p><span style="color:olive;">说明：</span>国际化团队或海外部署的服务器由于字符集问题，使用全英文来注释和描述日志错误信息。</p><ol start="14"><li><p><span style="color:gold;">【推荐】</span>为了保护用户隐私，日志文件中的用户敏感信息需要进行脱敏处理。</p><p><span style="color:olive;">说明：</span>日志排查问题时，推荐使用订单号、UUID 之类的唯一编号进行查询。</p></li></ol><h2 id="三、单元测试" tabindex="-1">三、单元测试 <a class="header-anchor" href="#三、单元测试" aria-label="Permalink to “三、单元测试”">​</a></h2><ol><li><p><span style="color:firebrick;">【强制】</span>好的单元测试必须遵守 AIR 原则。</p><p><span style="color:olive;">说明：</span>单元测试在线上运行时，感觉像空气（AIR）一样感觉不到，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。</p><ul><li>A：Automatic（自动化）</li><li>I：Independent（独立性）</li><li>R：Repeatable（可重复）</li></ul></li><li><p><span style="color:firebrick;">【强制】</span>单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。不允许使用 System.out 来进行人肉验证，单元测试必须使用 assert 来验证。</p></li><li><p><span style="color:firebrick;">【强制】</span>保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。</p><p><span style="color:orangered;">反例：</span>method2 需要依赖 method1 的执行，将执行结果作为 method2 的输入。</p></li><li><p><span style="color:firebrick;">【强制】</span>单元测试是可以重复执行的，不能受到外界环境的影响。</p><p><span style="color:olive;">说明：</span>单元测试通常会被放到持续集成中，每次有代码 push 时单元测试都会被执行。如果单测对外部环境（网络、服务、中间件等）有依赖，容易导致持续集成机制的不可用。</p><p><span style="color:teal;">正例：</span>为了不受外界环境影响，要求设计代码时就把 SUT（Software under test）的依赖改成注入，在测试时用 Spring 这样的 DI 框架注入一个本地（内存）实现或者 Mock 实现。</p></li><li><p><span style="color:firebrick;">【强制】</span>对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。</p><p><span style="color:olive;">说明：</span>测试粒度小才能在出错时尽快定位到出错的位置。单元测试不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。</p></li><li><p><span style="color:firebrick;">【强制】</span>核心业务、核心应用、核心模块的增量代码确保单元测试通过。</p><p><span style="color:olive;">说明：</span>新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。</p></li><li><p><span style="color:firebrick;">【强制】</span>单元测试代码必须写在如下工程目录： src/test/java，不允许写在业务代码目录下。</p><p><span style="color:olive;">说明：</span>源码编译时会跳过此目录，而单元测试框架默认是扫描此目录。</p></li><li><p><span style="color:gold;">【推荐】</span>单测的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都要达到 100%</p><p><span style="color:olive;">说明：</span>在工程规约的应用分层中提到的 DAO 层，Manager 层，可重用度高的 Service，都应该进行单元测试。</p></li><li><p><span style="color:gold;">【推荐】</span>编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。</p><ul><li>B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。</li><li>C：Correct，正确的输入，并得到预期的结果。</li><li>D：Design，与设计文档相结合，来编写单元测试。</li><li>E：Error，强制错误信息输入（如：非法数据、异常流程、业务允许外等），并得到预期的结果。</li></ul></li><li><p><span style="color:gold;">【推荐】</span>对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。</p><p><span style="color:orangered;">反例：</span>删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这一行新增数据并不符合业务插入规则，导致测试结果异常。</p></li><li><p><span style="color:gold;">【推荐】</span>和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。</p><p><span style="color:teal;">正例：</span>在基础技术部的内部单元测试中，使用 FOUNDATION_UNIT_TEST_的前缀来标识单元测试相关代码。</p></li><li><p><span style="color:gold;">【推荐】</span>对于不可测的代码在适当的时机做必要的重构，使代码变得可测避免为了达到测试要求而书写不规范测试代码。</p></li><li><p><span style="color:gold;">【推荐】</span>在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例（UC）。</p></li><li><p><span style="color:gold;">【推荐】</span>单元测试作为一种质量保障手段，在项目提测前完成单元测试，不建议项目发布后补充单元测试用例。</p></li><li><p><span style="color:olivedrab;">【参考】</span>为了更方便地进行单元测试，业务代码应避免以下情况：</p><ul><li>构造方法中做的事情过多。</li></ul></li></ol><ul><li>存在过多的全局变量和静态方法。 <ul><li>存在过多的外部依赖。</li></ul></li><li>存在过多的条件语句。</li></ul><p><span style="color:olive;">说明：</span>多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。</p><ol start="16"><li><span style="color:olivedrab;">【参考】</span>不要对单元测试存在如下误解： <ul><li>那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。</li><li>单元测试代码是多余的。系统的整体功能与各单元部件的测试正常与否是强相关的。</li><li>单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。</li><li>单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。</li></ul></li></ol><h2 id="四、安全规约" tabindex="-1">四、安全规约 <a class="header-anchor" href="#四、安全规约" aria-label="Permalink to “四、安全规约”">​</a></h2><ol><li><p><span style="color:firebrick;">【强制】</span>隶属于用户个人的页面或者功能必须进行权限控制校验。</p><p><span style="color:olive;">说明：</span>防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信内容。</p></li><li><p><span style="color:firebrick;">【强制】</span>用户敏感数据禁止直接展示，必须对展示数据进行脱敏。</p><p><span style="color:teal;">正例：</span>中国大陆个人手机号码显示：1391219，隐藏中间 4 位，防止隐私泄露。</p></li><li><p><span style="color:firebrick;">【强制】</span>用户输入的 SQL 参数严格使用参数绑定或者 METADATA 字段值限定，防止 SQL 注入，禁止字符串拼接 SQL 访问数据库。</p><p><span style="color:orangered;">反例：</span>某系统签名大量被恶意修改，即是因为对于危险字符#--没有进行转义，导致数据库更新时，where 后边的信息被注释掉，对全库进行更新。</p></li><li><p><span style="color:firebrick;">【强制】</span>用户请求传入的任何参数必须做有效性验证。</p><p><span style="color:olive;">说明：</span>忽略参数校验可能导致：</p><ul><li><p>页面 page size 过大导致内存溢出</p></li><li><p>恶意 order by 导致数据库慢查询</p></li><li><p>缓存击穿</p></li><li><p>SSRF</p></li><li><p>任意重定向</p></li><li><p>SQL 注入，Shell 注入，反序列化注入</p></li><li><p>正则输入源串拒绝服务 ReDoS</p><p>扩展：Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。</p></li></ul></li><li><p><span style="color:firebrick;">【强制】</span>禁止向 HTML 页面输出未经安全过滤或未正确转义的用户数据。</p><p><span style="color:olive;">说明：</span>XSS 跨站脚本攻击。它指的是恶意攻击者往 Web 页面里插入恶意 html 代码，当用户浏览时，嵌入其中 Web 里面的 html 代码会被执行，造成获取用户 cookie、钓鱼、获取用户页面数据、蠕虫、挂马等危害。</p></li><li><p><span style="color:firebrick;">【强制】</span>表单、AJAX 提交必须执行 CSRF 安全验证。</p><p><span style="color:olive;">说明：</span>CSRF (Cross-site request forgery) 跨站请求伪造是一类常见编程漏洞。对于存在 CSRF 漏洞的应用/网站，攻击者可以事先构造好 URL，只要受害者用户一访问，后台便在用户不知情的情况下对数据库中用户参数进行相应修改。</p></li><li><p><span style="color:firebrick;">【强制】</span>URL 外部重定向传入的目标地址必须执行白名单过滤。</p><p><span style="color:olive;">说明：</span>攻击者通过恶意构造跳转的链接，可以向受害者发起钓鱼攻击。</p></li><li><p><span style="color:firebrick;">【强制】</span>在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放的机制，如数量限制、疲劳度控制、验证码校验，避免被滥刷而导致资损。</p><p><span style="color:olive;">说明：</span>如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其它用户，并造成短信平台资源浪费。</p></li><li><p><span style="color:firebrick;">【强制】</span>对于文件上传功能，需要对于文件大小、类型进行严格检查和控制。</p><p><span style="color:olive;">说明：</span>攻击者可以利用上传漏洞，上传恶意文件到服务器，并且远程执行，达到控制网站服务器的目的。</p></li><li><p><span style="color:firebrick;">【强制】</span>配置文件中的密码需要加密。</p></li><li><p><span style="color:gold;">【推荐】</span>发贴、评论、发送等即时消息，需要用户输入内容的场景。必须实现防刷、内容违禁词过滤等风控策略。</p></li></ol><h2 id="五、mysql-数据库" tabindex="-1">五、MySQL 数据库 <a class="header-anchor" href="#五、mysql-数据库" aria-label="Permalink to “五、MySQL 数据库”">​</a></h2><h3 id="一-建表规约" tabindex="-1">(一) 建表规约 <a class="header-anchor" href="#一-建表规约" aria-label="Permalink to “(一) 建表规约”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（1 表示是，0 表示否）。</p><p>注意：POJO 类中的任何布尔类型的变量，都不要加 is 前缀，所以，需要在&lt;resultMap&gt;设置从 is_xxx 到 Xxx 的映射关系。数据库表示是与否的值，使用 tinyint 类型，坚持 is_xxx 的命名方式是为了明确其取值含义与取值范围。</p><p><span style="color:olive;">说明：</span>任何字段如果为非负数，必须是 unsigned。</p><p><span style="color:teal;">正例：</span>表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。</p></li><li><p><span style="color:firebrick;">【强制】</span>表名、字段名必须使用小写字母或数字，禁止出现数字开头禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p><p><span style="color:olive;">说明：</span>MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。</p><p><span style="color:teal;">正例：</span>aliyun_admin，rdc_config，level3_name</p><p><span style="color:orangered;">反例：</span>AliyunAdmin，rdcConfig，level_3_name</p></li><li><p><span style="color:firebrick;">【强制】</span>表名不使用复数名词。</p><p><span style="color:olive;">说明：</span>表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。</p></li><li><p><span style="color:firebrick;">【强制】</span>禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</p></li><li><p><span style="color:firebrick;">【强制】</span>主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。</p><p><span style="color:olive;">说明：</span>pk_即 primary key；uk_即 unique key；idx_即 index 的简称。</p></li><li><p>【 强制】小数类型为 decimal，禁止使用 float 和 double。</p><p><span style="color:olive;">说明：</span>在存储的时候，float 和 double 都存在精度损失的问题，很可能在比较值的时候，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数并分开存储。</p></li><li><p><span style="color:firebrick;">【强制】</span>如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</p></li><li><p><span style="color:firebrick;">【强制】</span>varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引率。</p></li><li><p><span style="color:firebrick;">【强制】</span>表必备三字段：id，create_time，update_time。</p><p><span style="color:olive;">说明：</span>其中 id 必为主键，类型为 bigint unsigned、单表时自增、步长为 1。create_time，update_time 的类型均为 datetime 类型，如果要记录时区信息，那么类型设置为 timestamp。</p></li><li><p><span style="color:firebrick;">【强制】</span>在数据库中不能使用物理删除操作，要使用逻辑删除。</p><p><span style="color:olive;">说明：</span>逻辑删除在数据删除后可以追溯到行为操作。不过会使得一些情况下的唯一主键变得不唯一，需要根据情况来酌情解决。</p></li><li><p><span style="color:gold;">【推荐】</span>表的命名最好是遵循“业务名称_表的作用”。</p><p><span style="color:teal;">正例：</span>alipay_task / force_project / trade_config / tes_question</p></li><li><p><span style="color:gold;">【推荐】</span>库名与应用名称尽量一致。</p></li><li><p><span style="color:gold;">【推荐】</span>如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。</p></li><li><p><span style="color:gold;">【推荐】</span>字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循：</p><ol><li>不是频繁修改的字段。</li><li>不是唯一索引的字段。</li><li>不是 varchar 超长字段，更不能是 text 字段。</li></ol></li></ol><p><span style="color:teal;">正例：</span>各业务线经常冗余存储商品名称，避免查询时需要调用 IC 服务获取。</p><ol start="15"><li><p><span style="color:gold;">【推荐】</span>单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。</p><p><span style="color:olive;">说明：</span>如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p></li><li><p><span style="color:olivedrab;">【参考】</span>合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。</p><p><span style="color:teal;">正例：</span>无符号值可以避免误存负数，且扩大了表示范围：</p></li></ol><p><img src="`+D+`" alt="image-20240717085231131"></p><h3 id="二-索引规约" tabindex="-1">(二) 索引规约 <a class="header-anchor" href="#二-索引规约" aria-label="Permalink to “(二) 索引规约”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。</p><p><span style="color:olive;">说明：</span>不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</p></li><li><p><span style="color:firebrick;">【强制】</span>超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询时，保证被关联的字段需要有索引。</p><p><span style="color:olive;">说明：</span>即使双表 join 也要注意表索引、SQL 性能。</p></li><li><p><span style="color:firebrick;">【强制】</span>在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。</p><p><span style="color:olive;">说明：</span>索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%以上，可以使用 count(distinct left(列名，索引长度)) / count(*) 的区分度来确定。</p></li><li><p><span style="color:firebrick;">【强制】</span>页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</p><p><span style="color:olive;">说明：</span>索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p></li><li><p><span style="color:gold;">【推荐】</span>如果有 order by 的场景，请注意利用索引的<span style="color:blue;">有序性</span>。order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 filesort 的情况，影响查询性能。</p><p><span style="color:teal;">正例：</span>where a = ? and b = ? order by c；索引：a_b_c</p><p><span style="color:orangered;">反例：</span>索引如果存在范围查询，那么索引有序性无法利用，如：WHERE a &gt; 10 ORDER BY b；索引 a_b 无法排序。</p></li><li><p><span style="color:gold;">【推荐】</span>利用覆盖索引来进行查询操作，避免回表。</p><p><span style="color:olive;">说明：</span>如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好，这个目录就是起到覆盖索引的作用。</p><p><span style="color:teal;">正例：</span>能够建立索引的种类分为主键索引、唯一索引、普通索引三种，而覆盖索引只是一种查询的一种效果，用 explain的结果，extra 列会出现：using index。</p></li><li><p><span style="color:gold;">【推荐】</span>利用延迟关联或者子查询优化超多分页场景。</p><p><span style="color:olive;">说明：</span>MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。</p><p><span style="color:teal;">正例：</span>先快速定位需要获取的 id 段，然后再关联：</p><p>SELECT t1.* FROM 表 1 as t1 , (select id from 表 1 where 条件 LIMIT 100000 , 20) as t2 where t1.id = t2.id</p></li><li><p><span style="color:gold;">【推荐】</span>SQL 性能优化的目标：至少要达到 range 级别，要求是 ref 级别，如果可以是 const 最好。</p><p><span style="color:olive;">说明：</span></p><ol><li>consts 单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段即可读取到数据。</li><li>ref 指的是使用普通的索引（normal index）。</li><li>range 对索引进行范围检索。</li></ol><p><span style="color:orangered;">反例：</span>explain 表的结果，type = index，索引物理文件全扫描，速度非常慢，这个 index 级别比较 range 还低，与全表扫描是小巫见大巫。</p></li><li><p><span style="color:gold;">【推荐】</span>建组合索引的时候，区分度最高的在最左边。</p><p><span style="color:teal;">正例：</span>如果 where a = ? and b = ?，a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即可。</p><p><span style="color:olive;">说明：</span>存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如：where c &gt; ? and d = ? 那么即使 c 的区分度更高，也必须把 d 放在索引的最前列，即建立组合索引 idx_d_c。</p></li><li><p><span style="color:gold;">【推荐】</span>防止因字段类型不同造成的隐式转换，导致索引失效。</p></li><li><p><span style="color:olivedrab;">【参考】</span>创建索引时避免有如下极端误解：</p><ol><li>索引宁滥勿缺。认为一个查询就需要建一个索引。</li><li>吝啬索引的创建。认为索引会消耗空间、严重拖慢记录的更新以及行的新增速度。</li><li>抵制唯一索引。认为唯一索引一律需要在应用层通过“先查后插”方式解决。</li></ol></li></ol><h3 id="三-sql-语句" tabindex="-1">(三) SQL 语句 <a class="header-anchor" href="#三-sql-语句" aria-label="Permalink to “(三) SQL 语句”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>不要使用 count(列名) 或 count(常量) 来替代 count(*)，count(*) 是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。</p><p><span style="color:olive;">说明：</span>count(*) 会统计值为 NULL 的行，而 count(列名) 不会统计此列为 NULL 值的行。</p></li><li><p><span style="color:firebrick;">【强制】</span>count(distinct col) 计算该列除 NULL 之外的不重复行数，注意 count(distinct col1 , col2) 如果其中一列全为 NULL，那么即使另一列有不同的值，也返回为 0。</p></li><li><p><span style="color:firebrick;">【强制】</span>当某一列的值全是 NULL 时，count(col) 的返回结果为 0；但 sum(col) 的返回结果为 NULL，因此使用 sum() 时需注意 NPE 问题。</p><p><span style="color:teal;">正例：</span>可以使用如下方式来避免 sum 的 NPE 问题：SELECT IFNULL(SUM(column) , 0) FROM table;</p></li><li><p><span style="color:firebrick;">【强制】</span>使用 <span style="color:blue;">ISNULL()</span> 来判断是否为 <span style="color:blue;">NULL</span> 值。</p><p><span style="color:olive;">说明：</span>NULL 与任何值的直接比较都为 NULL。</p><ol><li><span style="color:blue;">NULL&lt;&gt;NULL</span> 的返回结果是 NULL，而不是 <span style="color:red;">false</span>。</li><li><span style="color:blue;">NULL=NULL</span> 的返回结果是 NULL，而不是 <span style="color:red;">true</span>。</li><li><span style="color:blue;">NULL&lt;&gt;1</span> 的返回结果是 NULL，而不是 <span style="color:red;">true</span>。</li></ol><p><span style="color:orangered;">反例：</span>在 SQL 语句中，如果在 null 前换行，影响可读性。</p><p><code>select * from table where column1 is null and column3 is not null;</code>而 ISNULL(column) 是一个整体，简洁易懂。从性能数据上分析，ISNULL(column) 执行效率更快一些。</p></li><li><p><span style="color:firebrick;">【强制】</span>代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。</p></li><li><p><span style="color:firebrick;">【强制】</span>不得使用外键与级联，一切外键概念必须在应用层解决。</p><p><span style="color:olive;">说明：</span>（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</p></li><li><p><span style="color:firebrick;">【强制】</span>禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p></li><li><p><span style="color:firebrick;">【强制】</span>数据订正（特别是删除或修改记录操作）时，要先 select，避免出现误删除的情况，确认无误才能执行更新语句。</p></li><li><p><span style="color:firebrick;">【强制】</span>对于数据库中表记录的查询和变更，只要涉及多个表，都需要在列名前加表的别名（或表名）进行限定。</p><p><span style="color:olive;">说明：</span>对多表进行查询记录、更新记录、删除记录时，如果对操作列没有限定表的别名（或表名），并且操作列在多个表中存在时，就会抛异常。</p><p><span style="color:teal;">正例：</span><code>select t1.name from first_table as t1 , second_table as t2 where t1.id = t2.id;</code></p><p><span style="color:orangered;">反例：</span>在某业务中，由于多表关联查询语句没有加表的别名（或表名）的限制，正常运行两年后，最近在某个表中增加一个同名字段，在预发布环境做数据库变更后，线上查询语句出现出 1052 异常：Column &#39;name&#39; infield list is ambiguous。</p></li><li><p><span style="color:gold;">【推荐】</span>SQL 语句中表的别名前加 as，并且以 t1、t2、t3、...的顺序依次命名。</p><p><span style="color:olive;">说明：</span></p><ol><li>别名可以是表的简称，或者是依照表在 SQL 语句中出现的顺序，以 t1、t2、t3 的方式命名。</li><li>别名前加 as 使别名更容易识别。</li></ol></li></ol><p><span style="color:teal;">正例：</span><code>select t1.name from first_table as t1 , second_table as t2 where t1.id = t2.id;</code></p><ol start="11"><li><p><span style="color:gold;">【推荐】</span>in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在 1000 个之内。</p></li><li><p><span style="color:olivedrab;">【参考】</span>因国际化需要，所有的字符存储与表示，均采用 utf8mb4 字符集，字符计数方法需要注意。</p><p><span style="color:olive;">说明：</span></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> LENGTH</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;轻松工作&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)；</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--返回为 12</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CHARACTER_LENGTH(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;轻松工作&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)；</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">--返回为 4</span></span></code></pre></div><p>表情需要用 utf8mb4 来进行存储，注意它与 utf8 编码的区别。</p></li><li><p><span style="color:olivedrab;">【参考】</span>TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE 无事务且不触发 trigger，有可能造成事故，故不建议在开发代码中使用此语句。</p><p><span style="color:olive;">说明：</span>TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</p></li></ol><h3 id="四-orm-映射" tabindex="-1">(四) ORM 映射 <a class="header-anchor" href="#四-orm-映射" aria-label="Permalink to “(四) ORM 映射”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。</p><p><span style="color:olive;">说明：</span></p><ol><li>增加查询分析器解析成本。</li><li>增减字段容易与 resultMap 配置不一致。</li><li>无用字段增加网络消耗，尤其是 text 类型的字段。</li></ol></li><li><p><span style="color:firebrick;">【强制】</span>POJO 类的布尔属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属性之间的映射。</p><p><span style="color:olive;">说明：</span>参见定义 POJO 类以及数据库字段定义规定，在 sql.xml 增加映射，是必须的。</p></li><li><p><span style="color:firebrick;">【强制】</span>不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义 &lt;resultMap&gt;；反过来，每一个表也必然有一个&lt;resultMap&gt;与之对应。</p><p><span style="color:olive;">说明：</span>配置映射关系，使字段与 DO 类解耦，方便维护。</p></li><li><p><span style="color:firebrick;">【强制】</span>sql.xml 配置参数使用：#{}，#param# 不要使用 \${} 此种方式容易出现 SQL 注入。</p></li><li><p><span style="color:firebrick;">【强制】</span>iBATIS 自带的 queryForList(String statementName，int start，int size) 不推荐使用。</p><p><span style="color:olive;">说明：</span>其实现方式是在数据库取到 statementName 对应的 SQL 语句的所有记录，再通过 subList 取 start，size 的子集合，线上因为这个原因曾经出现过 OOM。</p><p><span style="color:teal;">正例：</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> HashMap&lt;&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, start);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, size);</span></span></code></pre></div></li><li><p><span style="color:firebrick;">【强制】</span>不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。</p><p><span style="color:orangered;">反例：</span>某同学为避免写一个&lt;resultMap&gt;xxx&lt;/resultMap&gt;，直接使用 Hashtable 来接收数据库返回结果，结果出现日常是把 bigint 转成 Long 值，而线上由于数据库版本不一样，解析成 BigInteger，导致线上问题。</p></li><li><p><span style="color:firebrick;">【强制】</span>更新数据表记录时，必须同时更新记录对应的 update_time 字段值为当前时间。</p></li><li><p><span style="color:gold;">【推荐】</span>不要写一个大而全的数据更新接口。传入为 POJO 类，不管是不是自己的目标更新字段，都进行 update table set c1 = value1 , c2 = value2 , c3 = value3；这是不对的。执行 SQL 时，不要更新无改动的字段，一是易出错；二是效率低；三是增加 binlog 存储。</p></li><li><p><span style="color:olivedrab;">【参考】</span>@Transactional 事务不要滥用。事务会影响数据库的 QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</p></li><li><p><span style="color:olivedrab;">【参考】</span>&lt;isEqual&gt;中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带上此条件；&lt;isNotEmpty&gt;表示不为空且不为 null 时执行；&lt;isNotNull&gt;表示不为 null 值时执行。</p></li></ol><h2 id="六、工程结构" tabindex="-1">六、工程结构 <a class="header-anchor" href="#六、工程结构" aria-label="Permalink to “六、工程结构”">​</a></h2><h3 id="一-应用分层" tabindex="-1">(一) 应用分层 <a class="header-anchor" href="#一-应用分层" aria-label="Permalink to “(一) 应用分层”">​</a></h3><p>略...</p><h3 id="二-二方库依赖" tabindex="-1">(二) 二方库依赖 <a class="header-anchor" href="#二-二方库依赖" aria-label="Permalink to “(二) 二方库依赖”">​</a></h3><ol><li><p><span style="color:firebrick;">【强制】</span>定义 GAV 遵从以下规则：</p><p>1）<span style="color:blue;">G</span>roupId 格式：com.{公司/BU}.业务线.[子业务线]，最多 4 级。</p><p><span style="color:olive;">说明：</span>{公司/BU}例如：alibaba / taobao / tmall / kaikeba 等 BU 一级；子业务线可选。</p><p><span style="color:teal;">正例：</span>com.taobao.jstorm 或 com.alibaba.dubbo.register</p><p>2）<span style="color:blue;">A</span>rtifactId 格式：产品线名-模块名。语义不重复不遗漏，先到中央仓库去查证一下。</p><p><span style="color:teal;">正例：</span>dubbo-client / fastjson-api / jstorm-tool</p><p>3）<span style="color:blue;">V</span>ersion：详细规定参考下方。</p></li><li><p><span style="color:firebrick;">【强制】</span>二方库版本号命名方式：主版本号.次版本号.修订号</p><p>1）主版本号：产品方向改变，或者大规模 API 不兼容，或者架构不兼容升级。</p><p>2）次版本号：保持相对兼容性，增加主要功能特性，影响范围极小的 API 不兼容修改。</p><p>3）修订号：保持完全兼容性，修复 BUG、新增次要功能特性等。</p><p><span style="color:olive;">说明：</span>注意起始版本号必须为：1.0.0，而不是 0.0.1。</p><p><span style="color:orangered;">反例：</span>仓库内某二方库版本号从 1.0.0.0 开始，一直默默“升级”成 1.0.0.64，完全失去版本的语义信息。</p></li><li><p><span style="color:firebrick;">【强制】</span>线上应用不要依赖 SNAPSHOT 版本（安全包除外）；正式发布的类库必须先去中央仓库进行查证，使 RELEASE 版本号有延续性，且版本号不允许覆盖升级。</p><p><span style="color:olive;">说明：</span>不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。</p></li><li><p><span style="color:firebrick;">【强制】</span>二方库的新增或升级，保持除功能点之外的其它 jar 包仲裁结果不变。如果有改变，必须明确评估和验证。</p><p><span style="color:olive;">说明：</span>在升级时，进行 dependency:resolve 前后信息比对，如果仲裁结果完全不一致，那么通过 dependency:tree 命令，找出差异点，进行&lt;exclude&gt;排除 jar 包。</p></li><li><p><span style="color:firebrick;">【强制】</span>二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的 POJO 对象。</p></li><li><p><span style="color:firebrick;">【强制】</span>二方库定制包的命名方式，在规定的版本号之后加“-英文说明[序号]”，英文说明可以是部门简称、业务名称，序号直接紧跟在英文说明之后，表示此定制包的顺序号。</p><p><span style="color:olive;">说明：</span>fastjson 给 SCM 定制的版本号：1.0.0-SCM1。注：请尽可能在应用端来解决类冲突和加载问题，避免随意发布此类定制包。</p></li><li><p><span style="color:firebrick;">【强制】</span>依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。</p><p><span style="color:olive;">说明：</span>依赖 springframework-core，-context，-beans，它们都是同一个版本，可以定义一个变量来保存版本：\${spring.version}，定义依赖的时候，引用该版本。</p></li><li><p><span style="color:firebrick;">【强制】</span>禁止在子项目的 pom 依赖中出现相同的 GroupId，相同的 ArtifactId，但是不同的 Version。</p><p><span style="color:olive;">说明：</span>在本地调试时会使用各子项目指定的版本号，但是合并成一个 war，只能有一个版本号出现在最后的 lib 目录中。曾经出现过线下调试是正确的，发布到线上却出故障的先例。</p></li><li><p><span style="color:gold;">【推荐】</span>底层基础技术框架、核心数据管理平台、或近硬件端系统谨慎引入第三方实现。</p></li><li><p><span style="color:gold;">【推荐】</span>所有 pom 文件中的依赖声明放在&lt;dependencies&gt;语句块中，所有版本仲裁放在&lt;dependencyManagement&gt;语句块中。</p><p><span style="color:olive;">说明：</span>&lt;dependencyManagement&gt;里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖，version 和 scope 都读取自父 pom。而&lt;dependencies&gt;所有声明在主 pom 的&lt;dependencies&gt;里的依赖都会自动引入，并默认被所有的子项目继承。</p></li><li><p><span style="color:gold;">【推荐】</span>二方库不要有配置项，最低限度不要再增加配置项。</p></li><li><p><span style="color:gold;">【推荐】</span>不要使用不稳定的工具包或者 Utils 类。</p><p><span style="color:olive;">说明：</span>不稳定指的是提供方无法做到向下兼容，在编译阶段正常，但在运行时产生异常，因此，尽量使用业界稳定的二方工具包。</p></li><li><p><span style="color:olivedrab;">【参考】</span>为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则：</p><p>1）<strong>精简可控原则</strong>。移除一切不必要的 API 和依赖，只包含 Service API、必要的领域模型对象、Utils 类、常量、枚举等。如果依赖其它二方库，尽量是 provided 引入，让二方库使用者去依赖具体版本号；无 log 具体实现，只依赖日志框架。</p><p>2）<strong>稳定可追溯原则</strong>。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。</p></li></ol><h3 id="三-服务器" tabindex="-1">(三) 服务器 <a class="header-anchor" href="#三-服务器" aria-label="Permalink to “(三) 服务器”">​</a></h3><p>略...</p><h2 id="七、设计规约" tabindex="-1">七、设计规约 <a class="header-anchor" href="#七、设计规约" aria-label="Permalink to “七、设计规约”">​</a></h2><p>略...</p><h2 id="附-1-版本历史" tabindex="-1">附 1：版本历史 <a class="header-anchor" href="#附-1-版本历史" aria-label="Permalink to “附 1：版本历史”">​</a></h2><p>略...</p><h2 id="附-2-专有名词解释" tabindex="-1">附 2：专有名词解释 <a class="header-anchor" href="#附-2-专有名词解释" aria-label="Permalink to “附 2：专有名词解释”">​</a></h2><ol><li><p>POJO（Plain Ordinary Java Object）：在本规约中，POJO 专指只有 setter / getter / toString 的简单类，包括DO / DTO / BO / VO 等。</p></li><li><p>DO（Data Object）：阿里巴巴专指数据库表一 一对应的 POJO 类。此对象与数据库表结构一 一对应，通过 DAO 层向上传输数据源对象。</p></li><li><p>PO（Persistent Object）：也指数据库表一 一对应的 POJO 类。此对象与数据库表结构一 一对应，通过 DAO 层向上传输数据源对象。</p></li><li><p>DTO（Data Transfer Object ）：数据传输对象，Service 或 Manager 向外传输的对象。</p></li><li><p>BO（Business Object）：业务对象，可以由 Service 层输出的封装业务逻辑的对象。</p></li><li><p>Query：数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用 Map 类来传输。</p></li><li><p>VO（View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</p></li><li><p>CAS（Compare And Swap）：解决多线程并行情况下使用锁造成性能损耗的一种机制，这是硬件实现的原子操作。CAS 操作包含三个操作数：内存位置、预期原值和新值。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。</p></li><li><p>GAV（GroupId、ArtifactId、Version）：Maven 坐标，是用来唯一标识 jar 包。</p></li><li><p>OOP（Object Oriented Programming）：本文泛指类、对象的编程处理方式。</p></li><li><p>AQS（AbstractQueuedSynchronizer）：利用先进先出队列实现的底层同步工具类，它是很多上层同步实现类的基础，比如：ReentrantLock、CountDownLatch、Semaphore 等，它们通过继承 AQS 实现其模版方法，然后将 AQS 子类作为同步组件的内部类，通常命名为 Sync。</p></li><li><p>ORM（Object Relation Mapping）：对象关系映射，对象领域模型与底层数据之间的转换，本文泛指 iBATIS，mybatis 等框架。</p></li><li><p>NPE（java.lang.NullPointerException）：空指针异常。</p></li><li><p>OOM（Out Of Memory）：源于 java.lang.OutOfMemoryError，当 JVM 没有足够的内存来为对象分配空间并且垃</p></li></ol><p>圾回收器也无法回收空间时，系统出现的严重状况。</p><ol start="15"><li><p>GMT（Greenwich Mean Time）：指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。地球每天的自转是有些不规则的，而且正在缓慢减速，现在的标准时间是协调世界时（UTC），它由原子钟提供。</p></li><li><p>一方库：本工程内部子项目模块依赖的库（jar 包）。</p></li><li><p>二方库：公司内部发布到中央仓库，可供公司内部其它应用依赖的库（jar 包）。</p></li><li><p>三方库：公司之外的开源库（jar 包）。</p></li></ol><h2 id="附-3-错误码列表" tabindex="-1">附 3：错误码列表 <a class="header-anchor" href="#附-3-错误码列表" aria-label="Permalink to “附 3：错误码列表”">​</a></h2><p>略...</p>`,62);function I(n,N,U,R,J,H){const h=r,k=d("ClientOnly");return l(),p("div",null,[F,y(k,null,{default:g(()=>{var t,e;return[(((t=n.$frontmatter)==null?void 0:t.aside)??!0)&&(((e=n.$frontmatter)==null?void 0:e.showArticleMetadata)??!0)?(l(),c(h,{key:0,article:n.$frontmatter},null,8,["article"])):A("",!0)]}),_:1}),B,s("ol",null,[u,s("li",null,[E,s("p",null,[b,i("Java 服务端如果直接返回 Long 整型数据给前端，Javascript 会自动转换为 Number 类型（"),v,i("）。Long 类型能表示的最大值是 "),s("mjx-container",m,[(l(),p("svg",f,T)),S]),i("-1，在取值范围之内，超过 2"),s("mjx-container",L,[(l(),p("svg",_,O)),j]),i("（9007199254740992）的数值转化为 Javascript 的 Number 时，有些数值会产生精度损失。扩展说明，在 Long 取值范围内，任何 2 的指数次的整数都是绝对不会存在精度损失的，所以说精度损失是一个概率问题。若浮点数尾数位与指数位空间不限，则可以精确表示任何整数，但很不幸，双精度浮点数的尾数位只有 52 位。")]),P,M]),w]),Q])}const G=o(C,[["render",I]]);export{X as __pageData,G as default};
